{"version":3,"sources":["model/models.ts","state/core/index.ts","state/AppSubStore.ts","state/Config.ts","state/res/Base.ts","Util.ts","state/res/RecentTrade.ts","state/res/OrderBook.ts","state/res/Market.ts","state/res/Exchange.ts","state/res/Exchanges.ts","state/UiStates.ts","state/res/Balance.ts","state/res/AccountOrder.ts","state/res/Account.ts","state/res/Accounts.ts","state/AppRootStore.ts","state/index.ts","pages/Util.tsx","components/Util.tsx","components/UpdatableCard/index.tsx","components/Exchanges/index.tsx","pages/Home/index.tsx","components/RecentTrades/index.tsx","components/OrderBook/index.tsx","components/MarketsView/index.tsx","components/AccountOrders/index.tsx","components/CurrentBalance/index.tsx","components/AccountsBalanceView/index.tsx","components/TradeMainView/index.tsx","components/ExchangeView/index.tsx","pages/Exchange/index.tsx","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["eSide","eOrderType","eOrderStatus","eTickType","SubStore","root","parent","snapShot","store","this","applySnapShot","self","obj","Object","assign","getStoreSnapShoot","keys","key","hasOwnProperty","val","getSnapShoot","Array","isArray","isObservableArray","map","item","Map","isObservableMap","itemObj","forEach","itemKey","AppSubStore","Config","ls","BrowserStore","observable","BaseResModel","loading","lastUpdateTime","Date","console","warn","forTwo","arr","handle","length","len","i","CommonSubLs","localStorageManager","rootKey","lsGet","k","dv","get","undefined","lsSet","v","set","lsRemove","RecentTrade","loadingStart","market","ccxtIns","fetchTrades","spec","symbol","then","data","trades","_","orderBy","reverse","o1","o2","tick","zeroMinusTick","price","plusTick","minusTick","zeroPlusTick","loadingEnd","action","OrderBook","transferToOrderBookRes","originItem","size","accumulateSize","fetchOrderBook","bids","asks","Market","recentTrades","orderBook","updateRes","lastTrade","computed","Exchange","marketsMap","name","window","fetchedMarkets","fetchMarkets","items","log","runInAction","res","fetchTickers","each","lastTicker","coinSymbol","from","values","filter","o","base","ccxt","exchange","createCCXTOption","urls","api","private","public","Exchanges","exchangesMap","bigone3","all","createCCXTIns","UiStates","account","Balance","fetchBalance","balances","balance","merge","balancesAll","total","AccountOrder","Promise","fetchOrders","state","data1","data2","orders","type","limit","ordersObj","keyBy","status","open","Account","accountOrdersMap","ccxtOptions","accountOrder","createOrUpdateOrdersByMarket","filled","reduce","sum","order","money","amount","side","lastPrice","safeGetAccountOrder","outValue","computeOutMoneyByHistory","currentValue","computeCurrentValue","profit","rate","Accounts","accountsMap","lsAccounts","config","lsAccountsAdd","exchangeKey","cctxOption","find","push","lsAccountsRemove","accountName","remove","delete","lsAccountsGetAllAccounts","createAccountsFromLs","a","exchanges","createAccount","AppRootStore","accounts","uiStates","StoreContext","React","createContext","useStore","useContext","mobx","Header","Footer","Content","PageStruct","props","AppHeader","style","minHeight","children","observer","history","useHistory","className","theme","mode","defaultSelectedKeys","lineHeight","Item","onClick","mCol","column","title","capitalize","dataIndex","width","render","row","Ob","r","templateRender","FormatValue","quote","ceil","FormatPercentage","FormatTimeAuto","formatStr","isToday","format","UpdateBtn","shape","icon","TimeAgo","time","isDate","datetime","locale","UpdatableCard","updatableRes","noContentPadding","updateImmediately","useEffect","cardProps","omit","classNames","extra","list","padding","dataSource","rowKey","columns","to","Home","RecentTrades","height","autoHide","id","trade","RecentTradesItem","timestamp","buy","TickItem","useLocalStore","showNum","both","take","setSide","sell","index","OrderBookItem","MarketPrice","TabPane","MarketsView","s","Set","allMarkets","add","defaultActiveKey","onChange","balancesNotZero","markets","getMarketsByCoinSymbol","tab","renderCurrentAccount","quotes","MarketsTable","onRow","close","AccountOrders","activeTab","renderTable","activeKey","activeOrders","CurrentBalance","userOrder","computeProfitAndRate","color","text","BalanceItem","usedPercent","used","freePercent","free","renderRow","percent","showInfo","AccountsBalanceView","AccountsView","formRef","useRef","visible","addAccount","cctxOptions","createAccountAndSaveLs","handleCreate","current","form","validateFields","err","apiKey","secret","AccountCreateForm","wrappedComponentRef","onCancel","onCreate","create","getFieldDecorator","HookForm","Component","okText","onOk","layout","label","rules","required","UserAsset","every","TradeMainView","span","ExchangeView","ExchangePage","useParams","changeExchange","App","exact","path","useState","ready","setReady","initExchanges","init","Provider","value","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7f215ff2.chunk.js","sourcesContent":["export enum eSide {\r\n  buy = \"buy\",\r\n  sell = \"sell\",\r\n  both = \"both\"\r\n}\r\n\r\nexport enum eOrderType {\r\n  limit = \"limit\",\r\n  market = \"market\"\r\n}\r\n\r\nexport interface IBalanceRes {\r\n  key: string;\r\n  free: number;\r\n  used: number;\r\n  total: number;\r\n}\r\n\r\nexport interface IMarketRes {\r\n  symbol: string;\r\n  quote: string;\r\n  precision: { amount: number; price: number };\r\n  active: boolean;\r\n  id: string;\r\n  baseId: string;\r\n  quoteId: string;\r\n  limits: {\r\n    amount: { min: number; max: number };\r\n    cost: {};\r\n    price: { min: number; max: number };\r\n  };\r\n  base: string;\r\n  info: {\r\n    min_quote_value: string;\r\n    base_asset: { symbol: string; name: string; id: string };\r\n    name: string;\r\n    id: string;\r\n    quote_scale: number;\r\n    quote_asset: { symbol: string; name: string; id: string };\r\n    base_scale: number;\r\n  };\r\n}\r\n\r\nexport interface ITickerRes {\r\n  symbol: string;\r\n  last: number;\r\n  change: number;\r\n  askVolume: number;\r\n  datetime: string;\r\n  high: number;\r\n  low: number;\r\n  ask: number;\r\n  bidVolume: number;\r\n  bid: number;\r\n  baseVolume: number;\r\n  close: number;\r\n  open: number;\r\n  timestamp: number;\r\n  info: {\r\n    volume: string;\r\n    asset_pair_name: string;\r\n    high: string;\r\n    low: string;\r\n    ask: { quantity: string; order_count: number; price: string };\r\n    daily_change: string;\r\n    bid: { quantity: string; order_count: number; price: string };\r\n    close: string;\r\n    open: string;\r\n  };\r\n}\r\n\r\nexport enum eOrderStatus {\r\n  open = \"open\",\r\n  closed = \"closed\",\r\n  canceled = \"canceled\"\r\n}\r\n\r\nexport interface IOrderRes {\r\n  symbol: string;\r\n  datetime: string;\r\n  side: eSide;\r\n  type: eOrderType;\r\n  amount: number;\r\n  cost: number;\r\n  price: number;\r\n  filled: number;\r\n  id: string;\r\n  remaining: number;\r\n  timestamp: number;\r\n  status: eOrderStatus;\r\n  info?: {\r\n    asset_pair_name: string;\r\n    amount: string;\r\n    side: string;\r\n    updated_at: string;\r\n    price: string;\r\n    avg_deal_price: string;\r\n    created_at: string;\r\n    id: number;\r\n    state: string;\r\n    filled_amount: string;\r\n  };\r\n}\r\n\r\nexport enum eTickType {\r\n  plusTick = \"plusTick\",\r\n  zeroPlusTick = \"ZeroPlusTick\",\r\n  minusTick = \"minusTick\",\r\n  zeroMinusTick = \"ZeroMinusTick\"\r\n}\r\n\r\nexport interface ITradeRes {\r\n  symbol: string;\r\n  datetime: string;\r\n  side: eSide;\r\n  amount: number;\r\n  cost: number;\r\n  price: number;\r\n  id: string;\r\n  type: string;\r\n  timestamp: number;\r\n  tick: eTickType;\r\n  info: {\r\n    amount: string;\r\n    price: string;\r\n    created_at: string;\r\n    taker_side: string;\r\n    id: number;\r\n    inserted_at: string;\r\n  };\r\n}\r\n\r\nexport interface IOrderBookRes {\r\n  price: number;\r\n  size: number;\r\n  accumulateSize: number; //累计（吃到这里所需要的数量）\r\n  // side:eSide;\r\n}\r\n","import {isObservableArray, isObservableMap} from 'mobx';\n\nexport abstract class SubStore<ParentType = any, RootStoreType = ParentType> {\n  store: RootStoreType; //root\n  parent: ParentType; // parent store\n\n  constructor(root: RootStoreType | null, parent: ParentType, snapShot?: any) {\n    this.store = root as RootStoreType;\n    if (!root) {\n      this.store = (this as unknown) as RootStoreType;\n    }\n    this.parent = parent;\n    this.applySnapShot(snapShot);\n  }\n\n  //store clone\n  static getStoreSnapShoot(obj: SubStore) {\n    delete obj.store;\n    delete obj.parent;\n    for (const key of Object.keys(obj)) {\n      if (obj.hasOwnProperty(key)) {\n        let val = obj[key] as unknown;\n\n        if (val instanceof SubStore) {\n          obj[key] = val.getSnapShoot();\n        } else if (Array.isArray(val) || isObservableArray(val)) {\n          val = val.map((item) => {\n            if (item instanceof SubStore) {\n              item = item.getSnapShoot();\n            }\n            return item;\n          });\n          obj[key] = val;\n        } else if (val instanceof Map || isObservableMap(val)) {\n          const itemObj = {};\n          val.forEach((item, itemKey) => {\n            itemObj[itemKey] = item;\n            if (item instanceof SubStore) {\n              itemObj[itemKey] = item.getSnapShoot();\n            }\n          });\n          obj[key] = itemObj;\n        } else if (typeof val === 'object') {\n          obj[key] = SubStore.getStoreSnapShoot(val as any);\n        }\n      }\n    }\n    return obj;\n  }\n\n  getSnapShoot(self = this): this {\n    let obj = Object.assign({}, self);\n    // obj = toJS(obj);\n    return SubStore.getStoreSnapShoot(obj) as any;\n  }\n\n  toJSON() {\n    const obj = Object.assign({}, this);\n    delete obj.store;\n    delete obj.parent;\n\n    return obj;\n  }\n\n  applySnapShot(snapShot: this) {\n    // console.warn('need to be implemented');\n  }\n}\n","import {SubStore} from \"./core\";\r\nimport {AppRootStore} from \"./AppRootStore\";\r\n\r\nexport class AppSubStore<ParentType> extends SubStore<ParentType,\r\n  AppRootStore> {\r\n}\r\n","import {AppSubStore} from \"./AppSubStore\";\r\nimport {AppRootStore} from \"./AppRootStore\";\r\nimport {observable} from \"mobx\";\r\nimport * as  BrowserStore from 'store';\r\n\r\n\r\nexport class Config extends AppSubStore<AppRootStore> {\r\n  @observable version = 1;\r\n\r\n  ls: LocalStorageType;\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n    this.ls = BrowserStore;\r\n  }\r\n\r\n}\r\n\r\nexport type LocalStorageType = {\r\n  get: (key: string, defaultVal?: any) => any;\r\n  set: (key: string, val: any) => void;\r\n  remove: (key: string) => void;\r\n};","import {AppSubStore} from \"../AppSubStore\";\r\nimport {observable} from \"mobx\";\r\n\r\nexport class BaseResModel<ParentType = any> extends AppSubStore<ParentType> {\r\n  @observable loading = false;\r\n  @observable lastUpdateTime = new Date();\r\n\r\n\r\n  loadingStart() {\r\n    this.loading = true;\r\n  }\r\n\r\n  loadingEnd() {\r\n    this.loading = false;\r\n    this.lastUpdateTime = new Date();\r\n  }\r\n\r\n  updateRes() {\r\n    console.warn(\"need to be implemented\");\r\n  }\r\n\r\n}","export function forTwo<T = any>(arr: T[], handle: (current: T, next: T) => void) {\r\n  if (arr.length < 2) {\r\n    return;\r\n  }\r\n  const len = arr.length - 1;\r\n  for (let i = 0; i < len; i++) {\r\n    const current = arr[i]\r\n    const next = arr[i + 1];\r\n    handle(current, next)\r\n  }\r\n}\r\n\r\n\r\n//把 ls 的一个字段当做 map 来用\r\nexport class CommonSubLs {\r\n  rootKey: string;\r\n  ls: any;\r\n\r\n  constructor(localStorageManager, rootKey: string) {\r\n    this.rootKey = rootKey;\r\n    this.ls = localStorageManager;\r\n  }\r\n\r\n  lsGet = (k: string, dv) => {\r\n    const root = this.ls.get(this.rootKey, {});\r\n    let item = root[k];\r\n    if (item === undefined) {\r\n      item = dv;\r\n    }\r\n    return item;\r\n  };\r\n\r\n  lsSet = (k, v) => {\r\n    const root = this.ls.get(this.rootKey, {});\r\n    root[k] = v;\r\n    this.ls.set(this.rootKey, root);\r\n  };\r\n\r\n  lsRemove = k => {\r\n    const root = this.ls.get(this.rootKey, {});\r\n    delete root[k];\r\n    this.ls.set(this.rootKey, root);\r\n  };\r\n}\r\n","import {action, observable} from \"mobx\";\r\nimport {BaseResModel} from \"./Base\";\r\nimport {eTickType, ITradeRes} from \"../../model/models\";\r\nimport {Market} from \"./Market\";\r\nimport _ from \"lodash\";\r\nimport {forTwo} from \"../../Util\";\r\n\r\nexport class RecentTrade extends BaseResModel<Market> {\r\n  get market() {\r\n    return this.parent;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.parent.ccxtIns;\r\n  }\r\n\r\n  @observable trades: ITradeRes[] = [];\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    const market = this.market;\r\n    await this.ccxtIns.fetchTrades(market.spec.symbol).then(data => {\r\n      const trades = _.orderBy(data, \"timestamp\", [\"desc\"]) as ITradeRes[];\r\n\r\n      forTwo(_.reverse(trades), (o1, o2) => {\r\n        let tick = eTickType.zeroMinusTick;\r\n\r\n        if (o2.price > o1.price) {\r\n          tick = eTickType.plusTick;\r\n        } else if (o2.price < o1.price) {\r\n          tick = eTickType.minusTick;\r\n        } else if (o2.price === o1.price) {\r\n          if (\r\n            o1.tick === eTickType.plusTick ||\r\n            o1.tick === eTickType.zeroPlusTick\r\n          ) {\r\n            tick = eTickType.zeroPlusTick;\r\n          } else {\r\n            tick = eTickType.zeroMinusTick;\r\n          }\r\n        }\r\n        o2.tick = tick;\r\n      });\r\n\r\n      this.trades = _.orderBy(data, \"timestamp\", [\"desc\"]);\r\n    });\r\n    this.loadingEnd();\r\n  }\r\n}\r\n","import {action, observable} from \"mobx\";\r\nimport {BaseResModel} from \"./Base\";\r\nimport {IOrderBookRes} from \"../../model/models\";\r\nimport {Market} from \"./Market\";\r\n\r\nexport class OrderBook extends BaseResModel<Market> {\r\n  get market() {\r\n    return this.parent;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.parent.ccxtIns;\r\n  }\r\n\r\n  @observable asks: IOrderBookRes[] = [];\r\n  @observable bids: IOrderBookRes[] = [];\r\n\r\n  transferToOrderBookRes = (originItem: number[]) => {\r\n    return {\r\n      price: originItem[0],\r\n      size: originItem[1],\r\n      accumulateSize: originItem[1]\r\n      // side:,\r\n    } as IOrderBookRes;\r\n  };\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    const market = this.market;\r\n    await this.ccxtIns.fetchOrderBook(market.spec.symbol).then(data => {\r\n      this.bids = data.bids.map(this.transferToOrderBookRes);\r\n      this.asks = data.asks.map(this.transferToOrderBookRes);\r\n    });\r\n    this.loadingEnd();\r\n  }\r\n}\r\n","import {action, computed, observable} from \"mobx\";\r\nimport {BaseResModel} from \"./Base\";\r\nimport {Exchange} from \"./Exchange\";\r\nimport {IMarketRes, ITickerRes} from \"../../model/models\";\r\nimport {RecentTrade} from \"./RecentTrade\";\r\nimport {OrderBook} from \"./OrderBook\";\r\n\r\nexport class Market extends BaseResModel<Exchange> {\r\n  @observable recentTrades: RecentTrade; //近期交易\r\n  @observable orderBook: OrderBook; //买卖盘\r\n  @observable spec = null as IMarketRes;\r\n\r\n  @observable lastTicker = null as ITickerRes;\r\n\r\n\r\n  constructor(root, parent, spec: IMarketRes) {\r\n    super(root, parent);\r\n    this.spec = spec;\r\n    this.recentTrades = new RecentTrade(root, this);\r\n    this.orderBook = new OrderBook(root, this);\r\n  }\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    await this.recentTrades.updateRes();\r\n    await this.orderBook.updateRes();\r\n    this.loadingEnd();\r\n  }\r\n\r\n  @computed get lastTrade() {\r\n    return this.recentTrades.trades[0];\r\n  }\r\n\r\n  //市场价\r\n  @computed get lastPrice() {\r\n    if (this.lastTrade) {\r\n      return this.lastTrade.price;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import {action, computed, observable, runInAction} from \"mobx\";\r\nimport {BaseResModel} from \"./Base\";\r\nimport {Market} from \"./Market\";\r\nimport {Exchanges} from \"./Exchanges\";\r\nimport _ from \"lodash\";\r\nimport {ITickerRes} from \"../../model/models\";\r\n\r\nexport class Exchange extends BaseResModel<Exchanges> {\r\n  marketsMap = observable.map<string, Market>({}, {name: \"marketsMap\"});\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    window['bigone'] = this;\r\n  }\r\n\r\n  @observable ccxtIns = null as any;\r\n\r\n  @observable exchange = \"bigone3\"; // 对应ccxt里的名字\r\n\r\n  @observable createCCXTOption = {\r\n\r\n    urls: {\r\n      // 'api': 'https://b1.run/api/v3/',\r\n      api: {\r\n        private: \"https://b1.run/api/v3/viewer\",\r\n        public: \"https://b1.run/api/v3\"\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  @observable fetchedMarkets = false;\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    if (!this.fetchedMarkets) {\r\n      this.fetchedMarkets = true;\r\n      let items = await this.ccxtIns.fetchMarkets();\r\n      console.log(\"刷新市场\");\r\n      runInAction(() => {\r\n        items.forEach(item => {\r\n          const res = new Market(this.store, this, item);\r\n          this.marketsMap.set(item.symbol, res);\r\n        });\r\n\r\n      });\r\n    }\r\n\r\n    let items = await this.ccxtIns.fetchTickers();\r\n    runInAction(() => {\r\n      _.each(items, (item: ITickerRes) => {\r\n        const market = this.marketsMap.get(item.symbol);\r\n        if (market) {\r\n          market.lastTicker = item;\r\n        }\r\n      });\r\n    });\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  getMarketsByCoinSymbol(coinSymbol: string) {\r\n    return Array.from(this.marketsMap.values()).filter(o => {\r\n      return o.spec.base === coinSymbol;\r\n    });\r\n  }\r\n\r\n  @action\r\n  async createCCXTIns() {\r\n    this.ccxtIns = await new ccxt[this.exchange](this.createCCXTOption);\r\n  }\r\n\r\n  @computed get allMarkets() {\r\n    return Array.from(this.marketsMap.values())\r\n  }\r\n\r\n  getSnapShoot(): this {\r\n    const obj = super.getSnapShoot();\r\n    delete obj.ccxtIns;\r\n    return obj;\r\n  }\r\n\r\n\r\n}\r\n","import {action, computed, observable} from \"mobx\";\r\nimport {AppRootStore} from \"../AppRootStore\";\r\nimport {Exchange} from \"./Exchange\";\r\nimport {BaseResModel} from \"./Base\";\r\nimport _ from \"lodash\";\r\n\r\nexport class Exchanges extends BaseResModel<AppRootStore> {\r\n  exchangesMap = observable.map<string, Exchange>({}, {name: \"exchangesMap\"});\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    const bigone3 = new Exchange(this.store, this);\r\n    this.exchangesMap.set(bigone3.exchange, bigone3);\r\n\r\n    /*    const zb = new Exchange(this.store, this);\r\n    {\r\n      zb.exchange = \"zb\";\r\n      zb.createCCXTOption = {\r\n        urls: {\r\n          api: {\r\n            private: \"https://api.zb.plus/data/v1\",\r\n            public: \"https://api.zb.plus/data/v1\"\r\n          }\r\n        }\r\n      } as any;\r\n      this.exchangesMap.set(\"zb\", zb);\r\n    }\r\n    */\r\n\r\n    const exchangesNames = [\"bittrex\"];\r\n\r\n    ///ccxt.exchanges\r\n    _.each(exchangesNames, name => {\r\n      const item = new Exchange(this.store, this);\r\n      item.exchange = name;\r\n      item.createCCXTOption = {} as any;\r\n      this.exchangesMap.set(name, item);\r\n    });\r\n  }\r\n\r\n  @computed get all() {\r\n    return Array.from(this.exchangesMap.values());\r\n  }\r\n\r\n  @action\r\n  async initExchanges() {\r\n    for (const exchange of this.all) {\r\n      await exchange.createCCXTIns();\r\n    }\r\n  }\r\n}\r\n","import {AppSubStore} from \"./AppSubStore\";\r\nimport {AppRootStore} from \"./AppRootStore\";\r\nimport {action, observable} from \"mobx\";\r\nimport {Exchange} from \"./res/Exchange\";\r\nimport {Market} from \"./res/Market\";\r\nimport {Account} from \"./res/Account\";\r\n\r\nexport class UiStates extends AppSubStore<AppRootStore> {\r\n\r\n  @observable exchange: Exchange = null;\r\n\r\n  @observable market: Market = null;\r\n\r\n  @observable account: Account = null;\r\n\r\n  @action changeExchange(exchange: Exchange) {\r\n    this.exchange = exchange;\r\n    this.market = null;\r\n    this.account = null;\r\n  }\r\n\r\n\r\n}\r\n","import {action, computed, observable} from \"mobx\";\r\nimport {BaseResModel} from \"./Base\";\r\nimport {IBalanceRes} from \"../../model/models\";\r\nimport _ from \"lodash\";\r\nimport {Account} from \"./Account\";\r\n\r\nexport class Balance extends BaseResModel<Account> {\r\n\r\n  get ccxtIns() {\r\n    return this.parent.ccxtIns;\r\n  }\r\n\r\n  map = observable.map<string, IBalanceRes>({}, {name: \"balance\"});\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    let balances = await this.ccxtIns.fetchBalance();\r\n    _.each(balances, (balance, key) => {\r\n      balance[\"key\"] = key;\r\n    });\r\n    delete balances[\"info\"];\r\n    this.map.merge(balances);\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  @computed\r\n  get balancesAll() {\r\n    let items = Array.from(this.map.values());\r\n    items = _.orderBy(items, [\"total\"], [\"desc\"]);\r\n    return items;\r\n  }\r\n\r\n  @computed\r\n  get balancesNotZero() {\r\n    return this.balancesAll.filter(o => {\r\n      return o.total > 0.0001;\r\n    });\r\n  }\r\n}\r\n","import {action, computed, observable} from \"mobx\";\r\nimport {BaseResModel} from \"./Base\";\r\nimport {eOrderStatus, eOrderType, IOrderRes} from \"../../model/models\";\r\nimport _ from \"lodash\";\r\nimport {Account} from \"./Account\";\r\nimport {Market} from \"./Market\";\r\n\r\nexport class AccountOrder extends BaseResModel<Account> {\r\n  map = observable.map<string, IOrderRes>({}, {name: \"orderMap\"});\r\n\r\n  @observable market: Market = null;\r\n\r\n  constructor(root, parent, market: Market) {\r\n    super(root, parent);\r\n    this.market = market;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.ccxtIns;\r\n  }\r\n\r\n  @computed\r\n  get all() {\r\n    let items = Array.from(this.map.values());\r\n    items = _.orderBy(items, [\"timestamp\"], [\"desc\"]);\r\n    return items;\r\n  }\r\n\r\n  @computed\r\n  get activeOrders() {\r\n    return this.all.filter(o => o.status === eOrderStatus.open);\r\n  }\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    const market = this.market;\r\n    const symbol = market.spec.symbol;\r\n\r\n    await Promise.all([\r\n      this.ccxtIns.fetchOrders(symbol, null, 100, {\r\n        state: \"PENDING\"\r\n      }),\r\n      this.ccxtIns.fetchOrders(symbol, null, 100, {\r\n        state: \"CLOSED\"\r\n      })\r\n    ]).then(([data1, data2]) => {\r\n      let orders: IOrderRes[] = [...data1, ...data2];\r\n\r\n      //TODO 只适用于 bigone3\r\n      orders.forEach(o => {\r\n        if (o.price) {\r\n          o.type = eOrderType.limit;\r\n        } else {\r\n          o.type = eOrderType.market;\r\n        }\r\n      });\r\n\r\n      orders = _.orderBy(orders, \"timestamp\", [\"desc\"]);\r\n      const ordersObj = _.keyBy(orders, \"id\");\r\n      this.map.merge(ordersObj);\r\n      this.loadingEnd();\r\n    });\r\n  }\r\n}\r\n","import {action, observable} from \"mobx\";\r\nimport {BaseResModel} from \"./Base\";\r\nimport {Exchange} from \"./Exchange\";\r\nimport {Accounts} from \"./Accounts\";\r\nimport {Balance} from \"./Balance\";\r\nimport {IOrderRes} from \"../../model/models\";\r\nimport {AccountOrder} from \"./AccountOrder\";\r\nimport {Market} from \"./Market\";\r\n\r\nexport class Account extends BaseResModel<Accounts> {\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    this.balances = new Balance(root, this);\r\n  }\r\n\r\n  @observable ccxtIns = null as any; //共享market， 但是私有api 通过自己的 cctx 请求\r\n  @observable name = \"bigone3\"; // account 唯一名字，不能重复\r\n\r\n  @observable exchange: Exchange = null;\r\n\r\n  @observable createCCXTOption = {};\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  @action\r\n  async createCCXTIns(exchange: Exchange) {\r\n    this.exchange = exchange;\r\n    const ccxtOptions = Object.assign(\r\n      {},\r\n      exchange.createCCXTOption,\r\n      this.createCCXTOption\r\n    );\r\n    this.ccxtIns = await new ccxt[exchange.exchange](ccxtOptions);\r\n  }\r\n\r\n  @observable balances: Balance;\r\n\r\n  accountOrdersMap = observable.map<string, AccountOrder>(\r\n    {},\r\n    {name: \"accountOrdersMap\"}\r\n  );\r\n\r\n  @action createOrUpdateOrdersByMarket(market: Market) {\r\n    const symbol = market.spec.symbol;\r\n    let accountOrder = this.accountOrdersMap.get(symbol);\r\n    if (!accountOrder) {\r\n      accountOrder = new AccountOrder(this.store, this, market);\r\n      this.accountOrdersMap.set(symbol, accountOrder);\r\n    }\r\n    return accountOrder;\r\n  }\r\n\r\n  safeGetAccountOrder(market: Market) {\r\n    return this.createOrUpdateOrdersByMarket(market);\r\n  }\r\n\r\n  //计算花出去的钱\r\n  computeOutMoneyByHistory(orders: IOrderRes[]) {\r\n    let toCompute = orders.filter(o => {\r\n      return o.filled > 0; //才是真正执行过的订单\r\n    });\r\n\r\n    const sum = toCompute.reduce((sum, order) => {\r\n      let money = 0;\r\n\r\n      if (order.type === \"limit\") {\r\n        money = order.price * order.amount;\r\n      } else {\r\n        money = order.filled;\r\n      }\r\n\r\n      if (order.side === \"sell\") {\r\n        money *= -1;\r\n      }\r\n      return sum + money;\r\n    }, 0);\r\n    return sum;\r\n  }\r\n\r\n  computeCurrentValue(market: Market) {\r\n    const lastPrice = market.lastPrice;\r\n    const currentValue =\r\n      this.balances.map.get(market.spec.base).total * lastPrice;\r\n    return currentValue;\r\n  }\r\n\r\n  computeProfitAndRate(market: Market) {\r\n    const accountOrder = this.safeGetAccountOrder(market);\r\n    const outValue = this.computeOutMoneyByHistory(accountOrder.all);\r\n    const currentValue = this.computeCurrentValue(market);\r\n    return {\r\n      profit: currentValue - outValue,\r\n      rate: (currentValue - outValue) / outValue\r\n    };\r\n  }\r\n\r\n  getSnapShoot(): this {\r\n    const obj = super.getSnapShoot();\r\n    delete obj.ccxtIns;\r\n    delete this.exchange;\r\n    return obj;\r\n  }\r\n}\r\n","import {action, computed, observable} from \"mobx\";\r\nimport {AppRootStore} from \"../AppRootStore\";\r\nimport {Exchange} from \"./Exchange\";\r\nimport {BaseResModel} from \"./Base\";\r\nimport {Account} from \"./Account\";\r\nimport {CommonSubLs} from \"../../Util\";\r\nimport _ from \"lodash\";\r\n\r\nexport class Accounts extends BaseResModel<AppRootStore> {\r\n  accountsMap = observable.map<string, Account>({}, {name: \"accountsMap\"});\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    this.createAccountsFromLs();\r\n  }\r\n\r\n  @computed get all() {\r\n    return Array.from(this.accountsMap.values());\r\n  }\r\n\r\n  @action\r\n  async createAccount(exchange: Exchange, name: string, cctxOption) {\r\n    if (this.accountsMap.get(name)) {\r\n      console.warn(\"已经存在此账户，不能重复添加\");\r\n    } else {\r\n      const account = new Account(this.store, this);\r\n\r\n      account.name = name;\r\n      account.createCCXTOption = Object.assign(\r\n        account.createCCXTOption,\r\n        cctxOption\r\n      );\r\n      await account.createCCXTIns(exchange);\r\n      this.accountsMap.set(name, account);\r\n      return account;\r\n    }\r\n  }\r\n\r\n  @action\r\n  async createAccountAndSaveLs(\r\n    exchange: Exchange,\r\n    name: string,\r\n    cctxOption\r\n  ) {\r\n    const account = await this.createAccount(exchange, name, cctxOption);\r\n    if (account) {\r\n      this.lsAccountsAdd(exchange.exchange, account, cctxOption);\r\n    }\r\n  }\r\n\r\n  lsAccounts = new CommonSubLs(this.store.config.ls, \"accounts\");\r\n  lsAccountsAdd = (exchangeKey: string, account: Account, cctxOption) => {\r\n    const arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\r\n    const a = arr.find(o => o.name);\r\n    if (a) {\r\n      console.warn(\"已经存在\");\r\n    } else {\r\n      arr.push(\r\n        Object.assign(\r\n          {},\r\n          {\r\n            exchangeKey,\r\n            name: account.name,\r\n            cctxOption: cctxOption\r\n          }\r\n        )\r\n      );\r\n    }\r\n    this.lsAccounts.lsSet(\"list\", arr);\r\n  };\r\n\r\n  lsAccountsRemove = (accountName: string) => {\r\n    let arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\r\n    _.remove(arr, o => o.name === accountName);\r\n\r\n    this.accountsMap.delete(accountName);\r\n    this.lsAccounts.lsSet(\"list\", arr);\r\n  };\r\n\r\n  lsAccountsGetAllAccounts = () => {\r\n    const arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\r\n    return arr;\r\n  };\r\n\r\n  createAccountsFromLs = async () => {\r\n    const arr = this.lsAccountsGetAllAccounts();\r\n    for (const o of arr) {\r\n      const exchange = this.store.exchanges.exchangesMap.get(o.exchangeKey);\r\n      if (exchange) {\r\n        await this.createAccount(exchange, o.name, o.cctxOption);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\ninterface IAccountLsOption {\r\n  exchangeKey: string;\r\n  name: string;\r\n  cctxOption: any;\r\n}\r\n","import {SubStore} from \"./core\";\r\nimport {Config} from \"./Config\";\r\nimport {Exchanges} from \"./res/Exchanges\";\r\nimport {UiStates} from \"./UiStates\";\r\nimport {Accounts} from \"./res/Accounts\";\r\n\r\nexport class AppRootStore extends SubStore<null, AppRootStore> {\r\n  name = \"root store\";\r\n\r\n  config: Config;\r\n  exchanges: Exchanges;\r\n  accounts: Accounts;\r\n  uiStates: UiStates;\r\n\r\n  constructor() {\r\n    super(null, null);\r\n\r\n    this.config = new Config(this, this);\r\n    this.exchanges = new Exchanges(this, this);\r\n    this.accounts = new Accounts(this, this);\r\n    this.uiStates = new UiStates(this, this);\r\n  }\r\n}\r\n","import React, {useContext} from \"react\";\r\nimport {AppRootStore} from \"./AppRootStore\";\r\n\r\nimport * as mobx from 'mobx'\r\n\r\nexport const StoreContext = React.createContext(null as AppRootStore | null);\r\n\r\nexport function useStore(): AppRootStore {\r\n  return useContext(StoreContext);\r\n}\r\n\r\n\r\nwindow['mobx'] = mobx;","import {Layout, Menu} from \"antd\";\r\nimport React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useStore} from \"../state\";\r\n\r\nconst {Header, Footer, Content} = Layout;\r\n\r\nexport const PageStruct = function (props: { children: any }) {\r\n  return (\r\n    <Layout>\r\n      <AppHeader/>\r\n      <Content style={{minHeight: \"90vh\"}}>{props.children}</Content>\r\n      <Footer>Footer</Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst AppHeader = observer(function () {\r\n  const {uiStates} = useStore();\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Header className={\"appHeader\"}>\r\n      <Menu\r\n        theme=\"light\"\r\n        mode=\"horizontal\"\r\n        defaultSelectedKeys={[\"exchanges\"]}\r\n        style={{lineHeight: \"64px\"}}\r\n      >\r\n        <Menu.Item\r\n          key=\"exchanges\"\r\n          onClick={() => {\r\n            history.push(\"/\");\r\n          }}\r\n        >\r\n          Exchanges\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"exchange\"\r\n          onClick={() => {\r\n            const exchangeKey = uiStates.exchange ? uiStates.exchange.exchange : '';\r\n            history.push(`/exchange/${exchangeKey}`);\r\n          }}\r\n        >\r\n          Exchange\r\n        </Menu.Item>\r\n        {/*<Menu.Item key=\"3\">Setting</Menu.Item>*/}\r\n      </Menu>\r\n    </Header>\r\n  );\r\n});\r\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport {observer, Observer} from \"mobx-react-lite\";\r\nimport {IMarketRes} from \"../model/models\";\r\nimport {format, isToday} from \"date-fns\";\r\nimport {ColumnProps} from \"antd/lib/table\";\r\nimport {Button} from \"antd\";\r\nimport ReactTimeAgo from \"timeago-react\";\r\n\r\nexport const mCol = function (\r\n  column: Partial<ColumnProps<any> & { templateRender: any }>\r\n): ColumnProps<any> {\r\n  column.title = column.title || _.capitalize(column.dataIndex);\r\n  column.key = column.key || column.dataIndex;\r\n\r\n  column.width = column.width || 200;\r\n\r\n  if (!column.render) {\r\n    column.render = (val, row) => {\r\n      return (\r\n        <Ob\r\n          r={() => {\r\n            const val = row[column.dataIndex];\r\n            if (column.templateRender) {\r\n              return column.templateRender(row, val);\r\n            } else {\r\n              return <div>{val}</div>;\r\n            }\r\n          }}\r\n        />\r\n      );\r\n    };\r\n  }\r\n\r\n  return column as ColumnProps<any>;\r\n};\r\n\r\nexport function Ob(props: { r: Function }) {\r\n  return <Observer render={props.r as any}/>;\r\n}\r\n\r\nexport const FormatValue = observer(function FormatPrice(props: {\r\n  val: number;\r\n  market: IMarketRes;\r\n}) {\r\n  const {val, market} = props;\r\n  let len = 8;\r\n  if (market.quote === \"USDT\") {\r\n    len = 2;\r\n  }\r\n  const v = _.ceil(val, len);\r\n  return (\r\n    <span>\r\n      {v} {market.quote}\r\n    </span>\r\n  );\r\n});\r\n\r\nexport const FormatPercentage = observer(function FormatPrice(props: {\r\n  val: number;\r\n  len?: number;\r\n}) {\r\n  const {val, len = 4} = props;\r\n  const v = _.ceil(val * 100, len);\r\n  return <span>{v} %</span>;\r\n});\r\n\r\nexport const FormatTimeAuto = (props: { val: number | Date }) => {\r\n  const {val} = props;\r\n  let formatStr = `yyyy-MM-dd HH:mm:ss`;\r\n  if (isToday(val)) {\r\n    formatStr = `HH:mm:ss`;\r\n  }\r\n  return format(val, formatStr) as any;\r\n};\r\n\r\nexport const UpdateBtn = (props: { onClick: any; loading: boolean }) => {\r\n  return (\r\n    <Button\r\n      type={\"primary\"}\r\n      shape=\"circle\"\r\n      icon=\"sync\"\r\n      onClick={props.onClick}\r\n      loading={props.loading}\r\n    />\r\n  );\r\n};\r\n\r\nexport const TimeAgo = observer(function (props: { time: number | Date }) {\r\n\r\n  let time = props.time;\r\n\r\n  if (_.isDate(props.time)) {\r\n    return <ReactTimeAgo datetime={props.time} locale=\"en_US\"/>;\r\n  } else {\r\n    return time as any;\r\n  }\r\n\r\n});\r\n","import React, {useEffect} from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {TimeAgo, UpdateBtn} from \"../Util\";\r\nimport {Card} from \"antd\";\r\nimport \"./index.scss\";\r\nimport {CardProps} from \"antd/lib/card\";\r\nimport classNames from \"classnames\";\r\nimport _ from \"lodash\";\r\nimport {BaseResModel} from \"../../state/res/Base\";\r\n\r\nexport const UpdatableCard = observer(function UpdatableCard(\r\n  props: Partial<CardProps> & {\r\n    updatableRes: Partial<BaseResModel>;\r\n    noContentPadding?: boolean;\r\n    updateImmediately?: boolean;\r\n  }\r\n) {\r\n  const {\r\n    updatableRes,\r\n    noContentPadding = true,\r\n    updateImmediately = true\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    if (updateImmediately) {\r\n      updatableRes.updateRes();\r\n    }\r\n  }, []);\r\n\r\n  const cardProps = _.omit(props, [\r\n    \"updatableRes\",\r\n    \"noContentPadding\",\r\n    \"updateImmediately\"\r\n  ]);\r\n\r\n  return (\r\n    <Card\r\n      {...cardProps}\r\n      title={\r\n        <div className={\"titleWithUpdateTime\"}>\r\n          <div>{props.title}</div>\r\n          <div className={\"updateTime\"}>\r\n            <TimeAgo time={updatableRes.lastUpdateTime}/>\r\n          </div>\r\n        </div>\r\n      }\r\n      className={classNames(\r\n        \"UpdatableCard\",\r\n        {\r\n          noContentPadding: noContentPadding\r\n        },\r\n        cardProps.className\r\n      )}\r\n      size=\"small\"\r\n      extra={\r\n        <div>\r\n          <UpdateBtn\r\n            onClick={() => {\r\n              updatableRes.updateRes();\r\n            }}\r\n            loading={updatableRes.loading}\r\n          />\r\n        </div>\r\n      }\r\n    >\r\n      {cardProps.children}\r\n    </Card>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {mCol, Ob} from \"../Util\";\r\nimport {Table} from \"antd\";\r\nimport \"./index.scss\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport {useStore} from \"../../state\";\r\nimport {Exchange} from \"../../state/res/Exchange\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const Exchanges = observer(function Exchanges(props: {}) {\r\n  const {exchanges} = useStore();\r\n\r\n  const list = exchanges.all;\r\n\r\n  return (\r\n    <div className={\"Exchanges\"} style={{padding: 24}}>\r\n      <UpdatableCard title={<div>Exchanges</div>} updatableRes={exchanges}>\r\n        <Table\r\n          size={\"small\"}\r\n          dataSource={list}\r\n          rowKey={\"exchange\"}\r\n          columns={[\r\n            mCol({\r\n              title: 'Id',\r\n              dataIndex: \"exchange\",\r\n              templateRender: (row: Exchange, v) => (\r\n                <Ob\r\n                  r={() => {\r\n                    return (\r\n                      <div>\r\n                        <Link to={`/exchange/${row.exchange}`}>{v}</Link>\r\n                      </div>\r\n                    );\r\n                  }}\r\n                />\r\n              )\r\n            }),\r\n          ]}\r\n        />\r\n      </UpdatableCard>\r\n    </div>\r\n  );\r\n});\r\n","import {observer} from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {PageStruct} from \"../Util\";\r\nimport {Exchanges} from \"../../components/Exchanges\";\r\n\r\n\r\nexport const Home = observer(function Home() {\r\n  return (\r\n    <PageStruct>\r\n      <Exchanges/>\r\n    </PageStruct>\r\n  )\r\n});\r\n","import React from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {FormatTimeAuto} from \"../Util\";\r\nimport {Icon} from \"antd\";\r\nimport \"./index.scss\";\r\nimport {eSide, eTickType, ITradeRes} from \"../../model/models\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport {Market} from \"../../state/res/Market\";\r\n\r\nexport const RecentTrades = observer(function RecentTrades(props: {\r\n  market: Market;\r\n}) {\r\n  const {market} = props;\r\n  const res = market.recentTrades;\r\n  const list = res.trades;\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\"Recent Trades\"}\r\n      className={\"RecentTrades\"}\r\n      updatableRes={res}\r\n    >\r\n      <Scrollbars style={{height: 600}} autoHide={true}>\r\n        <div className={\"TradeHistoryContainer\"}>\r\n          {list.map(o => (\r\n            <RecentTradesItem key={o.id} trade={o}/>\r\n          ))}\r\n        </div>\r\n      </Scrollbars>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst RecentTradesItem = observer(function RecentTradesItem(props: {\r\n  trade: ITradeRes;\r\n}) {\r\n  const {trade} = props;\r\n\r\n  return (\r\n    <div className=\"TradeHistoryContainer_item\">\r\n      <TickItem tick={trade.tick}/>\r\n      <div className=\"price\">{trade.price}</div>\r\n      <div className=\"volume\">{trade.amount}</div>\r\n      <div className=\"time\">\r\n        <FormatTimeAuto val={trade.timestamp}/>\r\n      </div>\r\n      <div className=\"side\">{trade.side === eSide.buy ? \"B\" : \"S\"}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst TickItem = observer(function TickItem(props: { tick: eTickType }) {\r\n  const {tick} = props;\r\n\r\n  let icon = <Icon type=\"arrow-up\"/>;\r\n\r\n  switch (tick) {\r\n    case eTickType.plusTick:\r\n      icon = <Icon type=\"arrow-up\"/>;\r\n      break;\r\n    case eTickType.zeroPlusTick:\r\n      icon = <Icon type=\"caret-up\"/>;\r\n      break;\r\n    case eTickType.minusTick:\r\n      icon = <Icon type=\"arrow-down\"/>;\r\n      break;\r\n    case eTickType.zeroMinusTick:\r\n      icon = <Icon type=\"caret-down\"/>;\r\n      break;\r\n  }\r\n\r\n  return <div className={`icon ${tick}`}>{icon}</div>;\r\n});\r\n","import React from \"react\";\r\nimport {observer, useLocalStore} from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport {eSide, IOrderBookRes} from \"../../model/models\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport _ from \"lodash\";\r\nimport {Button} from \"antd\";\r\nimport {Market} from \"../../state/res/Market\";\r\n\r\nexport const OrderBook = observer(function OrderBook(props: {\r\n  market: Market;\r\n}) {\r\n  const {market} = props;\r\n  const res = market.orderBook;\r\n\r\n  const state = useLocalStore(() => ({\r\n    showNum: 12,\r\n    side: eSide.both as eSide,\r\n    get asks() {\r\n      let items = [];\r\n      if (state.side === eSide.both) {\r\n        items = _.take(res.asks, state.showNum);\r\n      } else {\r\n        items = res.asks; //_.take(, state.showNum * 2);\r\n      }\r\n      const reversed = items.reverse();\r\n      return reversed;\r\n    },\r\n    get bids() {\r\n      if (state.side === eSide.both) {\r\n        return _.take(res.bids, state.showNum);\r\n      } else {\r\n        return res.bids; // _.take(res.bids, state.showNum * 2);\r\n      }\r\n    },\r\n\r\n    setSide(side: eSide) {\r\n      state.side = side;\r\n    }\r\n  }));\r\n\r\n\r\n  const {asks, bids} = state;\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\"OrderBook\"}\r\n      className={\"OrderBook\"}\r\n      updatableRes={res}\r\n    >\r\n      <Scrollbars style={{height: 600}} autoHide={true}>\r\n        <div className={\"OrderBookContainer\"}>\r\n          <div className=\"OrderBookInnerHeader\">\r\n            <div className=\"sideBtns\">\r\n              <Button\r\n                size={\"small\"}\r\n                icon=\"vertical-align-middle\"\r\n                onClick={() => state.setSide(eSide.both)}\r\n              />\r\n              <Button\r\n                size={\"small\"}\r\n                icon=\"vertical-align-top\"\r\n                onClick={() => state.setSide(eSide.buy)}\r\n              />\r\n              <Button\r\n                size={\"small\"}\r\n                icon=\"vertical-align-bottom\"\r\n                onClick={() => state.setSide(eSide.sell)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"centeredContent\">\r\n            {state.side === eSide.both ? (\r\n              <>\r\n                {asks.map((o, index) => (\r\n                  <OrderBookItem key={index} item={o}/>\r\n                ))}\r\n                <div className={\"MarketPrice\"}>\r\n                  <MarketPrice market={market}/>\r\n                </div>\r\n                {bids.map((o, index) => (\r\n                  <OrderBookItem key={index} item={o}/>\r\n                ))}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div className={\"MarketPrice\"}>\r\n                  <MarketPrice market={market}/>\r\n                </div>\r\n                {state.side === eSide.buy &&\r\n                asks.map((o, index) => (\r\n                  <OrderBookItem key={index} item={o}/>\r\n                ))}\r\n                {state.side === eSide.sell &&\r\n                bids.map((o, index) => (\r\n                  <OrderBookItem key={index} item={o}/>\r\n                ))}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Scrollbars>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst OrderBookItem = observer(function OrderBookItem(props: {\r\n  item: IOrderBookRes;\r\n}) {\r\n  const {item} = props;\r\n\r\n  return (\r\n    <div className=\"OrderBookItem\">\r\n      <div className={\"price\"}>{item.price}</div>\r\n      <div className={\"size\"}>{item.size}</div>\r\n      <div className={\"accumulateSize\"}>{item.accumulateSize}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst MarketPrice = observer(function MarketPrice(props: {\r\n  market: Market;\r\n}) {\r\n  const {market} = props;\r\n  return <div>{market.lastPrice}</div>;\r\n});\r\n","import React from \"react\";\r\nimport {observer, useLocalStore} from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport {Icon, Table, Tabs} from \"antd\";\r\nimport {Exchange} from \"../../state/res/Exchange\";\r\nimport {Market} from \"../../state/res/Market\";\r\nimport {mCol, Ob} from \"../Util\";\r\nimport {useStore} from \"../../state\";\r\n\r\nconst {TabPane} = Tabs;\r\n\r\nexport const MarketsView = observer(function MarketsView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const {exchange} = props;\r\n\r\n  const {uiStates} = useStore();\r\n\r\n  const state = useLocalStore(() => ({\r\n    get quotes(): string[] {\r\n      const s = new Set<string>();\r\n      const list = exchange.allMarkets;\r\n      list.forEach(o => {\r\n        s.add(o.spec.quote);\r\n      });\r\n      return Array.from(s);\r\n    }\r\n  }));\r\n\r\n  const renderCurrentAccount = () => {\r\n    let account = uiStates.account; //store.accounts.all.find(o => o.exchange === exchange);\r\n\r\n    if (!account) {\r\n      return null;\r\n    } else {\r\n      const balances = account.balances.balancesNotZero;\r\n\r\n      const markets: Market[] = [];\r\n      balances.forEach(balance => {\r\n        markets.push(...account.exchange.getMarketsByCoinSymbol(balance.key));\r\n      });\r\n\r\n      return (\r\n        <TabPane tab={<Icon type=\"bank\"/>} key={account.name}>\r\n          <MarketsTable markets={markets}/>\r\n        </TabPane>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\"Markets\"}\r\n      className={\"Markets\"}\r\n      updatableRes={exchange}\r\n    >\r\n      <Tabs defaultActiveKey=\"1\" onChange={() => {\r\n      }}>\r\n        {/*<TabPane tab=\"Tab 3\" key=\"3\">*/}\r\n        {/*  Content of Tab Pane 3*/}\r\n        {/*</TabPane>*/}\r\n\r\n        {renderCurrentAccount()}\r\n\r\n        {state.quotes.map(v => {\r\n          const markets = exchange.allMarkets.filter(o => o.spec.quote === v);\r\n          return (\r\n            <TabPane tab={v} key={v}>\r\n              <MarketsTable markets={markets}/>\r\n            </TabPane>\r\n          );\r\n        })}\r\n      </Tabs>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\n{\r\n  /*<Scrollbars style={{ height: 600 }} autoHide={true}>*/\r\n}\r\n{\r\n  /*  <div className={\"OrderBookContainer\"}>AAA</div>*/\r\n}\r\n{\r\n  /*</Scrollbars>*/\r\n}\r\n\r\nconst MarketsTable = observer(function MarketsTable(props: {\r\n  markets: Market[];\r\n}) {\r\n  const {markets} = props;\r\n\r\n  const {uiStates} = useStore();\r\n\r\n  return (\r\n    <Table\r\n      size={\"small\"}\r\n      dataSource={markets}\r\n      rowKey={(row: Market) => {\r\n        return row.spec.symbol;\r\n      }}\r\n      onRow={(row: Market) => {\r\n        return {\r\n          onClick() {\r\n            uiStates.market = row;\r\n          }\r\n        };\r\n      }}\r\n      columns={[\r\n        mCol({\r\n          dataIndex: \"exchange\",\r\n          templateRender: (row: Market, v) => (\r\n            <Ob\r\n              r={() => {\r\n                return <div>{row.spec.symbol}</div>;\r\n              }}\r\n            />\r\n          )\r\n        }),\r\n\r\n        mCol({\r\n          dataIndex: \"price\",\r\n          templateRender: (row: Market, v) => (\r\n            <Ob\r\n              r={() => {\r\n                return <div>{row.lastTicker && row.lastTicker.close}</div>;\r\n              }}\r\n            />\r\n          )\r\n        })\r\n      ]}\r\n    />\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {observer, useLocalStore} from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport {IOrderRes} from \"../../model/models\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport {Table, Tabs} from \"antd\";\r\nimport {FormatTimeAuto, mCol, Ob} from \"../Util\";\r\nimport {Account} from \"../../state/res/Account\";\r\nimport {Market} from \"../../state/res/Market\";\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nexport const AccountOrders = observer(function AccountOrders(props: {\r\n  account: Account;\r\n  market: Market;\r\n}) {\r\n  const {account, market} = props;\r\n\r\n  const res = account.safeGetAccountOrder(market);\r\n\r\n  const state = useLocalStore(() => ({\r\n    activeTab: \"active\" //active / all\r\n  }));\r\n\r\n  if (!res) {\r\n    return null;\r\n  }\r\n\r\n  const renderTable = orders => {\r\n    return (\r\n      <Table\r\n        size={\"small\"}\r\n        dataSource={orders}\r\n        rowKey={\"id\"}\r\n        columns={[\r\n          mCol({dataIndex: \"symbol\"}),\r\n          mCol({\r\n            dataIndex: \"timestamp\",\r\n            templateRender: (row: IOrderRes) => (\r\n              <FormatTimeAuto val={row.timestamp}/>\r\n            )\r\n          }),\r\n          mCol({dataIndex: \"side\"}),\r\n          mCol({dataIndex: \"type\"}),\r\n          mCol({dataIndex: \"status\"}),\r\n          mCol({dataIndex: \"amount\"}),\r\n          mCol({dataIndex: \"cost\"}),\r\n          mCol({dataIndex: \"price\"}),\r\n          mCol({dataIndex: \"filled\"}),\r\n          mCol({dataIndex: \"remaining\"})\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\r\n        <div>\r\n          Orders <Ob r={() => market.spec.symbol}/>\r\n        </div>\r\n      }\r\n      className={\"UserOrders\"}\r\n      updatableRes={res}\r\n    >\r\n      <div className={\"UserOrdersContainer\"}>\r\n        <Tabs\r\n          defaultActiveKey=\"all\"\r\n          onChange={activeKey => {\r\n            state.activeTab = activeKey;\r\n          }}\r\n        >\r\n          <TabPane tab=\"Active\" key=\"active\">\r\n            {renderTable(res.activeOrders)}\r\n          </TabPane>\r\n          <TabPane tab=\"All\" key=\"all\">\r\n            {renderTable(res.all)}\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport {IBalanceRes} from \"../../model/models\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport {Badge, Progress} from \"antd\";\r\nimport {FormatPercentage, FormatValue, Ob} from \"../Util\";\r\nimport {Account} from \"../../state/res/Account\";\r\nimport {Market} from \"../../state/res/Market\";\r\n\r\nexport const CurrentBalance = observer(function CurrentBalance(props: {\r\n  account: Account;\r\n  market: Market;\r\n}) {\r\n  const {market, account} = props;\r\n\r\n  // const account = uiStates.account; //accounts.all.find((o)=>o.)  //accounts.accountsMap.get()\r\n\r\n  const res = account.balances;\r\n  const balance = res.map.get(market.spec.base);\r\n\r\n  if (!res || !balance) {\r\n    return null;\r\n  }\r\n\r\n  const userOrder = account.safeGetAccountOrder(market);\r\n  const {profit, rate} = account.computeProfitAndRate(market);\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\r\n        <div>\r\n          {account.name}-<Ob r={() => market.spec.symbol}/>\r\n        </div>\r\n      }\r\n      className={\"BalanceCard\"}\r\n      updatableRes={market}\r\n    >\r\n      <Scrollbars style={{height: 400}} autoHide={true}>\r\n        <div className={\"BalanceCardContainer\"}>\r\n          <BalanceItem balance={balance}/>\r\n\r\n          <div className={\"ProfitSection\"}>\r\n            <h3>Profit</h3>\r\n            <div>\r\n              <FormatValue val={profit} market={market.spec}/> /{\" \"}\r\n              <FormatPercentage val={rate}/>\r\n            </div>\r\n\r\n            <div className={'profitRow2'}>\r\n              <div>\r\n                <Badge color=\"red\" text=\"Cost\"/>\r\n                <FormatValue\r\n                  val={account.computeOutMoneyByHistory(userOrder.all)}\r\n                  market={market.spec}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Badge color=\"green\" text=\"Current Value\"/>\r\n                <FormatValue\r\n                  val={account.computeCurrentValue(market)}\r\n                  market={market.spec}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Scrollbars>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst BalanceItem = observer(function BalanceItem(props: {\r\n  balance: IBalanceRes;\r\n}) {\r\n  const {balance} = props;\r\n  const usedPercent = (balance.used / balance.total) * 100;\r\n  const freePercent = (balance.free / balance.total) * 100;\r\n\r\n  const renderRow = (color: string, percent: number, text: string, val) => {\r\n    return (\r\n      <div className={\"BalanceItemRow\"}>\r\n        <Progress percent={percent} size=\"small\" showInfo={false}/>\r\n        <div className={\"BalanceItemRowDown\"}>\r\n          <Badge status=\"success\" text={text}/>\r\n          <div className={\"BalanceItemRowText\"}>{balance.total}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={\"BalanceItem\"}>\r\n      {renderRow(\"green\", 100, \"Total\", balance.total)}\r\n      {renderRow(\"green\", freePercent, \"Free\", balance.free)}\r\n      {renderRow(\"green\", usedPercent, \"Used\", balance.used)}\r\n    </div>\r\n  );\r\n});\r\n","import React, {useEffect, useRef} from \"react\";\r\nimport {observer, useLocalStore} from \"mobx-react-lite\";\r\nimport {mCol} from \"../Util\";\r\nimport {Button, Form, Input, Modal, Table, Tabs, Tag} from \"antd\";\r\nimport \"./index.scss\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport {useStore} from \"../../state\";\r\nimport {Exchange} from \"../../state/res/Exchange\";\r\nimport {WrappedFormUtils} from \"antd/lib/form/Form\";\r\nimport {Account} from \"../../state/res/Account\";\r\nimport {IBalanceRes} from \"../../model/models\";\r\nimport {CurrentBalance} from \"../CurrentBalance\";\r\n\r\nconst {TabPane} = Tabs;\r\n\r\nexport const AccountsBalanceView = observer(\r\n  function AccountsBalanceView(props: { exchange: Exchange }) {\r\n    const {exchange} = props;\r\n\r\n    const {uiStates} = useStore();\r\n\r\n    return (\r\n      <Tabs defaultActiveKey=\"1\" onChange={() => {\r\n      }}>\r\n        <TabPane tab=\"Accounts\" key=\"1\">\r\n          <AccountsView exchange={exchange}/>\r\n        </TabPane>\r\n        <TabPane tab=\"Balance\" key=\"2\">\r\n          {uiStates.market && uiStates.account && (\r\n            <CurrentBalance\r\n              account={uiStates.account}\r\n              market={uiStates.market}\r\n            />\r\n          )}\r\n        </TabPane>\r\n      </Tabs>\r\n    );\r\n  }\r\n);\r\n\r\nexport const AccountsView = observer(function AccountsView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const {exchange} = props;\r\n\r\n  const {accounts, uiStates} = useStore();\r\n\r\n  const formRef = useRef(null as any);\r\n\r\n  const state = useLocalStore(() => ({\r\n    visible: false,\r\n\r\n    addAccount(name, cctxOptions) {\r\n      accounts.createAccountAndSaveLs(exchange, name, cctxOptions).then(() => {\r\n        console.log(\"添加成功\");\r\n        state.visible = false;\r\n      });\r\n    },\r\n\r\n    handleCreate() {\r\n      const form = formRef.current.props.form as WrappedFormUtils;\r\n      form.validateFields((err, values) => {\r\n        if (err) {\r\n          return;\r\n        }\r\n        console.log(\"Received values of form: \", values);\r\n\r\n        state.addAccount(values.name, {\r\n          apiKey: values.apiKey,\r\n          secret: values.secret\r\n        });\r\n      });\r\n    }\r\n  }));\r\n\r\n  useEffect(() => {\r\n  }, []);\r\n\r\n  const list = accounts.all.filter(o => o.exchange === exchange);\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={<div>Accounts in:{exchange.exchange}</div>}\r\n      updatableRes={accounts}\r\n    >\r\n\r\n      <div style={{padding: 12}}>\r\n        <Button\r\n          type={\"primary\"}\r\n          onClick={() => {\r\n            state.visible = true;\r\n          }}\r\n        >\r\n          add\r\n        </Button>\r\n      </div>\r\n\r\n\r\n      <AccountCreateForm\r\n        wrappedComponentRef={formRef as any}\r\n        visible={state.visible as any}\r\n        onCancel={() => {\r\n          state.visible = false;\r\n        }}\r\n        onCreate={() => {\r\n          state.handleCreate();\r\n        }}\r\n      />\r\n\r\n      <Table\r\n        size={\"small\"}\r\n        dataSource={list}\r\n        rowKey={row => {\r\n          return row.name;\r\n        }}\r\n        columns={[\r\n          mCol({\r\n            dataIndex: \"name\",\r\n            templateRender(row: Account) {\r\n              return (\r\n                <Tag\r\n                  color=\"gold\"\r\n                  onClick={() => {\r\n                    uiStates.account = row;\r\n                  }}\r\n                >\r\n                  {row.name}\r\n                </Tag>\r\n              );\r\n            }\r\n          }),\r\n          mCol({\r\n            dataIndex: \"action\",\r\n            templateRender: (row: Account, v) => (\r\n              <div>\r\n                <Button\r\n                  type={\"danger\"}\r\n                  size={\"small\"}\r\n                  onClick={() => {\r\n                    accounts.lsAccountsRemove(row.name);\r\n                  }}\r\n                >\r\n                  delete\r\n                </Button>\r\n              </div>\r\n            )\r\n          })\r\n        ]}\r\n      />\r\n\r\n      {uiStates.account && (\r\n        <UserAsset key={uiStates.account.name} account={uiStates.account}/>\r\n      )}\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst AccountCreateForm = Form.create<{\r\n  visible;\r\n  onCancel;\r\n  onCreate;\r\n  form;\r\n  wrappedComponentRef;\r\n}>({name: \"AccountCreateForm\"})(\r\n  class extends React.Component {\r\n    render() {\r\n      const {visible, onCancel, onCreate, form} = this.props as any;\r\n      const {getFieldDecorator} = form;\r\n      return <HookForm {...this.props} />;\r\n    }\r\n  }\r\n);\r\n\r\nfunction HookForm(props: any) {\r\n  const {visible, onCancel, onCreate, form} = props;\r\n  const {getFieldDecorator} = form;\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Create An Account\"\r\n      okText=\"Create\"\r\n      onCancel={onCancel}\r\n      onOk={onCreate}\r\n    >\r\n      <Form layout=\"vertical\">\r\n        <Form.Item label=\"name\">\r\n          {getFieldDecorator(\"name\", {\r\n            rules: [\r\n              {\r\n                required: true\r\n              }\r\n            ]\r\n          })(<Input/>)}\r\n        </Form.Item>\r\n        <Form.Item label=\"apiKey\">\r\n          {getFieldDecorator(\"apiKey\", {\r\n            rules: [\r\n              {\r\n                required: true\r\n              }\r\n            ]\r\n          })(<Input/>)}\r\n        </Form.Item>\r\n        <Form.Item label=\"secret\">\r\n          {getFieldDecorator(\"secret\", {\r\n            rules: [\r\n              {\r\n                required: true\r\n              }\r\n            ]\r\n          })(<Input/>)}\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nconst UserAsset = observer(function UserAsset(props: { account: Account }) {\r\n  const {account} = props;\r\n\r\n  const {uiStates} = useStore();\r\n\r\n  const list = account.balances.balancesNotZero;\r\n\r\n  return (\r\n    <div className={\"UserAsset\"}>\r\n      <UpdatableCard\r\n        title={<div>Balances</div>}\r\n        updatableRes={account.balances}\r\n      >\r\n        <Table\r\n          size={\"small\"}\r\n          dataSource={list}\r\n          rowKey={\"key\"}\r\n          columns={[\r\n            mCol({\r\n              dataIndex: \"key\",\r\n              templateRender: (row: IBalanceRes) => {\r\n                const coinSymbol = row.key;\r\n                const markets = account.exchange.getMarketsByCoinSymbol(\r\n                  coinSymbol\r\n                );\r\n                const loading = markets.every(o => o.loading);\r\n\r\n                return (\r\n                  <div>\r\n                    {row.key} {/*{markets.length && (*/}\r\n                    {/*  <Button*/}\r\n                    {/*    type={\"primary\"}*/}\r\n                    {/*    shape=\"circle\"*/}\r\n                    {/*    icon=\"sync\"*/}\r\n                    {/*    onClick={async () => {*/}\r\n                    {/*      for (const market of markets) {*/}\r\n                    {/*        await market.updateRes();*/}\r\n                    {/*      }*/}\r\n                    {/*    }}*/}\r\n                    {/*    loading={loading}*/}\r\n                    {/*  />*/}\r\n                    {/*)}*/}\r\n                  </div>\r\n                );\r\n              }\r\n            }),\r\n            mCol({dataIndex: \"total\"}),\r\n            // mCol({ dataIndex: \"free\" }),\r\n            // mCol({ dataIndex: \"used\" })\r\n          ]}\r\n          // expandedRowRender={row => {\r\n          //   return (\r\n          //     <Ob\r\n          //       r={() => {\r\n          //         const coinSymbol = row.key;\r\n          //         const markets = account.exchange.getMarketsByCoinSymbol(\r\n          //           coinSymbol\r\n          //         );\r\n          //\r\n          //         return (\r\n          //           <div className={\"orderCol\"}>\r\n          //             {markets.map(o => {\r\n          //               // account.exchange.marketsMap.get(o.spec.symbol);\r\n          //               const { profit, rate } = account.computeProfitAndRate(\r\n          //                 o\r\n          //               );\r\n          //\r\n          //               const accountOrder = account.safeGetAccountOrder(o);\r\n          //               const orderCount = accountOrder.all.length;\r\n          //\r\n          //               return (\r\n          //                 <div key={o.spec.quote} className={\"orderColItem\"}>\r\n          //                   <div className=\"btn\">\r\n          //                     <Button\r\n          //                       type={\"primary\"}\r\n          //                       shape=\"circle\"\r\n          //                       icon=\"sync\"\r\n          //                       onClick={async () => {\r\n          //                         await accountOrder.updateRes();\r\n          //                         await o.updateRes();\r\n          //                       }}\r\n          //                       loading={o.loading && accountOrder.loading}\r\n          //                     />\r\n          //                   </div>\r\n          //                   <div className=\"quote\">{o.spec.quote}:</div>\r\n          //                   <div className=\"viewOrder\">\r\n          //                     <Badge count={orderCount}>\r\n          //                       <Button\r\n          //                         style={{ marginLeft: 8 }}\r\n          //                         onClick={() => {\r\n          //                           uiStates.market = o;\r\n          //                         }}\r\n          //                       >\r\n          //                         切换市场\r\n          //                       </Button>\r\n          //                     </Badge>\r\n          //                   </div>\r\n          //                   <div className=\"profit\">\r\n          //                     <FormatValue val={profit} market={o.spec} /> (\r\n          //                     <FormatPercentage val={rate} />)\r\n          //                   </div>\r\n          //                 </div>\r\n          //               );\r\n          //             })}\r\n          //           </div>\r\n          //         );\r\n          //       }}\r\n          //     />\r\n          //   );\r\n          // }}\r\n        />\r\n      </UpdatableCard>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Col, Row} from \"antd\";\r\nimport \"./index.scss\";\r\nimport {RecentTrades} from \"../RecentTrades\";\r\nimport {OrderBook} from \"../OrderBook\";\r\nimport {MarketsView} from \"../MarketsView\";\r\nimport {useStore} from \"../../state\";\r\nimport {Exchange} from \"../../state/res/Exchange\";\r\nimport {AccountOrders} from \"../AccountOrders\";\r\nimport {AccountsBalanceView} from \"../AccountsBalanceView\";\r\n\r\nexport const TradeMainView = observer(function TradeMainView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const {exchange} = props;\r\n\r\n  const {uiStates} = useStore();\r\n\r\n  return (\r\n    <div className={\"TradeMainView\"}>\r\n      <Row>\r\n        <Col span={6}>\r\n          <MarketsView exchange={exchange}/>\r\n        </Col>\r\n\r\n        {uiStates.market && (\r\n          <>\r\n            <Col span={6}>\r\n              <OrderBook\r\n                key={uiStates.market.spec.symbol}\r\n                market={uiStates.market}\r\n              />\r\n            </Col>\r\n            <Col span={6}>\r\n              <RecentTrades\r\n                key={uiStates.market.spec.symbol}\r\n                market={uiStates.market}\r\n              />\r\n            </Col>\r\n          </>\r\n        )}\r\n\r\n        <Col span={6}>\r\n          <AccountsBalanceView exchange={exchange}/>\r\n        </Col>\r\n      </Row>\r\n\r\n      {uiStates.market && uiStates.account && (\r\n        <AccountOrders\r\n          key={uiStates.market.spec.symbol + uiStates.account.name}\r\n          account={uiStates.account}\r\n          market={uiStates.market}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport {useStore} from \"../../state\";\r\nimport {Exchange} from \"../../state/res/Exchange\";\r\nimport {TradeMainView} from \"../TradeMainView\";\r\n\r\nexport const ExchangeView = observer(function ExchangeView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const {exchange} = props;\r\n  const {uiStates} = useStore();\r\n\r\n  const list = exchange.allMarkets;\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={<div>Exchange - {exchange.exchange}</div>}\r\n      updatableRes={exchange}\r\n    >\r\n      <TradeMainView exchange={exchange}/>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n","import {observer} from \"mobx-react-lite\";\r\nimport React, {useEffect} from \"react\";\r\nimport {PageStruct} from \"../Util\";\r\nimport {ExchangeView} from \"../../components/ExchangeView\";\r\nimport {useStore} from \"../../state\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Empty} from \"antd\";\r\n\r\nexport const ExchangePage = observer(function ExchangePage() {\r\n  const {exchanges, uiStates} = useStore();\r\n\r\n  const {exchangeKey} = useParams<{ exchangeKey: string }>();\r\n\r\n  const exchange = exchanges.exchangesMap.get(exchangeKey);\r\n\r\n  useEffect(() => {\r\n    uiStates.changeExchange(exchange);\r\n  }, [exchange]);\r\n\r\n\r\n  return (\r\n    <PageStruct>\r\n      {exchange ? (\r\n        <ExchangeView\r\n          key={exchange.exchange}\r\n          exchange={exchange}\r\n        />\r\n      ) : (\r\n        <Empty/>\r\n      )}\r\n    </PageStruct>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {HashRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport \"./index.scss\";\r\nimport {Home} from \"./Home\";\r\nimport {ExchangePage} from \"./Exchange\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home/>\r\n          </Route>\r\n\r\n          <Route path={\"/exchange/:exchangeKey\"}>\r\n            <ExchangePage/>\r\n          </Route>\r\n          <Redirect from=\"/exchange\" to=\"/exchange/none\"/>\r\n\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport \"./styles/App.scss\";\r\nimport {AppRootStore} from \"./state/AppRootStore\";\r\nimport {StoreContext} from \"./state\";\r\n\r\nimport RouterApp from \"./pages/index\";\r\n\r\nconst store = (window[\"store\"] = window[\"ss\"] = new AppRootStore());\r\n\r\nconst App: React.FC = () => {\r\n  const [ready, setReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      await store.exchanges.initExchanges();\r\n      setReady(true);\r\n    };\r\n\r\n    init();\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <StoreContext.Provider value={store}>\r\n        {ready && <RouterApp/>}\r\n      </StoreContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\nserviceWorker.register();\r\n"],"sourceRoot":""}