{"version":3,"sources":["model/models.ts","state/core/index.ts","state/AppSubStore.ts","state/Config.ts","state/res/Base.ts","Util.ts","state/res/RecentTrade.ts","state/res/OrderBook.ts","state/res/market/Candlestick.ts","state/res/Market.ts","state/res/Exchange.ts","state/res/Exchanges.ts","state/UiStates.ts","state/res/Balance.ts","state/res/AccountOrder.ts","state/res/Account.ts","state/res/Accounts.ts","state/AppRootStore.ts","state/index.ts","pages/Util.tsx","components/Util.tsx","components/UpdatableCard/index.tsx","components/Exchanges/index.tsx","pages/Home/index.tsx","components/AutoSizeScrollBar/index.tsx","components/MarketsView/index.tsx","components/RecentTrades/index.tsx","components/OrderBook/index.tsx","components/AccountsView/index.tsx","components/CurrentBalance/index.tsx","components/AccountOrders/index.tsx","components/AppGridContainer/index.tsx","components/TradeMainView/index.tsx","components/ExchangeView/index.tsx","pages/Exchange/index.tsx","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["eSide","eTickType","SubStore","root","parent","snapShot","store","this","applySnapShot","self","obj","Object","assign","getStoreSnapShoot","keys","key","hasOwnProperty","val","getSnapShoot","Array","isArray","isObservableArray","map","item","Map","isObservableMap","itemObj","forEach","itemKey","AppSubStore","Config","ls","baseCurrencies","name","precision","minValue","BrowserStore","observable","BaseResModel","loading","lastUpdateTime","Date","console","warn","forTwo","arr","handle","length","len","i","CommonSubLs","localStorageManager","rootKey","lsGet","k","dv","get","undefined","lsSet","v","set","lsRemove","RecentTrade","loadingStart","market","ccxtIns","fetchTrades","spec","symbol","trades","runInAction","_","orderBy","reverse","o1","o2","tick","zeroMinusTick","price","plusTick","minusTick","zeroPlusTick","lastTicker","close","loadingEnd","window","setInterval","unshift","num","Math","random","push","timestamp","getTime","datetime","id","uniqueId","type","side","amount","cost","info","taker_side","inserted_at","created_at","createTrades","action","OrderBook","transferToOrderBookRes","originItem","size","accumulateSize","fetchOrderBook","then","data","bids","asks","intervalTime","orderBook","Candlestick","fetchOHLCV","ohlcv_arr","o","time","open","high","low","volume","Market","recentTrades","candlestick","updateRes","computed","Exchange","marketsMap","lsExchangeIns","lsLatestMarketSet","lsExchange","lsLatestMarketSymbolGet","lsLatestMarketGet","when","uiStates","fetchedMarkets","fetchMarkets","items","res","fetchTickers","each","coinSymbol","allMarkets","filter","base","ccxt","exchange","createCCXTOption","balance","getMarketsByCoinSymbolFilterActive","lastPrice","quote","value","total","from","values","active","config","urls","api","private","public","Exchanges","exchangesMap","bigone3","all","createCCXTIns","UiStates","account","Balance","fetchBalance","balances","merge","sum","balancesNotZero","getQuoteValue","balancesAll","AccountOrder","lsLatestClosedOrders","lsGetOrderKey","lsLatestClosedOrdersSet","order","lsKey","lsObj","marketSymbol","orderId","lsLatestClosedOrdersDelete","createLatestClosedOrderFromLs","latestClosedOrder","fetchOrders","orders","ordersObj","keyBy","status","take","indexOf","Account","accountOrdersMap","ccxtOptions","accountOrder","createOrUpdateOrdersByMarket","filled","reduce","money","safeGetAccountOrder","outValue","computeOutMoneyByHistory","palOrders","currentValue","computeCurrentValue","profit","rate","currentSize","sellValue","calculateSize","b","computeOrderBookValue","Accounts","accountsMap","lsAccounts","lsAccountsAdd","exchangeKey","cctxOption","find","lsAccountsRemove","accountName","remove","delete","lsAccountsGetAllAccounts","createAccountsFromLs","a","exchanges","createAccount","lsLatestAccountKey","lsLatestAccountSet","exchangeName","lsLatestAccountGetFromExchange","AppRootStore","accounts","StoreContext","React","createContext","useStore","useContext","mobx","Header","Footer","Content","PageStruct","props","AppHeader","style","minHeight","children","observer","history","useHistory","className","theme","mode","defaultSelectedKeys","lineHeight","Item","onClick","MobTable","columns","column","title","capitalize","dataIndex","width","render","originalRender","text","row","index","Ob","r","ceil","FormatPercentage","FormatTimeAuto","formatStr","isToday","format","UpdateBtn","shape","icon","TimeAgo","isDate","locale","TickItem","NumberSeparateFormat","fixed","numericString","splitNumberStringSignificantBit","accounting","toFixed","valid","zero","FormatBase","withUnit","fixedNum","unit","FormatQuote","UpdatableCard","updatableRes","noContentPadding","updateImmediately","doUpdate","useCallback","useEffect","cardProps","omit","classNames","extra","list","padding","dataSource","rowKey","to","Home","AutoSizeScrollBar","el","useRef","minWidth","state","useLocalStore","height","setWH","debounce","w","h","parentResizing","parentElement","current","ro","ResizeObserver","entries","e1","contentRect","observe","disconnect","maxHeight","renderThumbVertical","renderThumbHorizontal","ref","display","TabPane","MarketsView","s","Set","add","defaultActiveKey","onChange","balancesBases","markets","includes","tab","MarketsList","renderCurrentAccount","quotes","changeMarket","RecentTrades","trade","RecentTradesItem","useMeasure","showNum","both","setSide","setShowNum","throttle","floor","renderList","buy","sell","OrderBookItem","updateDep","MarketPrice","HighLight","highLightImmediate","useState","resetAnim","element","classList","offsetWidth","onUpdateFunction","ins","AccountsView","formRef","visible","addAccount","cctxOptions","createAccountAndSaveLs","log","handleCreate","form","validateFields","err","apiKey","secret","activeAccount","AccountCreateForm","wrappedComponentRef","onCancel","onCreate","color","create","getFieldDecorator","HookForm","Component","okText","onOk","layout","label","rules","required","UserAsset","getAllBalanceValue","getMarketsByCoinSymbol","every","CurrentBalance","userOrder","profitByMarketPrice","computeProfitAndRateByMarketPrice","profitByOrderBook","computeProfitAndRateByOrderBook","autoHide","BalanceItem","usedPercent","used","freePercent","free","renderRow","percent","showInfo","AccountOrders","activeTab","renderTable","isLatestClosedOrder","setLatestClosedOrder","activeKey","activeOrders","ReactGridLayout","WidthProvider","RGL","AppGridContainer","gridLayout","defaultLayout","getCurrentLayout","toJS","onLayoutChange","blocks","cols","rowHeight","margin","draggableHandle","draggableCancel","comp","safeGetComponent","x","y","moved","static","BlockMarketsView","NeedMarket","BlockRecentTrades","BlockOrderBook","BlockAccountsView","BlockCurrentBalance","BlockAccountOrders","TradeMainView","headStyle","bodyStyle","href","background","border","ExchangeView","ExchangePage","useParams","changeExchange","App","exact","path","ready","setReady","initExchanges","init","Provider","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.1c8a4c34.chunk.js","sourcesContent":["export enum eSide {\r\n  buy = \"buy\",\r\n  sell = \"sell\",\r\n  both = \"both\"\r\n}\r\n\r\nexport interface BalanceModel extends ccxt.Balance {\r\n  base: string;\r\n}\r\n\r\nexport interface TickerModel extends ccxt.Ticker {}\r\n\r\nexport interface OrderModel extends ccxt.Order {}\r\n\r\nexport enum eTickType {\r\n  plusTick = \"plusTick\",\r\n  zeroPlusTick = \"ZeroPlusTick\",\r\n  minusTick = \"minusTick\",\r\n  zeroMinusTick = \"ZeroMinusTick\"\r\n}\r\n\r\nexport interface TradeModel extends ccxt.Trade {\r\n  tick: eTickType;\r\n}\r\n\r\nexport interface MarketSpecModel extends ccxt.Market {}\r\n\r\nexport interface OrderBookModel {\r\n  price: number;\r\n  size: number;\r\n  accumulateSize: number; //累计（吃到这里所需要的数量）\r\n  // side:eSide;\r\n}\r\n\r\nexport interface OHLCVModel {\r\n  time: number;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n}\r\n","import {isObservableArray, isObservableMap} from \"mobx\";\r\n\r\nexport abstract class SubStore<ParentType = any, RootStoreType = ParentType> {\r\n  store: RootStoreType; //root\r\n  parent: ParentType; // parent store\r\n\r\n  constructor(root: RootStoreType | null, parent: ParentType, snapShot?: any) {\r\n    this.store = root as RootStoreType;\r\n    if (!root) {\r\n      this.store = (this as unknown) as RootStoreType;\r\n    }\r\n    this.parent = parent;\r\n    this.applySnapShot(snapShot);\r\n  }\r\n\r\n  //store clone\r\n  static getStoreSnapShoot(obj: SubStore) {\r\n    delete obj.store;\r\n    delete obj.parent;\r\n    for (const key of Object.keys(obj)) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        let val = obj[key] as unknown;\r\n\r\n        if (val instanceof SubStore) {\r\n          obj[key] = val.getSnapShoot();\r\n        } else if (Array.isArray(val) || isObservableArray(val)) {\r\n          val = val.map(item => {\r\n            if (item instanceof SubStore) {\r\n              item = item.getSnapShoot();\r\n            }\r\n            return item;\r\n          });\r\n          obj[key] = val;\r\n        } else if (val instanceof Map || isObservableMap(val)) {\r\n          const itemObj = {};\r\n          val.forEach((item, itemKey) => {\r\n            itemObj[itemKey] = item;\r\n            if (item instanceof SubStore) {\r\n              itemObj[itemKey] = item.getSnapShoot();\r\n            }\r\n          });\r\n          obj[key] = itemObj;\r\n        } else if (typeof val === \"object\") {\r\n          obj[key] = SubStore.getStoreSnapShoot(val as any);\r\n        }\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  getSnapShoot(self = this): this {\r\n    let obj = Object.assign({}, self);\r\n    // obj = toJS(obj);\r\n    return SubStore.getStoreSnapShoot(obj) as any;\r\n  }\r\n\r\n  toJSON() {\r\n    const obj = Object.assign({}, this);\r\n    delete obj.store;\r\n    delete obj.parent;\r\n\r\n    return obj;\r\n  }\r\n\r\n  applySnapShot(snapShot: this) {\r\n    // console.warn('need to be implemented');\r\n  }\r\n}\r\n","import {SubStore} from \"./core\";\r\nimport {AppRootStore} from \"./AppRootStore\";\r\n\r\nexport class AppSubStore<ParentType> extends SubStore<\r\n  ParentType,\r\n  AppRootStore\r\n> {}\r\n","import {AppSubStore} from \"./AppSubStore\";\r\nimport {AppRootStore} from \"./AppRootStore\";\r\nimport {observable} from \"mobx\";\r\nimport * as BrowserStore from \"store\";\r\n\r\nexport class Config extends AppSubStore<AppRootStore> {\r\n  @observable version = 1;\r\n\r\n  ls: LocalStorageType;\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n    this.ls = BrowserStore;\r\n  }\r\n\r\n  // Used to merge display total assets\r\n  baseCurrencies = new Map([\r\n    [\r\n      \"USDT\",\r\n      {\r\n        name: \"USDT\",\r\n        precision: 2,\r\n        minValue: 0.1\r\n      }\r\n    ],\r\n    [\r\n      \"BTC\",\r\n      {\r\n        name: \"BTC\",\r\n        precision: 6,\r\n        minValue: 0.001 // Assets less than 0.001 BTC will be hidden\r\n      }\r\n    ]\r\n  ]);\r\n}\r\n\r\nexport type LocalStorageType = {\r\n  get: (key: string, defaultVal?: any) => any;\r\n  set: (key: string, val: any) => void;\r\n  remove: (key: string) => void;\r\n};\r\n","import { AppSubStore } from \"../AppSubStore\";\r\nimport { observable } from \"mobx\";\r\n\r\nexport class BaseResModel<ParentType = any> extends AppSubStore<ParentType> {\r\n  @observable loading = false;\r\n  @observable lastUpdateTime = new Date();\r\n\r\n  loadingStart() {\r\n    this.loading = true;\r\n  }\r\n\r\n  loadingEnd() {\r\n    this.loading = false;\r\n    this.lastUpdateTime = new Date();\r\n  }\r\n\r\n  updateRes() {\r\n    console.warn(\"need to be implemented\");\r\n  }\r\n}\r\n","export function forTwo<T = any>(\r\n  arr: T[],\r\n  handle: (current: T, next: T) => void\r\n) {\r\n  if (arr.length < 2) {\r\n    return;\r\n  }\r\n  const len = arr.length - 1;\r\n  for (let i = 0; i < len; i++) {\r\n    const current = arr[i];\r\n    const next = arr[i + 1];\r\n    handle(current, next);\r\n  }\r\n}\r\n\r\n//把 ls 的一个字段当做 map 来用\r\nexport class CommonSubLs {\r\n  rootKey: string;\r\n  ls: any;\r\n\r\n  constructor(localStorageManager, rootKey: string) {\r\n    this.rootKey = rootKey;\r\n    this.ls = localStorageManager;\r\n  }\r\n\r\n  lsGet = (k: string, dv?: any) => {\r\n    const root = this.ls.get(this.rootKey, {});\r\n    let item = root[k];\r\n    if (item === undefined && dv !== undefined) {\r\n      item = dv;\r\n    }\r\n    return item;\r\n  };\r\n\r\n  lsSet = (k, v) => {\r\n    const root = this.ls.get(this.rootKey, {});\r\n    root[k] = v;\r\n    this.ls.set(this.rootKey, root);\r\n  };\r\n\r\n  lsRemove = k => {\r\n    const root = this.ls.get(this.rootKey, {});\r\n    delete root[k];\r\n    this.ls.set(this.rootKey, root);\r\n  };\r\n}\r\n","import { action, observable, runInAction } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { eTickType, TradeModel } from \"../../model/models\";\r\nimport { Market } from \"./Market\";\r\nimport _ from \"lodash\";\r\nimport { forTwo } from \"../../Util\";\r\n\r\nexport class RecentTrade extends BaseResModel<Market> {\r\n  get market() {\r\n    return this.parent;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.parent.ccxtIns;\r\n  }\r\n\r\n  @observable trades: TradeModel[] = [];\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    const market = this.market;\r\n    let trades = <TradeModel[]>(\r\n      await this.ccxtIns.fetchTrades(market.spec.symbol)\r\n    );\r\n\r\n    runInAction(() => {\r\n      trades = _.orderBy(trades, \"timestamp\", [\"desc\"]);\r\n      forTwo(_.reverse(trades), (o1, o2) => {\r\n        let tick = eTickType.zeroMinusTick;\r\n\r\n        if (o2.price > o1.price) {\r\n          tick = eTickType.plusTick;\r\n        } else if (o2.price < o1.price) {\r\n          tick = eTickType.minusTick;\r\n        } else if (o2.price === o1.price) {\r\n          if (\r\n            o1.tick === eTickType.plusTick ||\r\n            o1.tick === eTickType.zeroPlusTick\r\n          ) {\r\n            tick = eTickType.zeroPlusTick;\r\n          } else {\r\n            tick = eTickType.zeroMinusTick;\r\n          }\r\n        }\r\n        o2.tick = tick;\r\n      });\r\n      this.trades = _.orderBy(trades, \"timestamp\", [\"desc\"]);\r\n\r\n      if (this.market.lastTicker) {\r\n        this.market.lastTicker.close = this.trades[0].price;\r\n      }\r\n    });\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  testAddTrades() {\r\n    const createTrade = () => {\r\n      const time = new Date();\r\n      const trade = {\r\n        timestamp: time.getTime(),\r\n        datetime: \"2019-11-20T15:54:01.000Z\",\r\n        symbol: this.market.spec.symbol,\r\n        id: _.uniqueId(\"tradeId_\"),\r\n        type: \"limit\",\r\n        side: \"sell\",\r\n        price: 0.01659,\r\n        amount: 1065 + Math.random() * 300,\r\n        cost: 17.66835,\r\n        info: {\r\n          id: 169799562,\r\n          price: \"0.01659\",\r\n          amount: \"1065\",\r\n          taker_side: \"ASK\",\r\n          inserted_at: \"2019-11-20T15:54:01Z\",\r\n          created_at: \"2019-11-20T15:54:01Z\"\r\n        },\r\n        tick: \"plusTick\"\r\n      } as TradeModel;\r\n      return trade;\r\n    };\r\n\r\n    const createTrades = (): TradeModel[] => {\r\n      const num = Math.random() * 5;\r\n      const trades = [];\r\n      for (let i = 0; i < num; i++) {\r\n        trades.push(createTrade());\r\n      }\r\n      return trades;\r\n    };\r\n\r\n    window.setInterval(() => {\r\n      this.trades.unshift(...createTrades());\r\n    }, 1000);\r\n  }\r\n}\r\n","import { action, observable } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { OrderBookModel } from \"../../model/models\";\r\nimport { Market } from \"./Market\";\r\n\r\nexport class OrderBook extends BaseResModel<Market> {\r\n  get market() {\r\n    return this.parent;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.parent.ccxtIns;\r\n  }\r\n\r\n  @observable asks: OrderBookModel[] = [];\r\n  @observable bids: OrderBookModel[] = [];\r\n\r\n  transferToOrderBookRes = (originItem: number[]) => {\r\n    return {\r\n      price: originItem[0],\r\n      size: originItem[1],\r\n      accumulateSize: originItem[1]\r\n      // side:,\r\n    } as OrderBookModel;\r\n  };\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    const market = this.market;\r\n    await this.ccxtIns.fetchOrderBook(market.spec.symbol).then(data => {\r\n      this.bids = data.bids.map(this.transferToOrderBookRes);\r\n      this.asks = data.asks.map(this.transferToOrderBookRes);\r\n    });\r\n    this.loadingEnd();\r\n  }\r\n\r\n  test1(intervalTime = 1000) {\r\n    window.setInterval(() => {\r\n      this.market.orderBook.asks[0].price += 1;\r\n\r\n      this.market.orderBook.asks[3].price += 1;\r\n    }, intervalTime);\r\n  }\r\n}\r\n","import {action, observable, runInAction} from \"mobx\";\r\nimport {BaseResModel} from \"../Base\";\r\nimport {Market} from \"../Market\";\r\nimport {OHLCVModel} from \"../../../model/models\";\r\n\r\nexport class Candlestick extends BaseResModel<Market> {\r\n  get market() {\r\n    return this.parent;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.parent.ccxtIns;\r\n  }\r\n\r\n  @observable ohlcv_arr: OHLCVModel[] = [];\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    const market = this.market;\r\n    const arr = await this.ccxtIns.fetchOHLCV(\r\n      market.spec.symbol,\r\n      \"1d\",\r\n      null,\r\n      500\r\n    );\r\n    runInAction(() => {\r\n      this.ohlcv_arr = arr.map(o => {\r\n        return {\r\n          time: o[0],\r\n          open: o[1],\r\n          high: o[2],\r\n          close: o[3],\r\n          low: o[4],\r\n          volume: o[5]\r\n        } as OHLCVModel;\r\n      });\r\n    });\r\n    this.loadingEnd();\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { Exchange } from \"./Exchange\";\r\nimport { MarketSpecModel, TickerModel } from \"../../model/models\";\r\nimport { RecentTrade } from \"./RecentTrade\";\r\nimport { OrderBook } from \"./OrderBook\";\r\nimport { Candlestick } from \"./market/Candlestick\";\r\n\r\nexport class Market extends BaseResModel<Exchange> {\r\n  @observable recentTrades: RecentTrade;\r\n  @observable orderBook: OrderBook;\r\n  @observable candlestick: Candlestick;\r\n  @observable spec: MarketSpecModel = null;\r\n\r\n  @observable lastTicker = null as TickerModel;\r\n\r\n  constructor(root, parent, spec: MarketSpecModel) {\r\n    super(root, parent);\r\n    this.spec = spec;\r\n    this.recentTrades = new RecentTrade(root, this);\r\n    this.orderBook = new OrderBook(root, this);\r\n    this.candlestick = new Candlestick(root, this);\r\n  }\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    await this.recentTrades.updateRes();\r\n    await this.orderBook.updateRes();\r\n    // await this.candlestick.updateRes();\r\n    this.loadingEnd();\r\n  }\r\n\r\n  @computed get lastTrade() {\r\n    return this.recentTrades.trades[0];\r\n  }\r\n\r\n  //market price\r\n  @computed get lastPrice() {\r\n    if (this.lastTicker) {\r\n      return this.lastTicker.close;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n}\r\n","import { action, computed, observable, runInAction, when } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { Market } from \"./Market\";\r\nimport { Exchanges } from \"./Exchanges\";\r\nimport _ from \"lodash\";\r\nimport { BalanceModel, TickerModel } from \"../../model/models\";\r\nimport { CommonSubLs } from \"../../Util\";\r\n\r\nexport class Exchange extends BaseResModel<Exchanges> {\r\n  marketsMap = observable.map<string, Market>({}, { name: \"marketsMap\" });\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    {\r\n      //set ui market\r\n      when(\r\n        () => this.marketsMap.size > 0,\r\n        () => {\r\n          this.store.uiStates.market = this.lsLatestMarketGet();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  @observable ccxtIns = null as ccxt.Exchange;\r\n\r\n  @observable exchange = \"bigone3\"; // 对应ccxt里的名字\r\n\r\n  @observable createCCXTOption = {\r\n    urls: {\r\n      // 'api': 'https://b1.run/api/v3/',\r\n      api: {\r\n        private: \"https://b1.run/api/v3/viewer\",\r\n        public: \"https://b1.run/api/v3\"\r\n      }\r\n    }\r\n  };\r\n\r\n  @observable fetchedMarkets = false;\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    if (!this.fetchedMarkets) {\r\n      let items = await this.ccxtIns.fetchMarkets();\r\n      this.fetchedMarkets = true;\r\n      runInAction(() => {\r\n        items.forEach(item => {\r\n          const res = new Market(this.store, this, item);\r\n          this.marketsMap.set(item.symbol, res);\r\n        });\r\n      });\r\n    }\r\n\r\n    let items = await this.ccxtIns.fetchTickers();\r\n    runInAction(() => {\r\n      _.each(items, (item: TickerModel) => {\r\n        const market = this.marketsMap.get(item.symbol);\r\n        if (market) {\r\n          market.lastTicker = item;\r\n        }\r\n      });\r\n    });\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  getMarketsByCoinSymbol(coinSymbol: string) {\r\n    return this.allMarkets.filter(o => {\r\n      return o.spec.base === coinSymbol;\r\n    });\r\n  }\r\n  getMarketsByCoinSymbolFilterActive(coinSymbol: string) {\r\n    return this.allMarkets.filter(o => {\r\n      return o.spec.base === coinSymbol;\r\n    });\r\n  }\r\n\r\n  @action\r\n  async createCCXTIns() {\r\n    this.ccxtIns = await new window.ccxt[this.exchange](this.createCCXTOption);\r\n  }\r\n\r\n  @computed get allMarkets() {\r\n    return Array.from(this.marketsMap.values());\r\n  }\r\n\r\n  @computed get allEnabledMarkets() {\r\n    return this.allMarkets.filter(o => o.spec.active);\r\n  }\r\n\r\n  getQuoteValue(balance: BalanceModel) {\r\n    const markets = this.getMarketsByCoinSymbolFilterActive(balance.base);\r\n    return markets\r\n      .filter(o => o.lastPrice && o.spec.base === balance.base)\r\n      .map(market => {\r\n        return {\r\n          symbol: market.spec.symbol,\r\n          quote: market.spec.quote,\r\n          base: balance.base,\r\n          value: balance.total * market.lastPrice\r\n        };\r\n      });\r\n  }\r\n\r\n  lsExchangeIns = null;\r\n\r\n  get lsExchange() {\r\n    if (!this.lsExchangeIns) {\r\n      this.lsExchangeIns = new CommonSubLs(\r\n        this.store.config.ls,\r\n        `exchange_${this.exchange}`\r\n      );\r\n    }\r\n    return this.lsExchangeIns;\r\n  }\r\n\r\n  lsLatestMarketSet = (market: Market) => {\r\n    this.lsExchange.lsSet(\"latestMarketSymbol\", market.spec.symbol);\r\n  };\r\n  lsLatestMarketSymbolGet = () => {\r\n    return this.lsExchange.lsGet(\"latestMarketSymbol\");\r\n  };\r\n\r\n  lsLatestMarketGet = () => {\r\n    const symbol = this.lsLatestMarketSymbolGet();\r\n    const market = this.marketsMap.get(symbol);\r\n    return market;\r\n  };\r\n\r\n  getSnapShoot(): this {\r\n    const obj = super.getSnapShoot();\r\n    delete obj.ccxtIns;\r\n    return obj;\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { AppRootStore } from \"../AppRootStore\";\r\nimport { Exchange } from \"./Exchange\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport _ from \"lodash\";\r\n\r\nexport class Exchanges extends BaseResModel<AppRootStore> {\r\n  exchangesMap = observable.map<string, Exchange>({}, { name: \"exchangesMap\" });\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    const bigone3 = new Exchange(this.store, this);\r\n    bigone3.exchange  = 'bigone3';\r\n    this.exchangesMap.set(bigone3.exchange, bigone3);\r\n\r\n    /*    const zb = new Exchange(this.store, this);\r\n    {\r\n      zb.exchange = \"zb\";\r\n      zb.createCCXTOption = {\r\n        urls: {\r\n          api: {\r\n            private: \"https://api.zb.plus/data/v1\",\r\n            public: \"https://api.zb.plus/data/v1\"\r\n          }\r\n        }\r\n      } as any;\r\n      this.exchangesMap.set(\"zb\", zb);\r\n    }\r\n    */\r\n\r\n    const exchangesNames = [\r\n      \"bittrex\", // dwad\r\n      \"basefex\",\r\n      // \"bitmex\",\r\n      \"coss\",\r\n      \"bibox\",\r\n      \"huobipro\",\r\n      \"okex3\",\r\n      \"poloniex\",\r\n      // 'bitstamp',\r\n      \"coinbasepro\"\r\n    ];\r\n\r\n    ///ccxt.exchanges\r\n    _.each(exchangesNames, name => {\r\n      const item = new Exchange(this.store, this);\r\n      item.exchange = name;\r\n      item.createCCXTOption = {} as any;\r\n      this.exchangesMap.set(name, item);\r\n    });\r\n  }\r\n\r\n  @computed get all() {\r\n    return Array.from(this.exchangesMap.values());\r\n  }\r\n\r\n  @action\r\n  async initExchanges() {\r\n    for (const exchange of this.all) {\r\n      await exchange.createCCXTIns();\r\n    }\r\n  }\r\n}\r\n","import {AppSubStore} from \"./AppSubStore\";\r\nimport {AppRootStore} from \"./AppRootStore\";\r\nimport {action, observable} from \"mobx\";\r\nimport {Exchange} from \"./res/Exchange\";\r\nimport {Market} from \"./res/Market\";\r\nimport {Account} from \"./res/Account\";\r\n\r\nexport class UiStates extends AppSubStore<AppRootStore> {\r\n  @observable exchange: Exchange = null;\r\n\r\n  @observable market: Market = null;\r\n\r\n  @observable account: Account = null;\r\n\r\n  @action changeExchange(exchange: Exchange) {\r\n    this.exchange = exchange;\r\n    this.market = null;\r\n    this.account = null;\r\n  }\r\n\r\n  @action changeMarket(market: Market) {\r\n    this.market = market;\r\n    this.exchange.lsLatestMarketSet(market);\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { BalanceModel } from \"../../model/models\";\r\nimport _ from \"lodash\";\r\nimport { Account } from \"./Account\";\r\n\r\nexport class Balance extends BaseResModel<Account> {\r\n  get ccxtIns() {\r\n    return this.parent.ccxtIns;\r\n  }\r\n\r\n  map = observable.map<string, BalanceModel>({}, { name: \"balance\" });\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    let balances = await this.ccxtIns.fetchBalance();\r\n    _.each(balances, (balance: BalanceModel, key) => {\r\n      balance.base = key;\r\n    });\r\n    delete balances[\"info\"];\r\n    this.map.merge(balances);\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  @computed\r\n  get balancesAll() {\r\n    let items = Array.from(this.map.values());\r\n    items = _.orderBy(items, [\"total\"], [\"desc\"]);\r\n    return items;\r\n  }\r\n\r\n  @computed\r\n  get balancesNotZero() {\r\n    return this.balancesAll.filter(o => {\r\n      return o.total > 0.0001;\r\n    });\r\n  }\r\n\r\n  getAllBalanceValue(quote: string) {\r\n    const exchange = this.parent.exchange;\r\n    let sum = 0;\r\n    this.balancesNotZero.forEach(balance => {\r\n      if (balance.base === quote) {\r\n        sum += balance.total;\r\n      } else {\r\n        const values = exchange.getQuoteValue(balance);\r\n        values\r\n          .filter(o => o.quote === quote)\r\n          .forEach(o => {\r\n            sum += o.value;\r\n          });\r\n      }\r\n    });\r\n    return sum;\r\n  }\r\n}\r\n","import { action, computed, observable, runInAction } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { OrderModel } from \"../../model/models\";\r\nimport _ from \"lodash\";\r\nimport { Account } from \"./Account\";\r\nimport { Market } from \"./Market\";\r\nimport { CommonSubLs } from \"../../Util\";\r\n\r\nexport class AccountOrder extends BaseResModel<Account> {\r\n  map = observable.map<string, OrderModel>({}, { name: \"orderMap\" });\r\n\r\n  @observable market: Market = null;\r\n\r\n  constructor(root, parent, market: Market) {\r\n    super(root, parent);\r\n    this.market = market;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.ccxtIns;\r\n  }\r\n\r\n  @computed\r\n  get all() {\r\n    let items = Array.from(this.map.values());\r\n    items = _.orderBy(items, [\"timestamp\"], [\"desc\"]);\r\n    return items;\r\n  }\r\n\r\n  @computed\r\n  get activeOrders() {\r\n    return this.all.filter(o => o.status === \"open\");\r\n  }\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    const market = this.market;\r\n    const symbol = market.spec.symbol;\r\n    let orders: OrderModel[] = await this.ccxtIns.fetchOrders(symbol);\r\n    runInAction(() => {\r\n      orders = _.orderBy(orders, \"timestamp\", [\"desc\"]);\r\n      const ordersObj = _.keyBy(orders, \"id\");\r\n      this.map.merge(ordersObj);\r\n      this.createLatestClosedOrderFromLs();\r\n      this.loadingEnd();\r\n    });\r\n  }\r\n\r\n  // pal - profit and loss\r\n\r\n  @observable latestClosedOrder = null; // Need for calculate pal\r\n  //Orders involved in profit and loss calculations  - from latestClosedOrder(Not included) to latest order\r\n  @computed\r\n  get palOrders() {\r\n    let orders = this.all;\r\n    if (this.latestClosedOrder) {\r\n      orders = _.take(orders, _.indexOf(orders, this.latestClosedOrder));\r\n    }\r\n    return orders;\r\n  }\r\n\r\n  @action\r\n  setLatestClosedOrder(order: OrderModel) {\r\n    this.latestClosedOrder = order;\r\n    this.lsLatestClosedOrdersSet(order);\r\n  }\r\n\r\n  lsLatestClosedOrders = new CommonSubLs(\r\n    this.store.config.ls,\r\n    `LatestClosedOrders`\r\n  );\r\n\r\n  lsGetOrderKey = () => {\r\n    const lsKey = `${this.market.parent.exchange}-${this.parent.name}-${this.market.spec.symbol}`;\r\n    return lsKey;\r\n  };\r\n\r\n  lsLatestClosedOrdersSet = (order: OrderModel) => {\r\n    const base = this.lsLatestClosedOrders.lsGet(\"orders\", {});\r\n    const lsKey = this.lsGetOrderKey();\r\n    const lsObj = {\r\n      marketSymbol: this.market.spec.symbol,\r\n      orderId: order.id,\r\n      account: this.parent.name\r\n    } as ILsLatestClosedOrder;\r\n    base[lsKey] = lsObj;\r\n    this.lsLatestClosedOrders.lsSet(\"orders\", base);\r\n  };\r\n\r\n  lsLatestClosedOrdersDelete = () => {\r\n    const base = this.lsLatestClosedOrders.lsGet(\"orders\", {});\r\n    const lsKey = this.lsGetOrderKey();\r\n    delete base[lsKey];\r\n    this.lsLatestClosedOrders.lsSet(\"orders\", base);\r\n  };\r\n\r\n  createLatestClosedOrderFromLs = () => {\r\n    const base = this.lsLatestClosedOrders.lsGet(\"orders\", {});\r\n    const lsKey = this.lsGetOrderKey();\r\n    const lsObj = base[lsKey] as ILsLatestClosedOrder;\r\n    if (lsObj) {\r\n      this.latestClosedOrder = this.map.get(lsObj.orderId);\r\n    }\r\n  };\r\n}\r\n\r\nexport interface ILsLatestClosedOrder {\r\n  marketSymbol: string;\r\n  orderId: string;\r\n  account: string;\r\n}\r\n","import { action, observable } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { Exchange } from \"./Exchange\";\r\nimport { Accounts } from \"./Accounts\";\r\nimport { Balance } from \"./Balance\";\r\nimport { OrderModel } from \"../../model/models\";\r\nimport { AccountOrder } from \"./AccountOrder\";\r\nimport { Market } from \"./Market\";\r\n\r\nexport class Account extends BaseResModel<Accounts> {\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    this.balances = new Balance(root, this);\r\n  }\r\n\r\n  @observable ccxtIns = null as ccxt.Exchange; //共享market， 但是私有api 通过自己的 cctx 请求\r\n  @observable name = \"bigone3\"; // account 唯一名字，不能重复\r\n\r\n  @observable exchange: Exchange = null;\r\n\r\n  @observable createCCXTOption = {};\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  @action\r\n  async createCCXTIns(exchange: Exchange) {\r\n    this.exchange = exchange;\r\n    const ccxtOptions = Object.assign(\r\n      {},\r\n      exchange.createCCXTOption,\r\n      this.createCCXTOption\r\n    );\r\n    this.ccxtIns = await new window.ccxt[exchange.exchange](ccxtOptions);\r\n  }\r\n\r\n  @observable balances: Balance;\r\n\r\n  accountOrdersMap = observable.map<string, AccountOrder>(\r\n    {},\r\n    { name: \"accountOrdersMap\" }\r\n  );\r\n\r\n  @action createOrUpdateOrdersByMarket(market: Market) {\r\n    const symbol = market.spec.symbol;\r\n    let accountOrder = this.accountOrdersMap.get(symbol);\r\n    if (!accountOrder) {\r\n      accountOrder = new AccountOrder(this.store, this, market);\r\n      this.accountOrdersMap.set(symbol, accountOrder);\r\n    }\r\n    return accountOrder;\r\n  }\r\n\r\n  safeGetAccountOrder(market: Market) {\r\n    return this.createOrUpdateOrdersByMarket(market);\r\n  }\r\n\r\n  //计算花出去的钱\r\n  computeOutMoneyByHistory(orders: OrderModel[]) {\r\n    let toCompute = orders.filter(o => {\r\n      return o.filled > 0; //才是真正执行过的订单\r\n    });\r\n\r\n    const sum = toCompute.reduce((sum, order) => {\r\n      let money = 0;\r\n\r\n      if (order.type === \"limit\") {\r\n        money = order.price * order.amount;\r\n      } else {\r\n        money = order.filled;\r\n      }\r\n\r\n      if (order.side === \"sell\") {\r\n        money *= -1;\r\n      }\r\n      return sum + money;\r\n    }, 0);\r\n    return sum;\r\n  }\r\n\r\n  computeCurrentValue(market: Market) {\r\n    const lastPrice = market.lastPrice;\r\n    const currentValue =\r\n      this.balances.map.get(market.spec.base).total * lastPrice;\r\n    return currentValue;\r\n  }\r\n\r\n  computeProfitAndRateByMarketPrice(market: Market) {\r\n    const accountOrder = this.safeGetAccountOrder(market);\r\n    const outValue = this.computeOutMoneyByHistory(accountOrder.palOrders);\r\n    const currentValue = this.computeCurrentValue(market);\r\n    return {\r\n      profit: currentValue - outValue,\r\n      rate: (currentValue - outValue) / outValue\r\n    };\r\n  }\r\n\r\n  computeOrderBookValue(market: Market) {\r\n    const currentSize = this.balances.map.get(market.spec.base).total;\r\n\r\n    const bids = market.orderBook.bids;\r\n\r\n    let sellValue = 0; // can be sold\r\n\r\n    let calculateSize = 0;\r\n\r\n    for (let i = 0; i < bids.length; i++) {\r\n      const b = bids[i];\r\n      calculateSize += b.size;\r\n\r\n      if (calculateSize < currentSize) {\r\n        sellValue += b.size * b.price;\r\n      } else {\r\n        const leftSize = currentSize - (calculateSize - b.size);\r\n        sellValue += leftSize * b.price;\r\n        break;\r\n      }\r\n    }\r\n    return sellValue;\r\n  }\r\n\r\n  computeProfitAndRateByOrderBook(market: Market) {\r\n    const accountOrder = this.safeGetAccountOrder(market);\r\n    const currentValue = this.computeOrderBookValue(market);\r\n    const outValue = this.computeOutMoneyByHistory(accountOrder.palOrders);\r\n\r\n    return {\r\n      profit: currentValue - outValue,\r\n      rate: (currentValue - outValue) / outValue\r\n    };\r\n  }\r\n\r\n  getSnapShoot(): this {\r\n    const obj = super.getSnapShoot();\r\n    delete obj.ccxtIns;\r\n    delete this.exchange;\r\n    return obj;\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { AppRootStore } from \"../AppRootStore\";\r\nimport { Exchange } from \"./Exchange\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { Account } from \"./Account\";\r\nimport { CommonSubLs } from \"../../Util\";\r\nimport _ from \"lodash\";\r\n\r\nexport class Accounts extends BaseResModel<AppRootStore> {\r\n  accountsMap = observable.map<string, Account>({}, { name: \"accountsMap\" });\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    this.createAccountsFromLs();\r\n  }\r\n\r\n  @computed get all() {\r\n    return Array.from(this.accountsMap.values());\r\n  }\r\n\r\n  @action\r\n  async createAccount(exchange: Exchange, name: string, cctxOption) {\r\n    if (this.accountsMap.get(name)) {\r\n      console.warn(\"已经存在此账户，不能重复添加\", name);\r\n    } else {\r\n      const account = new Account(this.store, this);\r\n\r\n      account.name = name;\r\n      account.createCCXTOption = Object.assign(\r\n        account.createCCXTOption,\r\n        cctxOption\r\n      );\r\n      await account.createCCXTIns(exchange);\r\n      this.accountsMap.set(name, account);\r\n      return account;\r\n    }\r\n  }\r\n\r\n  @action\r\n  async createAccountAndSaveLs(exchange: Exchange, name: string, cctxOption) {\r\n    const account = await this.createAccount(exchange, name, cctxOption);\r\n    if (account) {\r\n      this.lsAccountsAdd(exchange.exchange, account, cctxOption);\r\n    }\r\n  }\r\n\r\n  lsAccounts = new CommonSubLs(this.store.config.ls, \"accounts\");\r\n  lsAccountsAdd = (exchangeKey: string, account: Account, cctxOption) => {\r\n    const arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\r\n    const a = arr.find(o => o.name === account.name);\r\n    if (a) {\r\n      console.warn(\"已经存在\", exchangeKey, account);\r\n    } else {\r\n      arr.push(\r\n        Object.assign(\r\n          {},\r\n          {\r\n            exchangeKey,\r\n            name: account.name,\r\n            cctxOption: cctxOption\r\n          }\r\n        )\r\n      );\r\n    }\r\n    this.lsAccounts.lsSet(\"list\", arr);\r\n  };\r\n\r\n  lsAccountsRemove = (accountName: string) => {\r\n    let arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\r\n    _.remove(arr, o => o.name === accountName);\r\n\r\n    this.accountsMap.delete(accountName);\r\n    this.lsAccounts.lsSet(\"list\", arr);\r\n  };\r\n\r\n  lsAccountsGetAllAccounts = () => {\r\n    const arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\r\n    return arr;\r\n  };\r\n\r\n  createAccountsFromLs = async () => {\r\n    const arr = this.lsAccountsGetAllAccounts();\r\n    for (const o of arr) {\r\n      const exchange = this.store.exchanges.exchangesMap.get(o.exchangeKey);\r\n      if (exchange) {\r\n        await this.createAccount(exchange, o.name, o.cctxOption);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Store the last activated user\r\n  lsLatestAccountKey = (exchange: Exchange) => {\r\n    const lsKey = `${exchange.exchange}`;\r\n    return lsKey;\r\n  };\r\n\r\n  lsLatestAccountSet = (account: Account) => {\r\n    const base = this.lsAccounts.lsGet(\"LatestAccountMap\", {});\r\n    const lsKey = this.lsLatestAccountKey(account.exchange);\r\n    const lsObj = {\r\n      accountName: account.name,\r\n      exchangeName: account.exchange.exchange\r\n    };\r\n    base[lsKey] = lsObj;\r\n    this.lsAccounts.lsSet(\"LatestAccountMap\", base);\r\n  };\r\n\r\n  lsLatestAccountGetFromExchange = (exchange: Exchange): Account => {\r\n    const base = this.lsAccounts.lsGet(\"LatestAccountMap\", {});\r\n    const lsKey = this.lsLatestAccountKey(exchange);\r\n    const lsObj = base[lsKey];\r\n    if (lsObj) {\r\n      return this.accountsMap.get(lsObj.accountName);\r\n    }\r\n    return null;\r\n  };\r\n}\r\n\r\ninterface IAccountLsOption {\r\n  exchangeKey: string;\r\n  name: string;\r\n  cctxOption: any;\r\n}\r\n","import { SubStore } from \"./core\";\r\nimport { Config } from \"./Config\";\r\nimport { Exchanges } from \"./res/Exchanges\";\r\nimport { UiStates } from \"./UiStates\";\r\nimport { Accounts } from \"./res/Accounts\";\r\n\r\nwindow[\"patch_bigone3\"]();\r\nwindow[\"patch_basefex\"]();\r\n\r\nexport class AppRootStore extends SubStore<null, AppRootStore> {\r\n  name = \"root store\";\r\n\r\n  config: Config;\r\n  exchanges: Exchanges;\r\n  accounts: Accounts;\r\n  uiStates: UiStates;\r\n\r\n  constructor() {\r\n    super(null, null);\r\n\r\n    this.config = new Config(this, this);\r\n    this.exchanges = new Exchanges(this, this);\r\n    this.accounts = new Accounts(this, this);\r\n    this.uiStates = new UiStates(this, this);\r\n  }\r\n}\r\n","import React, {useContext} from \"react\";\r\nimport {AppRootStore} from \"./AppRootStore\";\r\n\r\nimport * as mobx from \"mobx\";\r\n\r\nexport const StoreContext = React.createContext(null as AppRootStore | null);\r\n\r\nexport function useStore(): AppRootStore {\r\n  return useContext(StoreContext);\r\n}\r\n\r\nwindow[\"mobx\"] = mobx;\r\n","import {Layout, Menu} from \"antd\";\r\nimport React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {useStore} from \"../state\";\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nexport const PageStruct = function(props: { children: any }) {\r\n  return (\r\n    <Layout>\r\n      <AppHeader />\r\n      <Content style={{ minHeight: \"90vh\" }}>{props.children}</Content>\r\n      <Footer>Footer</Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst AppHeader = observer(function() {\r\n  const { uiStates } = useStore();\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Header className={\"appHeader\"}>\r\n      <Menu\r\n        theme=\"light\"\r\n        mode=\"horizontal\"\r\n        defaultSelectedKeys={[\"exchanges\"]}\r\n        style={{ lineHeight: \"64px\" }}\r\n      >\r\n        <Menu.Item\r\n          key=\"exchanges\"\r\n          onClick={() => {\r\n            history.push(\"/\");\r\n          }}\r\n        >\r\n          Exchanges\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"exchange\"\r\n          onClick={() => {\r\n            const exchangeKey = uiStates.exchange\r\n              ? uiStates.exchange.exchange\r\n              : \"\";\r\n            history.push(`/exchange/${exchangeKey}`);\r\n          }}\r\n        >\r\n          Exchange\r\n        </Menu.Item>\r\n        {/*<Menu.Item key=\"3\">Setting</Menu.Item>*/}\r\n      </Menu>\r\n    </Header>\r\n  );\r\n});\r\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport { observer, Observer } from \"mobx-react-lite\";\r\nimport { eTickType, MarketSpecModel } from \"../model/models\";\r\nimport { format, isToday } from \"date-fns\";\r\nimport { ColumnProps, TableProps } from \"antd/lib/table\";\r\nimport { Button, Icon, Table } from \"antd\";\r\nimport ReactTimeAgo from \"timeago-react\";\r\n\r\nexport function MobTable<T>(props: TableProps<T>) {\r\n  const columns = props.columns.map(column => {\r\n    column.title = column.title || _.capitalize(column.dataIndex);\r\n    column.key = column.key || column.dataIndex;\r\n\r\n    column.width = column.width || 200;\r\n\r\n    if (column.render) {\r\n      const originalRender = column.render;\r\n      column.render = (text, row, index) => {\r\n        return (\r\n          <Ob\r\n            r={() => {\r\n              const val = row[column.dataIndex];\r\n              return originalRender(val, row, index);\r\n            }}\r\n          />\r\n        );\r\n      };\r\n    } else {\r\n      column.render = (text, row) => {\r\n        return (\r\n          <Ob\r\n            r={() => {\r\n              const val = row[column.dataIndex];\r\n              return val;\r\n            }}\r\n          />\r\n        );\r\n      };\r\n    }\r\n    return column as ColumnProps<any>;\r\n  });\r\n  return <Table<T> {...props} columns={columns} />;\r\n}\r\n\r\nexport function Ob(props: { r: Function }) {\r\n  return <Observer render={props.r as any} />;\r\n}\r\n\r\nexport const FormatValue = observer(function FormatPrice(props: {\r\n  val: number;\r\n  market: MarketSpecModel;\r\n}) {\r\n  const { val, market } = props;\r\n  let len = 8;\r\n  if (market.quote === \"USDT\") {\r\n    len = 2;\r\n  }\r\n  const v = _.ceil(val, len);\r\n  return (\r\n    <span>\r\n      {v} {market.quote}\r\n    </span>\r\n  );\r\n});\r\n\r\nexport const FormatPercentage = observer(function FormatPrice(props: {\r\n  val: number;\r\n  len?: number;\r\n}) {\r\n  const { val, len = 4 } = props;\r\n  const v = _.ceil(val * 100, len);\r\n  return <span>{v} %</span>;\r\n});\r\n\r\nexport const FormatTimeAuto = (props: { val: number | Date }) => {\r\n  const { val } = props;\r\n  let formatStr = `yyyy-MM-dd HH:mm:ss`;\r\n  if (isToday(val)) {\r\n    formatStr = `HH:mm:ss`;\r\n  }\r\n  return format(val, formatStr) as any;\r\n};\r\n\r\nexport const UpdateBtn = (props: { onClick: any; loading: boolean }) => {\r\n  return (\r\n    <Button\r\n      type={\"primary\"}\r\n      shape=\"circle\"\r\n      icon=\"sync\"\r\n      onClick={props.onClick}\r\n      loading={props.loading}\r\n    />\r\n  );\r\n};\r\n\r\nexport const TimeAgo = observer(function(props: { time: number | Date }) {\r\n  let time = props.time;\r\n\r\n  if (_.isDate(props.time)) {\r\n    return <ReactTimeAgo datetime={props.time} locale=\"en_US\" />;\r\n  } else {\r\n    return time as any;\r\n  }\r\n});\r\n\r\nexport const TickItem = observer(function TickItem(props: { tick: eTickType }) {\r\n  const { tick } = props;\r\n\r\n  let icon = <Icon type=\"arrow-up\" />;\r\n\r\n  switch (tick) {\r\n    case eTickType.plusTick:\r\n      icon = <Icon type=\"arrow-up\" />;\r\n      break;\r\n    case eTickType.zeroPlusTick:\r\n      icon = <Icon type=\"caret-up\" />;\r\n      break;\r\n    case eTickType.minusTick:\r\n      icon = <Icon type=\"arrow-down\" />;\r\n      break;\r\n    case eTickType.zeroMinusTick:\r\n      icon = <Icon type=\"caret-down\" />;\r\n      break;\r\n  }\r\n\r\n  return <div className={`icon ${tick}`}>{icon}</div>;\r\n});\r\n\r\nconst splitNumberStringSignificantBit = (numericString: string) => {\r\n  if (numericString.indexOf(\".\") > 0) {\r\n    // const valid = numericString.match(/\\d(.*[^0])+/g)[0]\r\n    // const zero = numericString.substring(valid.length,numericString.length)\r\n    const valid = numericString;\r\n    const zero = \"\";\r\n    return [valid, zero];\r\n  } else {\r\n    return [numericString];\r\n  }\r\n};\r\n\r\nexport const NumberSeparateFormat = observer(\r\n  (props: { num: number; fixed: number }) => {\r\n    const { fixed, num } = props;\r\n\r\n    const numericString = accounting.toFixed(num, fixed);\r\n\r\n    const [valid, zero = \"\"] = splitNumberStringSignificantBit(numericString);\r\n    return (\r\n      <span className={\"Nf\"}>\r\n        {valid}\r\n        <span className={\"invalidSection\"}>{zero}</span>\r\n      </span>\r\n    );\r\n  }\r\n);\r\n\r\n//Split digital significant bit\r\n\r\nexport const FormatBase = observer(function FormatBase(props: {\r\n  val: number;\r\n  spec: MarketSpecModel;\r\n  withUnit?: boolean;\r\n}) {\r\n  const { val, spec, withUnit = false } = props;\r\n  const fixedNum = spec.precision.base || spec.precision.amount;\r\n  const unit = spec.quote;\r\n  return (\r\n    <span>\r\n      <NumberSeparateFormat num={val} fixed={fixedNum} /> {withUnit && unit}\r\n    </span>\r\n  );\r\n});\r\n\r\nexport const FormatQuote = observer(function FormatQuote(props: {\r\n  val: number;\r\n  spec: MarketSpecModel;\r\n  withUnit?: boolean;\r\n}) {\r\n  const { val, spec, withUnit = false } = props;\r\n  const fixedNum = spec.precision.quote || spec.precision.price;\r\n  const unit = spec.quote;\r\n  return (\r\n    <span>\r\n      <NumberSeparateFormat num={val} fixed={fixedNum} /> {withUnit && unit}\r\n    </span>\r\n  );\r\n});\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {TimeAgo, UpdateBtn} from \"../Util\";\r\nimport {Card} from \"antd\";\r\nimport \"./index.scss\";\r\nimport {CardProps} from \"antd/lib/card\";\r\nimport classNames from \"classnames\";\r\nimport _ from \"lodash\";\r\nimport {BaseResModel} from \"../../state/res/Base\";\r\n\r\nexport const UpdatableCard = observer(function UpdatableCard(\r\n  props: Partial<CardProps> & {\r\n    updatableRes: Partial<BaseResModel>;\r\n    noContentPadding?: boolean;\r\n    updateImmediately?: boolean;\r\n  }\r\n) {\r\n  const {\r\n    updatableRes,\r\n    noContentPadding = true,\r\n    updateImmediately = true\r\n  } = props;\r\n\r\n  const doUpdate = useCallback(async () => {\r\n    try {\r\n      await updatableRes.updateRes();\r\n    } catch (e) {\r\n      console.warn(\"updatableRes failed\", e);\r\n    }\r\n  }, [updatableRes]);\r\n\r\n  useEffect(() => {\r\n    if (updateImmediately) {\r\n      doUpdate();\r\n    }\r\n  }, []);\r\n\r\n  const cardProps = _.omit(props, [\r\n    \"updatableRes\",\r\n    \"noContentPadding\",\r\n    \"updateImmediately\"\r\n  ]);\r\n\r\n  return (\r\n    <Card\r\n      {...cardProps}\r\n      title={\r\n        <div className={\"titleWithUpdateTime\"}>\r\n          <div>{props.title}</div>\r\n          <div className={\"updateTime\"}>\r\n            <TimeAgo time={updatableRes.lastUpdateTime} />\r\n          </div>\r\n        </div>\r\n      }\r\n      className={classNames(\r\n        \"UpdatableCard\",\r\n        {\r\n          noContentPadding: noContentPadding\r\n        },\r\n        cardProps.className\r\n      )}\r\n      size=\"small\"\r\n      extra={\r\n        <div>\r\n          <UpdateBtn\r\n            onClick={() => {\r\n              doUpdate();\r\n            }}\r\n            loading={updatableRes.loading}\r\n          />\r\n        </div>\r\n      }\r\n    >\r\n      {cardProps.children}\r\n    </Card>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {MobTable} from \"../Util\";\r\nimport \"./index.scss\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport {useStore} from \"../../state\";\r\nimport {Exchange} from \"../../state/res/Exchange\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const Exchanges = observer(function Exchanges(props: {}) {\r\n  const { exchanges } = useStore();\r\n\r\n  const list = exchanges.all;\r\n\r\n  return (\r\n    <div className={\"Exchanges\"} style={{ padding: 24 }}>\r\n      <UpdatableCard title={<div>Exchanges</div>} updatableRes={exchanges}>\r\n        <MobTable<Exchange>\r\n          size={\"small\"}\r\n          dataSource={list}\r\n          rowKey={\"exchange\"}\r\n          columns={[\r\n            {\r\n              title: \"Id\",\r\n              dataIndex: \"exchange\",\r\n              render: (v, row) => (\r\n                <div>\r\n                  <Link to={`/exchange/${row.exchange}`}>{v}</Link>\r\n                </div>\r\n              )\r\n            }\r\n          ]}\r\n        />\r\n      </UpdatableCard>\r\n    </div>\r\n  );\r\n});\r\n","import {observer} from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {PageStruct} from \"../Util\";\r\nimport {Exchanges} from \"../../components/Exchanges\";\r\n\r\nexport const Home = observer(function Home() {\r\n  return (\r\n    <PageStruct>\r\n      <Exchanges />\r\n    </PageStruct>\r\n  );\r\n});\r\n","import { observer, useLocalStore } from \"mobx-react-lite\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport _ from \"lodash\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport ResizeObserver from \"@juggle/resize-observer\";\r\n\r\nexport const AutoSizeScrollBar = observer(function AutoSizeScrollBar(props: {\r\n  children: any;\r\n  minWidth?: number;\r\n}) {\r\n  const el = useRef(null as HTMLDivElement);\r\n\r\n  const { minWidth = 10 } = props;\r\n\r\n  const state = useLocalStore(() => ({\r\n    width: 10,\r\n    height: 10,\r\n\r\n    setWH: _.debounce((w, h) => {\r\n      if (w) {\r\n        state.width = w;\r\n      }\r\n      if (h) {\r\n        state.height = h;\r\n      }\r\n\r\n      state.parentResizing = false;\r\n    }, 300),\r\n\r\n    parentResizing: false\r\n  }));\r\n\r\n  useEffect(() => {\r\n    const parentElement = el.current.parentElement.parentElement.parentElement;\r\n\r\n    const ro = new ResizeObserver(entries => {\r\n      const e1 = entries[0];\r\n\r\n      const width = e1.contentRect.width;\r\n      const height = e1.contentRect.height;\r\n      state.parentResizing = true;\r\n      state.setWH(width, height);\r\n    });\r\n\r\n    ro.observe(parentElement);\r\n\r\n    return () => {\r\n      ro.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const width = state.width > minWidth ? state.width : minWidth;\r\n\r\n  return (\r\n    <Scrollbars\r\n      style={{ maxHeight: state.height, width }}\r\n      className={\"AutoSizeScrollBar\"}\r\n      renderThumbVertical={() => <div className={\"ThumbStyle\"} />}\r\n      renderThumbHorizontal={() => <div className={\"ThumbStyle\"} />}\r\n    >\r\n      <div\r\n        ref={el}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          display: state.parentResizing ? \"none\" : \"block\"\r\n        }}\r\n      >\r\n        {props.children}\r\n      </div>\r\n    </Scrollbars>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {observer, useLocalStore} from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport {Icon, Tabs} from \"antd\";\r\nimport {Exchange} from \"../../state/res/Exchange\";\r\nimport {Market} from \"../../state/res/Market\";\r\nimport {FormatQuote} from \"../Util\";\r\nimport {useStore} from \"../../state\";\r\nimport {AutoSizeScrollBar} from \"../AutoSizeScrollBar\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport const MarketsView = observer(function MarketsView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const { exchange } = props;\r\n\r\n  const { uiStates } = useStore();\r\n\r\n  const state = useLocalStore(() => ({\r\n    get quotes(): string[] {\r\n      const s = new Set<string>();\r\n      const list = exchange.allMarkets;\r\n      list.forEach(o => {\r\n        s.add(o.spec.quote);\r\n      });\r\n      return Array.from(s);\r\n    }\r\n  }));\r\n\r\n  const renderCurrentAccount = () => {\r\n    let account = uiStates.account; //store.accounts.all.find(o => o.exchange === exchange);\r\n\r\n    if (!account) {\r\n      return null;\r\n    } else {\r\n      const balances = account.balances.balancesNotZero;\r\n\r\n      const allMarkets = account.exchange.allMarkets;\r\n      const allQuotes = Array.from(new Set(allMarkets.map(o => o.spec.quote)));\r\n\r\n      const balancesBases = balances.map(o => o.base);\r\n\r\n      const markets = allMarkets.filter(\r\n        o =>\r\n          balancesBases.includes(o.spec.quote) &&\r\n          balancesBases.includes(o.spec.base)\r\n      );\r\n\r\n      return (\r\n        <TabPane tab={<Icon type=\"bank\" />} key={account.name}>\r\n          <MarketsList markets={markets} />\r\n        </TabPane>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\"Markets\"}\r\n      className={\"Markets\"}\r\n      updatableRes={exchange}\r\n      updateImmediately={false}\r\n    >\r\n      <Tabs defaultActiveKey=\"1\" onChange={() => {}}>\r\n        {renderCurrentAccount()}\r\n        {state.quotes.map(v => {\r\n          const markets = exchange.allMarkets.filter(\r\n            o => o.spec.active && o.spec.quote === v\r\n          );\r\n          return (\r\n            <TabPane tab={v} key={v}>\r\n              <MarketsList markets={markets} />\r\n            </TabPane>\r\n          );\r\n        })}\r\n      </Tabs>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst MarketsList = observer(function MarketsTable(props: {\r\n  markets: Market[];\r\n}) {\r\n  const { markets } = props;\r\n\r\n  const { uiStates } = useStore();\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      <AutoSizeScrollBar minWidth={300}>\r\n        <div className={\"MarketsList\"}>\r\n          {markets.map(row => (\r\n            <div\r\n              key={row.spec.symbol}\r\n              className={\"MarketsListItem\"}\r\n              onClick={() => {\r\n                uiStates.changeMarket(row);\r\n              }}\r\n            >\r\n              <div className=\"exchangeName\">{row.spec.symbol}</div>\r\n              <div className=\"latestPrice\">\r\n                {row.lastTicker && (\r\n                  <FormatQuote val={row.lastTicker.close} spec={row.spec} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </AutoSizeScrollBar>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {FormatBase, FormatQuote, FormatTimeAuto, TickItem} from \"../Util\";\r\nimport \"./index.scss\";\r\nimport {TradeModel} from \"../../model/models\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport {Market} from \"../../state/res/Market\";\r\nimport {AutoSizeScrollBar} from \"../AutoSizeScrollBar\";\r\n\r\nexport const RecentTrades = observer(function RecentTrades(props: {\r\n  market: Market;\r\n}) {\r\n  const { market } = props;\r\n  const res = market.recentTrades;\r\n  const list = res.trades;\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\"Recent Trades\"}\r\n      className={\"RecentTrades\"}\r\n      updatableRes={res}\r\n    >\r\n      <AutoSizeScrollBar>\r\n        <div className={\"TradeHistoryContainer\"}>\r\n          {list.map(o => (\r\n            <RecentTradesItem key={o.id} trade={o} market={market} />\r\n          ))}\r\n        </div>\r\n      </AutoSizeScrollBar>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst RecentTradesItem = observer(function RecentTradesItem(props: {\r\n  trade: TradeModel;\r\n  market: Market;\r\n}) {\r\n  const { trade, market } = props;\r\n\r\n  return (\r\n    <div className={`TradeHistoryContainer_item new`}>\r\n      <div className=\"volume\">\r\n        <FormatBase val={trade.amount} spec={market.spec} />\r\n      </div>\r\n      <div className={`price ${trade.side}`}>\r\n        <TickItem tick={trade.tick} />\r\n        <FormatQuote val={trade.price} spec={market.spec} />\r\n      </div>\r\n      <div className=\"time\">\r\n        <FormatTimeAuto val={trade.timestamp} />\r\n      </div>\r\n      {/*<div className=\"side\">{trade.side === eSide.buy ? \"B\" : \"S\"}</div>*/}\r\n    </div>\r\n  );\r\n});\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { observer, useLocalStore } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { eSide, OrderBookModel } from \"../../model/models\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport _ from \"lodash\";\r\nimport { Button } from \"antd\";\r\nimport { Market } from \"../../state/res/Market\";\r\nimport { FormatBase, FormatQuote } from \"../Util\";\r\nimport { AutoSizeScrollBar } from \"../AutoSizeScrollBar\";\r\nimport { useMeasure } from \"react-use\";\r\n\r\nexport const OrderBook = observer(function OrderBook(props: {\r\n  market: Market;\r\n}) {\r\n  const { market } = props;\r\n  const res = market.orderBook;\r\n\r\n  const [ref, size] = useMeasure();\r\n\r\n  const state = useLocalStore(() => ({\r\n    showNum: 14,\r\n    side: eSide.both as eSide,\r\n    get asks() {\r\n      let items = [];\r\n      if (state.side === eSide.both) {\r\n        items = _.take(res.asks, state.showNum);\r\n      } else {\r\n        items = res.asks; //_.take(, state.showNum * 2);\r\n      }\r\n      const reversed = items.reverse();\r\n      return reversed;\r\n    },\r\n    get bids() {\r\n      if (state.side === eSide.both) {\r\n        return _.take(res.bids, state.showNum);\r\n      } else {\r\n        return res.bids; // _.take(res.bids, state.showNum * 2);\r\n      }\r\n    },\r\n\r\n    setSide(side: eSide) {\r\n      state.side = side;\r\n    },\r\n\r\n    setShowNum: _.throttle((num: number) => {\r\n      state.showNum = num;\r\n    }, 500)\r\n  }));\r\n\r\n  useEffect(() => {\r\n    // console.log(\"AAA\", size.height);\r\n    state.setShowNum(Math.floor(size.height / 40));\r\n  }, [size.height]);\r\n\r\n  const { asks, bids } = state;\r\n\r\n  const renderList = (list: OrderBookModel[], side: string) => {\r\n    // return  <div>AA</div>\r\n\r\n    return (\r\n      <div className={side}>\r\n        {list.map((o, index) => (\r\n          <OrderBookItem key={o.price} item={o} market={market} />\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\"OrderBook\"}\r\n      className={\"OrderBook\"}\r\n      updatableRes={res}\r\n    >\r\n      <div style={{ height: \"100%\" }}>\r\n        <div className={\"OrderBookContainer\"}>\r\n          <div className=\"OrderBookInnerHeader\">\r\n            <div className=\"sideBtns\">\r\n              <Button\r\n                size={\"small\"}\r\n                icon=\"vertical-align-middle\"\r\n                onClick={() => state.setSide(eSide.both)}\r\n              />\r\n              <Button\r\n                size={\"small\"}\r\n                icon=\"vertical-align-top\"\r\n                onClick={() => state.setSide(eSide.buy)}\r\n              />\r\n              <Button\r\n                size={\"small\"}\r\n                icon=\"vertical-align-bottom\"\r\n                onClick={() => state.setSide(eSide.sell)}\r\n              />\r\n            </div>\r\n          </div>\r\n          {state.side === eSide.both ? (\r\n            <div ref={ref} className=\"centeredContent\">\r\n              {renderList(asks, \"asks\")}\r\n              <div className={\"MarketPrice\"}>\r\n                <MarketPrice market={market} />\r\n              </div>\r\n              {renderList(bids, \"bids\")}\r\n            </div>\r\n          ) : (\r\n            <div className={\"sideContent\"}>\r\n              <div className={\"MarketPrice\"}>\r\n                <MarketPrice market={market} />\r\n              </div>\r\n              <div className={\"sideContentList\"}>\r\n                <AutoSizeScrollBar>\r\n                  {state.side === eSide.buy && renderList(asks, \"asks\")}\r\n                  {state.side === eSide.sell && renderList(bids, \"bids\")}\r\n                </AutoSizeScrollBar>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst OrderBookItem = observer(function OrderBookItem(props: {\r\n  item: OrderBookModel;\r\n  market: Market;\r\n}) {\r\n  const { item, market } = props;\r\n\r\n  return (\r\n    <div className=\"OrderBookItem\">\r\n      <div className={\"price\"}>\r\n        <FormatQuote val={item.price} spec={market.spec} />\r\n      </div>\r\n\r\n      <HighLight className={\"size\"} updateDep={item.size}>\r\n        <FormatBase val={item.size} spec={market.spec} />\r\n      </HighLight>\r\n      <div className={\"accumulateSize\"}>\r\n        <FormatBase val={item.accumulateSize} spec={market.spec} />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst MarketPrice = observer(function MarketPrice(props: { market: Market }) {\r\n  const { market } = props;\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <FormatQuote val={market.lastPrice} spec={market.spec} />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst HighLight = (props: {\r\n  className: string;\r\n  updateDep: any;\r\n  children: any;\r\n  highLightImmediate?: boolean;\r\n}) => {\r\n  const { className, children, updateDep, highLightImmediate } = props;\r\n  const el = useRef(null as HTMLDivElement);\r\n\r\n  const [state, setState] = useState(() => {\r\n    return {\r\n      resetAnim() {\r\n        const element = el.current;\r\n        // -> removing the class\r\n        element.classList.remove(\"new\");\r\n        void element.offsetWidth;\r\n        element.classList.add(\"new\");\r\n      }\r\n    };\r\n  });\r\n\r\n  const [ins] = useState(() => ({\r\n    onUpdateFunction() {}\r\n  }));\r\n\r\n  useEffect(() => {\r\n    ins.onUpdateFunction();\r\n  }, [updateDep]);\r\n\r\n  useEffect(() => {\r\n    if (highLightImmediate) {\r\n      state.resetAnim();\r\n    }\r\n    ins.onUpdateFunction = state.resetAnim;\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={el} className={`${className} highLight`}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { observer, useLocalStore } from \"mobx-react-lite\";\r\nimport { Button, Form, Input, Modal, Tabs, Tag } from \"antd\";\r\nimport \"./index.scss\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport { useStore } from \"../../state\";\r\nimport { Exchange } from \"../../state/res/Exchange\";\r\nimport { WrappedFormUtils } from \"antd/lib/form/Form\";\r\nimport { Account } from \"../../state/res/Account\";\r\nimport { BalanceModel } from \"../../model/models\";\r\nimport { MobTable } from \"../Util\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport const AccountsView = observer(function AccountsView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const { exchange } = props;\r\n\r\n  const { accounts, uiStates } = useStore();\r\n\r\n  const formRef = useRef(null as any);\r\n\r\n  const state = useLocalStore(() => ({\r\n    visible: false,\r\n\r\n    addAccount(name, cctxOptions) {\r\n      accounts.createAccountAndSaveLs(exchange, name, cctxOptions).then(() => {\r\n        console.log(\"添加成功\");\r\n        state.visible = false;\r\n      });\r\n    },\r\n\r\n    handleCreate() {\r\n      const form = formRef.current.props.form as WrappedFormUtils;\r\n      form.validateFields((err, values) => {\r\n        if (err) {\r\n          return;\r\n        }\r\n        console.log(\"Received values of form: \", values);\r\n\r\n        state.addAccount(values.name, {\r\n          apiKey: values.apiKey,\r\n          secret: values.secret\r\n        });\r\n      });\r\n    },\r\n\r\n    activeAccount(account: Account) {\r\n      uiStates.account = account;\r\n      accounts.lsLatestAccountSet(account);\r\n    }\r\n  }));\r\n\r\n  // Automatic activation of the latest account\r\n  useEffect(() => {\r\n    const account = accounts.lsLatestAccountGetFromExchange(exchange);\r\n    if (account) {\r\n      state.activeAccount(account);\r\n    }\r\n  }, []);\r\n\r\n  const list = accounts.all.filter(o => o.exchange === exchange);\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={<div>Accounts in:{exchange.exchange}</div>}\r\n      updatableRes={accounts}\r\n    >\r\n      <div style={{ padding: 12 }}>\r\n        <Button\r\n          type={\"primary\"}\r\n          onClick={() => {\r\n            state.visible = true;\r\n          }}\r\n        >\r\n          add\r\n        </Button>\r\n      </div>\r\n\r\n      <AccountCreateForm\r\n        wrappedComponentRef={formRef as any}\r\n        visible={state.visible as any}\r\n        onCancel={() => {\r\n          state.visible = false;\r\n        }}\r\n        onCreate={() => {\r\n          state.handleCreate();\r\n        }}\r\n      />\r\n\r\n      <MobTable<Account>\r\n        size={\"small\"}\r\n        dataSource={list}\r\n        rowKey={row => {\r\n          return row.name;\r\n        }}\r\n        columns={[\r\n          {\r\n            dataIndex: \"name\",\r\n            render: (v, row) => (\r\n              <Tag\r\n                color=\"gold\"\r\n                onClick={() => {\r\n                  state.activeAccount(row);\r\n                }}\r\n              >\r\n                {row.name}\r\n              </Tag>\r\n            )\r\n          },\r\n\r\n          {\r\n            dataIndex: \"action\",\r\n            render: (v, row) => (\r\n              <div>\r\n                <Button\r\n                  type={\"danger\"}\r\n                  size={\"small\"}\r\n                  onClick={() => {\r\n                    accounts.lsAccountsRemove(row.name);\r\n                  }}\r\n                >\r\n                  delete\r\n                </Button>\r\n              </div>\r\n            )\r\n          }\r\n        ]}\r\n      />\r\n\r\n      {uiStates.account && (\r\n        <UserAsset key={uiStates.account.name} account={uiStates.account} />\r\n      )}\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst AccountCreateForm = Form.create<{\r\n  visible;\r\n  onCancel;\r\n  onCreate;\r\n  form;\r\n  wrappedComponentRef;\r\n}>({ name: \"AccountCreateForm\" })(\r\n  class extends React.Component {\r\n    render() {\r\n      const { visible, onCancel, onCreate, form } = this.props as any;\r\n      const { getFieldDecorator } = form;\r\n      return <HookForm {...this.props} />;\r\n    }\r\n  }\r\n);\r\n\r\nfunction HookForm(props: any) {\r\n  const { visible, onCancel, onCreate, form } = props;\r\n  const { getFieldDecorator } = form;\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Create An Account\"\r\n      okText=\"Create\"\r\n      onCancel={onCancel}\r\n      onOk={onCreate}\r\n    >\r\n      <Form layout=\"vertical\">\r\n        <Form.Item label=\"name\">\r\n          {getFieldDecorator(\"name\", {\r\n            rules: [\r\n              {\r\n                required: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"apiKey\">\r\n          {getFieldDecorator(\"apiKey\", {\r\n            rules: [\r\n              {\r\n                required: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"secret\">\r\n          {getFieldDecorator(\"secret\", {\r\n            rules: [\r\n              {\r\n                required: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nconst UserAsset = observer(function UserAsset(props: { account: Account }) {\r\n  const { account } = props;\r\n\r\n  const { uiStates } = useStore();\r\n\r\n  const list = account.balances.balancesNotZero;\r\n\r\n  return (\r\n    <div className={\"UserAsset\"}>\r\n      <UpdatableCard\r\n        title={<div>Balances</div>}\r\n        updatableRes={account.balances}\r\n      >\r\n        <h4>USDT Value : {account.balances.getAllBalanceValue(\"USDT\")}</h4>\r\n\r\n        <MobTable<BalanceModel>\r\n          size={\"small\"}\r\n          dataSource={list}\r\n          rowKey={\"base\"}\r\n          columns={[\r\n            {\r\n              dataIndex: \"base\",\r\n              render: (v, row) => {\r\n                const coinSymbol = row.base;\r\n                const markets = account.exchange.getMarketsByCoinSymbol(\r\n                  coinSymbol\r\n                );\r\n                const loading = markets.every(o => o.loading);\r\n\r\n                return (\r\n                  <div>\r\n                    {row.base} {/*{markets.length && (*/}\r\n                    {/*  <Button*/}\r\n                    {/*    type={\"primary\"}*/}\r\n                    {/*    shape=\"circle\"*/}\r\n                    {/*    icon=\"sync\"*/}\r\n                    {/*    onClick={async () => {*/}\r\n                    {/*      for (const market of markets) {*/}\r\n                    {/*        await market.updateRes();*/}\r\n                    {/*      }*/}\r\n                    {/*    }}*/}\r\n                    {/*    loading={loading}*/}\r\n                    {/*  />*/}\r\n                    {/*)}*/}\r\n                  </div>\r\n                );\r\n              }\r\n            },\r\n            {\r\n              dataIndex: \"total\"\r\n            }\r\n            // mCol({ dataIndex: \"free\" }),\r\n            // mCol({ dataIndex: \"used\" })\r\n          ]}\r\n          // expandedRowRender={row => {\r\n          //   return (\r\n          //     <Ob\r\n          //       r={() => {\r\n          //         const coinSymbol = row.key;\r\n          //         const markets = account.exchange.getMarketsByCoinSymbol(\r\n          //           coinSymbol\r\n          //         );\r\n          //\r\n          //         return (\r\n          //           <div className={\"orderCol\"}>\r\n          //             {markets.map(o => {\r\n          //               // account.exchange.marketsMap.get(o.spec.symbol);\r\n          //               const { profit, rate } = account.computeProfitAndRate(\r\n          //                 o\r\n          //               );\r\n          //\r\n          //               const accountOrder = account.safeGetAccountOrder(o);\r\n          //               const orderCount = accountOrder.all.length;\r\n          //\r\n          //               return (\r\n          //                 <div key={o.spec.quote} className={\"orderColItem\"}>\r\n          //                   <div className=\"btn\">\r\n          //                     <Button\r\n          //                       type={\"primary\"}\r\n          //                       shape=\"circle\"\r\n          //                       icon=\"sync\"\r\n          //                       onClick={async () => {\r\n          //                         await accountOrder.updateRes();\r\n          //                         await o.updateRes();\r\n          //                       }}\r\n          //                       loading={o.loading && accountOrder.loading}\r\n          //                     />\r\n          //                   </div>\r\n          //                   <div className=\"quote\">{o.spec.quote}:</div>\r\n          //                   <div className=\"viewOrder\">\r\n          //                     <Badge count={orderCount}>\r\n          //                       <Button\r\n          //                         style={{ marginLeft: 8 }}\r\n          //                         onClick={() => {\r\n          //                           uiStates.market = o;\r\n          //                         }}\r\n          //                       >\r\n          //                         切换市场\r\n          //                       </Button>\r\n          //                     </Badge>\r\n          //                   </div>\r\n          //                   <div className=\"profit\">\r\n          //                     <FormatValue val={profit} market={o.spec} /> (\r\n          //                     <FormatPercentage val={rate} />)\r\n          //                   </div>\r\n          //                 </div>\r\n          //               );\r\n          //             })}\r\n          //           </div>\r\n          //         );\r\n          //       }}\r\n          //     />\r\n          //   );\r\n          // }}\r\n        />\r\n      </UpdatableCard>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { BalanceModel } from \"../../model/models\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport { Badge, Progress } from \"antd\";\r\nimport { FormatPercentage, FormatQuote, Ob } from \"../Util\";\r\nimport { Account } from \"../../state/res/Account\";\r\nimport { Market } from \"../../state/res/Market\";\r\n\r\nexport const CurrentBalance = observer(function CurrentBalance(props: {\r\n  account: Account;\r\n  market: Market;\r\n}) {\r\n  const { market, account } = props;\r\n\r\n  // const account = uiStates.account; //accounts.all.find((o)=>o.)  //accounts.accountsMap.get()\r\n\r\n  const res = account.balances;\r\n  const balance = res.map.get(market.spec.base);\r\n\r\n  if (!res || !balance) {\r\n    return null;\r\n  }\r\n\r\n  const userOrder = account.safeGetAccountOrder(market);\r\n  const profitByMarketPrice = account.computeProfitAndRateByMarketPrice(market);\r\n  const profitByOrderBook = account.computeProfitAndRateByOrderBook(market);\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\r\n        <div>\r\n          {account.name}-<Ob r={() => market.spec.symbol} />\r\n        </div>\r\n      }\r\n      className={\"BalanceCard\"}\r\n      updatableRes={market}\r\n    >\r\n      <Scrollbars style={{ height: 400 }} autoHide={true}>\r\n        <div className={\"BalanceCardContainer\"}>\r\n          <BalanceItem balance={balance} />\r\n\r\n          <div className={\"ProfitSection\"}>\r\n            <h3>Profit (By Latest price = Market Price)</h3>\r\n            <div>\r\n              <FormatQuote\r\n                val={profitByMarketPrice.profit}\r\n                spec={market.spec}\r\n                withUnit\r\n              />\r\n              / <FormatPercentage val={profitByMarketPrice.rate} />\r\n            </div>\r\n\r\n            <h3>Profit (By OrderBook )</h3>\r\n            <div>\r\n              <FormatQuote\r\n                val={profitByOrderBook.profit}\r\n                spec={market.spec}\r\n                withUnit\r\n              />\r\n              / <FormatPercentage val={profitByOrderBook.rate} />\r\n            </div>\r\n\r\n            <div className={\"profitRow2\"}>\r\n              <div>\r\n                <Badge color=\"red\" text=\"Cost\" />\r\n                <FormatQuote\r\n                  val={account.computeOutMoneyByHistory(userOrder.all)}\r\n                  spec={market.spec}\r\n                  withUnit\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Badge color=\"green\" text=\"Current Value\" />\r\n                <FormatQuote\r\n                  val={account.computeCurrentValue(market)}\r\n                  spec={market.spec}\r\n                  withUnit\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Badge color=\"green\" text=\"OrderBook Value\" />\r\n                <FormatQuote\r\n                  val={account.computeOrderBookValue(market)}\r\n                  spec={market.spec}\r\n                  withUnit\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Scrollbars>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst BalanceItem = observer(function BalanceItem(props: {\r\n  balance: BalanceModel;\r\n}) {\r\n  const { balance } = props;\r\n  const usedPercent = (balance.used / balance.total) * 100;\r\n  const freePercent = (balance.free / balance.total) * 100;\r\n\r\n  const renderRow = (color: string, percent: number, text: string, val) => {\r\n    return (\r\n      <div className={\"BalanceItemRow\"}>\r\n        <Progress percent={percent} size=\"small\" showInfo={false} />\r\n        <div className={\"BalanceItemRowDown\"}>\r\n          <Badge status=\"success\" text={text} />\r\n          <div className={\"BalanceItemRowText\"}>{balance.total}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={\"BalanceItem\"}>\r\n      {renderRow(\"green\", 100, \"Total\", balance.total)}\r\n      {renderRow(\"green\", freePercent, \"Free\", balance.free)}\r\n      {renderRow(\"green\", usedPercent, \"Used\", balance.used)}\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {observer, useLocalStore} from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport {OrderModel} from \"../../model/models\";\r\nimport {UpdatableCard} from \"../UpdatableCard\";\r\nimport {Button, Tabs} from \"antd\";\r\nimport {FormatTimeAuto, MobTable, Ob} from \"../Util\";\r\nimport {Account} from \"../../state/res/Account\";\r\nimport {Market} from \"../../state/res/Market\";\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nexport const AccountOrders = observer(function AccountOrders(props: {\r\n  account: Account;\r\n  market: Market;\r\n}) {\r\n  const { account, market } = props;\r\n\r\n  const res = account.safeGetAccountOrder(market);\r\n\r\n  const state = useLocalStore(() => ({\r\n    activeTab: \"active\" //active / all\r\n  }));\r\n\r\n  if (!res) {\r\n    return null;\r\n  }\r\n\r\n  const renderTable = orders => {\r\n    return (\r\n      <MobTable<OrderModel>\r\n        size={\"small\"}\r\n        dataSource={orders}\r\n        rowKey={\"id\"}\r\n        columns={[\r\n          {\r\n            dataIndex: \"symbol\",\r\n            render(v, row) {\r\n              let isLatestClosedOrder = row === res.latestClosedOrder;\r\n              return (\r\n                <span>\r\n                  {v}\r\n\r\n                  {!isLatestClosedOrder && (\r\n                    <Button\r\n                      size={\"small\"}\r\n                      onClick={() => {\r\n                        res.setLatestClosedOrder(row);\r\n                      }}\r\n                    >\r\n                      latest order\r\n                    </Button>\r\n                  )}\r\n                </span>\r\n              );\r\n            }\r\n          },\r\n          {\r\n            dataIndex: \"timestamp\",\r\n            render: v => <FormatTimeAuto val={v} />\r\n          },\r\n          {\r\n            dataIndex: \"side\"\r\n          },\r\n          {\r\n            dataIndex: \"type\"\r\n          },\r\n          {\r\n            dataIndex: \"status\"\r\n          },\r\n\r\n          {\r\n            dataIndex: \"amount\"\r\n          },\r\n          {\r\n            dataIndex: \"cost\"\r\n          },\r\n          {\r\n            dataIndex: \"price\"\r\n          },\r\n          {\r\n            dataIndex: \"filled\"\r\n          },\r\n          {\r\n            dataIndex: \"remaining\"\r\n          }\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\r\n        <div>\r\n          Orders <Ob r={() => market.spec.symbol} />\r\n        </div>\r\n      }\r\n      className={\"UserOrders\"}\r\n      updatableRes={res}\r\n    >\r\n      <div className={\"UserOrdersContainer\"}>\r\n        <Tabs\r\n          defaultActiveKey=\"all\"\r\n          onChange={activeKey => {\r\n            state.activeTab = activeKey;\r\n          }}\r\n        >\r\n          <TabPane tab=\"Active\" key=\"active\">\r\n            {renderTable(res.activeOrders)}\r\n          </TabPane>\r\n          <TabPane tab=\"All\" key=\"all\">\r\n            {renderTable(res.all)}\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n","import React, { useRef } from \"react\";\r\nimport { observer, useLocalStore } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { Card } from \"antd\";\r\nimport { toJS } from \"mobx\";\r\nimport _ from \"lodash\";\r\nimport { CommonSubLs } from \"../../Util\";\r\nimport { useStore } from \"../../state\";\r\nimport { MarketsView } from \"../MarketsView\";\r\n\r\nimport RGL, { WidthProvider } from \"react-grid-layout\";\r\nimport { AutoSizeScrollBar } from \"../AutoSizeScrollBar\";\r\nimport { RecentTrades } from \"../RecentTrades\";\r\nimport { OrderBook } from \"../OrderBook\";\r\nimport { AccountsView } from \"../AccountsView\";\r\nimport { CurrentBalance } from \"../CurrentBalance\";\r\nimport { AccountOrders } from \"../AccountOrders\";\r\n\r\nconst ReactGridLayout = WidthProvider(RGL);\r\n\r\nexport const AppGridContainer = observer(function AppGridContainer(props: {}) {\r\n  const store = useStore();\r\n\r\n  const el = useRef(null as HTMLDivElement);\r\n\r\n  const state = useLocalStore(() => {\r\n    // save/load layout\r\n\r\n    const ls = new CommonSubLs(store.config.ls, \"AppGridContainer\");\r\n    const getLsLayout = () => {\r\n      const layout = ls.lsGet(\"layout\", defaultLayout);\r\n      return layout;\r\n    };\r\n\r\n    return {\r\n      gridLayout: getLsLayout(),\r\n      getCurrentLayout() {\r\n        return toJS(state.gridLayout);\r\n      },\r\n      onLayoutChange: _.debounce(layout => {\r\n        ls.lsSet(\"layout\", layout);\r\n      }, 1000)\r\n    };\r\n  });\r\n\r\n  const blocks = {\r\n    MarketsView: <BlockMarketsView />,\r\n    OrderBook: <BlockOrderBook />,\r\n    RecentTrades: <BlockRecentTrades />,\r\n    AccountsView: <BlockAccountsView />,\r\n    CurrentBalance: <BlockCurrentBalance />,\r\n    AccountOrders: <BlockAccountOrders />\r\n\r\n    // xxx: <BlockXXX />\r\n  };\r\n\r\n  const safeGetComponent = key => {\r\n    let comp = blocks[key];\r\n    if (!comp) {\r\n      comp = <div>nothing</div>;\r\n    }\r\n    return comp;\r\n  };\r\n\r\n  const layout = state.getCurrentLayout();\r\n\r\n  const generateDOM = () => {\r\n    return layout.map(row => (\r\n      <div key={row.i}>{safeGetComponent(row.i)}</div>\r\n    )) as any;\r\n  };\r\n\r\n  return (\r\n    <div className={\"AppGridContainer\"} ref={el}>\r\n      <ReactGridLayout\r\n        className=\"GridLayoutLayout\"\r\n        layout={layout}\r\n        onLayoutChange={state.onLayoutChange}\r\n        cols={20}\r\n        rowHeight={24}\r\n        margin={[2, 2]}\r\n        // verticalCompact={false}\r\n\r\n        // A CSS selector for tags that will not be draggable.\r\n        // For example: draggableCancel:'.MyNonDraggableAreaClassName'\r\n        // If you forget the leading . it will not work.\r\n        draggableHandle={\".ant-card-head\"}\r\n        draggableCancel={\".ant-card-body\"}\r\n        // width={1200}\r\n      >\r\n        {generateDOM()}\r\n        {/*<div key=\"MarketsView\">*/}\r\n        {/*  <BlockMarketsView />*/}\r\n        {/*</div>*/}\r\n        {/*<div key=\"OrderBook\">b</div>*/}\r\n        {/*<div key=\"RecentTrades\">c</div>*/}\r\n      </ReactGridLayout>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst defaultLayout = [\r\n  { w: 6, h: 15, x: 0, y: 62, i: \"xxx\", moved: false, static: false },\r\n  { w: 6, h: 21, x: 0, y: 0, i: \"MarketsView\", moved: false, static: false },\r\n  { w: 6, h: 21, x: 6, y: 0, i: \"OrderBook\", moved: false, static: false },\r\n  { w: 6, h: 21, x: 12, y: 0, i: \"RecentTrades\", moved: false, static: false },\r\n  { w: 6, h: 22, x: 0, y: 21, i: \"AccountsView\", moved: false, static: false },\r\n  {\r\n    w: 6,\r\n    h: 22,\r\n    x: 6,\r\n    y: 21,\r\n    i: \"CurrentBalance\",\r\n    moved: false,\r\n    static: false\r\n  },\r\n  { w: 20, h: 19, x: 0, y: 43, i: \"AccountOrders\", moved: false, static: false }\r\n];\r\n\r\nconst BlockMarketsView = observer(function BlockMarketsView() {\r\n  const { uiStates } = useStore();\r\n  const exchange = uiStates.exchange;\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      {exchange && <MarketsView key={exchange.exchange} exchange={exchange} />}\r\n    </div>\r\n  );\r\n});\r\n\r\nconst NeedMarket = <div>Need to select a market</div>;\r\n\r\nconst BlockRecentTrades = observer(function BlockRecentTrades() {\r\n  const { uiStates } = useStore();\r\n  const { market } = uiStates;\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      {market ? (\r\n        <RecentTrades key={market.spec.symbol} market={market} />\r\n      ) : (\r\n        NeedMarket\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nconst BlockOrderBook = observer(function BlockOrderBook(props) {\r\n  const { uiStates } = useStore();\r\n  const { market } = uiStates;\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      {market ? (\r\n        <OrderBook key={uiStates.market.spec.symbol} market={uiStates.market} />\r\n      ) : (\r\n        NeedMarket\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nconst BlockAccountsView = observer(function BlockAccountsView(props) {\r\n  const { uiStates } = useStore();\r\n  const { exchange } = uiStates;\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      {exchange ? (\r\n        <AccountsView key={exchange.exchange} exchange={exchange} />\r\n      ) : (\r\n        <div>AccountsView</div>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nconst BlockCurrentBalance = observer(function BlockCurrentBalance(props) {\r\n  const { uiStates } = useStore();\r\n  const { exchange, market, account } = uiStates;\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      {market && account ? (\r\n        <CurrentBalance\r\n          key={account.name + market.spec.symbol}\r\n          market={market}\r\n          account={account}\r\n        />\r\n      ) : (\r\n        <div>Balance</div>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nconst BlockAccountOrders = observer(function BlockAccountOrders(props) {\r\n  const { uiStates } = useStore();\r\n  const { exchange, market, account } = uiStates;\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      {market && account ? (\r\n        <AccountOrders\r\n          key={uiStates.market.spec.symbol + uiStates.account.name}\r\n          account={uiStates.account}\r\n          market={uiStates.market}\r\n        />\r\n      ) : (\r\n        <div>account order</div>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nconst BlockXXX = observer(function BlockOrderBook(props) {\r\n  const { uiStates } = useStore();\r\n  const { market } = uiStates;\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      <Card\r\n        headStyle={{ color: \"black\" }}\r\n        bodyStyle={{ color: \"black\" }}\r\n        size=\"small\"\r\n        title=\"Small size card\"\r\n        extra={<a href=\"#\">More</a>}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            background: \"red\",\r\n            height: \"100%\"\r\n          }}\r\n        >\r\n          <AutoSizeScrollBar>\r\n            <p>Card content</p>\r\n            <p>Card content</p>\r\n            <p>Card content</p>\r\n            <div\r\n              style={{\r\n                width: 500,\r\n                height: 200,\r\n                background: \"#6547ac\",\r\n                border: \"8px solid yellow\"\r\n              }}\r\n            >\r\n              AAAa\r\n            </div>\r\n          </AutoSizeScrollBar>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { useStore } from \"../../state\";\r\nimport { Exchange } from \"../../state/res/Exchange\";\r\nimport { AppGridContainer } from \"../AppGridContainer\";\r\n\r\nexport const TradeMainView = observer(function TradeMainView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const { exchange } = props;\r\n\r\n  const { uiStates } = useStore();\r\n\r\n  return (\r\n    <div className={\"TradeMainView\"}>\r\n      <AppGridContainer />\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport { useStore } from \"../../state\";\r\nimport { Exchange } from \"../../state/res/Exchange\";\r\nimport { TradeMainView } from \"../TradeMainView\";\r\n\r\nexport const ExchangeView = observer(function ExchangeView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const { exchange } = props;\r\n  const { uiStates } = useStore();\r\n\r\n  const list = exchange.allMarkets;\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={<div>Exchange - {exchange.exchange}</div>}\r\n      updatableRes={exchange}\r\n    >\r\n      <TradeMainView exchange={exchange} />\r\n    </UpdatableCard>\r\n  );\r\n});\r\n","import {observer} from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {PageStruct} from \"../Util\";\r\nimport {ExchangeView} from \"../../components/ExchangeView\";\r\nimport {useStore} from \"../../state\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Empty} from \"antd\";\r\n\r\nexport const ExchangePage = observer(function ExchangePage() {\r\n  const { exchanges, uiStates } = useStore();\r\n\r\n  const { exchangeKey } = useParams<{ exchangeKey: string }>();\r\n\r\n  const exchange = exchanges.exchangesMap.get(exchangeKey);\r\n\r\n  if (exchange) {\r\n    uiStates.changeExchange(exchange);\r\n  }\r\n  return (\r\n    <PageStruct>\r\n      {exchange ? (\r\n        <ExchangeView key={exchange.exchange} exchange={exchange} />\r\n      ) : (\r\n        <Empty />\r\n      )}\r\n    </PageStruct>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {HashRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport \"./index.scss\";\r\nimport {Home} from \"./Home\";\r\nimport {ExchangePage} from \"./Exchange\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home />\r\n          </Route>\r\n\r\n          <Route path={\"/exchange/:exchangeKey\"}>\r\n            <ExchangePage />\r\n          </Route>\r\n          <Redirect from=\"/exchange\" to=\"/exchange/none\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./styles/App.scss\";\r\nimport { AppRootStore } from \"./state/AppRootStore\";\r\nimport { StoreContext } from \"./state\";\r\n\r\nimport RouterApp from \"./pages/index\";\r\n\r\nconst store = (window[\"store\"] = window[\"ss\"] = new AppRootStore());\r\n\r\nconst App: React.FC = () => {\r\n  const [ready, setReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      await store.exchanges.initExchanges();\r\n      setReady(true);\r\n    };\r\n\r\n    init();\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <StoreContext.Provider value={store}>\r\n        {ready && <RouterApp />}\r\n      </StoreContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n// serviceWorker.register();\r\n"],"sourceRoot":""}