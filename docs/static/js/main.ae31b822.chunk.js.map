{"version":3,"sources":["model/models.ts","state/core/index.ts","state/AppSubStore.ts","state/Config.ts","state/res/Base.ts","Util.ts","state/res/RecentTrade.ts","state/res/OrderBook.ts","state/res/Market.ts","state/res/Exchange.ts","state/res/Exchanges.ts","state/UiStates.ts","state/res/Balance.ts","state/res/AccountOrder.ts","state/res/Account.ts","state/res/Accounts.ts","state/AppRootStore.ts","state/index.ts","pages/Util.tsx","components/Util.tsx","components/UpdatableCard/index.tsx","components/Exchanges/index.tsx","pages/Home/index.tsx","components/RecentTrades/index.tsx","components/OrderBook/index.tsx","components/MarketsView/index.tsx","components/AccountOrders/index.tsx","components/CurrentBalance/index.tsx","components/AccountsBalanceView/index.tsx","components/TradeMainView/index.tsx","components/ExchangeView/index.tsx","pages/Exchange/index.tsx","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["eSide","eTickType","SubStore","root","parent","snapShot","store","this","applySnapShot","self","obj","Object","assign","getStoreSnapShoot","keys","key","hasOwnProperty","val","getSnapShoot","Array","isArray","isObservableArray","map","item","Map","isObservableMap","itemObj","forEach","itemKey","AppSubStore","Config","ls","BrowserStore","observable","BaseResModel","loading","lastUpdateTime","Date","console","warn","forTwo","arr","handle","length","len","i","CommonSubLs","localStorageManager","rootKey","lsGet","k","dv","get","undefined","lsSet","v","set","lsRemove","RecentTrade","loadingStart","market","ccxtIns","fetchTrades","spec","symbol","trades","runInAction","_","orderBy","reverse","o1","o2","tick","zeroMinusTick","price","plusTick","minusTick","zeroPlusTick","loadingEnd","action","OrderBook","transferToOrderBookRes","originItem","size","accumulateSize","fetchOrderBook","then","data","bids","asks","Market","recentTrades","orderBook","updateRes","lastTrade","computed","Exchange","marketsMap","name","window","fetchedMarkets","fetchMarkets","items","res","fetchTickers","each","lastTicker","coinSymbol","allMarkets","filter","o","base","ccxt","exchange","createCCXTOption","from","values","urls","api","private","public","Exchanges","exchangesMap","bigone3","all","createCCXTIns","UiStates","account","Balance","fetchBalance","balances","balance","merge","balancesAll","total","AccountOrder","lsLatestClosedOrders","config","lsGetOrderKey","lsLatestClosedOrdersSet","order","lsKey","lsObj","marketSymbol","orderId","id","lsLatestClosedOrdersDelete","createLatestClosedOrderFromLs","latestClosedOrder","fetchOrders","orders","ordersObj","keyBy","status","take","indexOf","Account","accountOrdersMap","ccxtOptions","accountOrder","createOrUpdateOrdersByMarket","filled","reduce","sum","money","type","amount","side","lastPrice","safeGetAccountOrder","outValue","computeOutMoneyByHistory","palOrders","currentValue","computeCurrentValue","profit","rate","Accounts","accountsMap","lsAccounts","lsAccountsAdd","exchangeKey","cctxOption","find","push","lsAccountsRemove","accountName","remove","delete","lsAccountsGetAllAccounts","createAccountsFromLs","a","exchanges","createAccount","lsLatestAccountKey","lsLatestAccountSet","exchangeName","lsLatestAccountGetFromExchange","AppRootStore","accounts","uiStates","StoreContext","React","createContext","useStore","useContext","mobx","Header","Footer","Content","PageStruct","props","AppHeader","style","minHeight","children","observer","history","useHistory","className","theme","mode","defaultSelectedKeys","lineHeight","Item","onClick","MobTable","columns","column","title","capitalize","dataIndex","width","render","originalRender","text","row","index","Ob","r","quote","ceil","FormatPercentage","FormatTimeAuto","formatStr","isToday","format","UpdateBtn","shape","icon","TimeAgo","time","isDate","datetime","locale","TickItem","NumberSeparateFormat","fixed","num","numericString","splitNumberStringSignificantBit","accounting","toFixed","valid","zero","FormatBase","withUnit","fixedNum","precision","unit","FormatQuote","UpdatableCard","updatableRes","noContentPadding","updateImmediately","doUpdate","useCallback","useEffect","cardProps","omit","classNames","extra","list","padding","dataSource","rowKey","to","Home","RecentTrades","height","autoHide","trade","RecentTradesItem","timestamp","state","useLocalStore","showNum","both","setSide","renderList","buy","sell","OrderBookItem","MarketPrice","TabPane","MarketsView","s","Set","add","defaultActiveKey","onChange","balancesNotZero","balancesBases","markets","includes","tab","MarketsList","renderCurrentAccount","quotes","active","close","AccountOrders","activeTab","renderTable","isLatestClosedOrder","setLatestClosedOrder","activeKey","activeOrders","CurrentBalance","userOrder","computeProfitAndRate","color","BalanceItem","usedPercent","used","freePercent","free","renderRow","percent","showInfo","AccountsBalanceView","AccountsView","formRef","useRef","visible","addAccount","cctxOptions","createAccountAndSaveLs","log","handleCreate","current","form","validateFields","err","apiKey","secret","activeAccount","AccountCreateForm","wrappedComponentRef","onCancel","onCreate","create","getFieldDecorator","HookForm","Component","okText","onOk","layout","label","rules","required","UserAsset","getMarketsByCoinSymbol","every","TradeMainView","md","sm","xs","span","maxWidth","overflowX","minWidth","ExchangeView","ExchangePage","useParams","changeExchange","App","exact","path","useState","ready","setReady","initExchanges","init","Provider","value","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.ae31b822.chunk.js","sourcesContent":["export enum eSide {\r\n  buy = \"buy\",\r\n  sell = \"sell\",\r\n  both = \"both\"\r\n}\r\n\r\nexport interface BalanceModel extends ccxt.Balance {\r\n  base: string;\r\n}\r\n\r\nexport interface TickerModel extends ccxt.Ticker {}\r\n\r\nexport interface OrderModel extends ccxt.Order {}\r\n\r\nexport enum eTickType {\r\n  plusTick = \"plusTick\",\r\n  zeroPlusTick = \"ZeroPlusTick\",\r\n  minusTick = \"minusTick\",\r\n  zeroMinusTick = \"ZeroMinusTick\"\r\n}\r\n\r\nexport interface TradeModel extends ccxt.Trade {\r\n  tick: eTickType;\r\n}\r\n\r\nexport interface MarketSpecModel extends ccxt.Market {}\r\n\r\nexport interface OrderBookModel {\r\n  price: number;\r\n  size: number;\r\n  accumulateSize: number; //累计（吃到这里所需要的数量）\r\n  // side:eSide;\r\n}\r\n","import { isObservableArray, isObservableMap } from \"mobx\";\r\n\r\nexport abstract class SubStore<ParentType = any, RootStoreType = ParentType> {\r\n  store: RootStoreType; //root\r\n  parent: ParentType; // parent store\r\n\r\n  constructor(root: RootStoreType | null, parent: ParentType, snapShot?: any) {\r\n    this.store = root as RootStoreType;\r\n    if (!root) {\r\n      this.store = (this as unknown) as RootStoreType;\r\n    }\r\n    this.parent = parent;\r\n    this.applySnapShot(snapShot);\r\n  }\r\n\r\n  //store clone\r\n  static getStoreSnapShoot(obj: SubStore) {\r\n    delete obj.store;\r\n    delete obj.parent;\r\n    for (const key of Object.keys(obj)) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        let val = obj[key] as unknown;\r\n\r\n        if (val instanceof SubStore) {\r\n          obj[key] = val.getSnapShoot();\r\n        } else if (Array.isArray(val) || isObservableArray(val)) {\r\n          val = val.map(item => {\r\n            if (item instanceof SubStore) {\r\n              item = item.getSnapShoot();\r\n            }\r\n            return item;\r\n          });\r\n          obj[key] = val;\r\n        } else if (val instanceof Map || isObservableMap(val)) {\r\n          const itemObj = {};\r\n          val.forEach((item, itemKey) => {\r\n            itemObj[itemKey] = item;\r\n            if (item instanceof SubStore) {\r\n              itemObj[itemKey] = item.getSnapShoot();\r\n            }\r\n          });\r\n          obj[key] = itemObj;\r\n        } else if (typeof val === \"object\") {\r\n          obj[key] = SubStore.getStoreSnapShoot(val as any);\r\n        }\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  getSnapShoot(self = this): this {\r\n    let obj = Object.assign({}, self);\r\n    // obj = toJS(obj);\r\n    return SubStore.getStoreSnapShoot(obj) as any;\r\n  }\r\n\r\n  toJSON() {\r\n    const obj = Object.assign({}, this);\r\n    delete obj.store;\r\n    delete obj.parent;\r\n\r\n    return obj;\r\n  }\r\n\r\n  applySnapShot(snapShot: this) {\r\n    // console.warn('need to be implemented');\r\n  }\r\n}\r\n","import { SubStore } from \"./core\";\r\nimport { AppRootStore } from \"./AppRootStore\";\r\n\r\nexport class AppSubStore<ParentType> extends SubStore<\r\n  ParentType,\r\n  AppRootStore\r\n> {}\r\n","import { AppSubStore } from \"./AppSubStore\";\r\nimport { AppRootStore } from \"./AppRootStore\";\r\nimport { observable } from \"mobx\";\r\nimport * as BrowserStore from \"store\";\r\n\r\nexport class Config extends AppSubStore<AppRootStore> {\r\n  @observable version = 1;\r\n\r\n  ls: LocalStorageType;\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n    this.ls = BrowserStore;\r\n  }\r\n}\r\n\r\nexport type LocalStorageType = {\r\n  get: (key: string, defaultVal?: any) => any;\r\n  set: (key: string, val: any) => void;\r\n  remove: (key: string) => void;\r\n};\r\n","import { AppSubStore } from \"../AppSubStore\";\r\nimport { observable } from \"mobx\";\r\n\r\nexport class BaseResModel<ParentType = any> extends AppSubStore<ParentType> {\r\n  @observable loading = false;\r\n  @observable lastUpdateTime = new Date();\r\n\r\n  loadingStart() {\r\n    this.loading = true;\r\n  }\r\n\r\n  loadingEnd() {\r\n    this.loading = false;\r\n    this.lastUpdateTime = new Date();\r\n  }\r\n\r\n  updateRes() {\r\n    console.warn(\"need to be implemented\");\r\n  }\r\n}\r\n","export function forTwo<T = any>(arr: T[], handle: (current: T, next: T) => void) {\r\n  if (arr.length < 2) {\r\n    return;\r\n  }\r\n  const len = arr.length - 1;\r\n  for (let i = 0; i < len; i++) {\r\n    const current = arr[i]\r\n    const next = arr[i + 1];\r\n    handle(current, next)\r\n  }\r\n}\r\n\r\n\r\n//把 ls 的一个字段当做 map 来用\r\nexport class CommonSubLs {\r\n  rootKey: string;\r\n  ls: any;\r\n\r\n  constructor(localStorageManager, rootKey: string) {\r\n    this.rootKey = rootKey;\r\n    this.ls = localStorageManager;\r\n  }\r\n\r\n  lsGet = (k: string, dv) => {\r\n    const root = this.ls.get(this.rootKey, {});\r\n    let item = root[k];\r\n    if (item === undefined) {\r\n      item = dv;\r\n    }\r\n    return item;\r\n  };\r\n\r\n  lsSet = (k, v) => {\r\n    const root = this.ls.get(this.rootKey, {});\r\n    root[k] = v;\r\n    this.ls.set(this.rootKey, root);\r\n  };\r\n\r\n  lsRemove = k => {\r\n    const root = this.ls.get(this.rootKey, {});\r\n    delete root[k];\r\n    this.ls.set(this.rootKey, root);\r\n  };\r\n}\r\n","import { action, observable, runInAction } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { eTickType, TradeModel } from \"../../model/models\";\r\nimport { Market } from \"./Market\";\r\nimport _ from \"lodash\";\r\nimport { forTwo } from \"../../Util\";\r\n\r\nexport class RecentTrade extends BaseResModel<Market> {\r\n  get market() {\r\n    return this.parent;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.parent.ccxtIns;\r\n  }\r\n\r\n  @observable trades: TradeModel[] = [];\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    const market = this.market;\r\n    let trades = <TradeModel[]>(\r\n      await this.ccxtIns.fetchTrades(market.spec.symbol)\r\n    );\r\n\r\n    runInAction(() => {\r\n      trades = _.orderBy(trades, \"timestamp\", [\"desc\"]);\r\n      forTwo(_.reverse(trades), (o1, o2) => {\r\n        let tick = eTickType.zeroMinusTick;\r\n\r\n        if (o2.price > o1.price) {\r\n          tick = eTickType.plusTick;\r\n        } else if (o2.price < o1.price) {\r\n          tick = eTickType.minusTick;\r\n        } else if (o2.price === o1.price) {\r\n          if (\r\n            o1.tick === eTickType.plusTick ||\r\n            o1.tick === eTickType.zeroPlusTick\r\n          ) {\r\n            tick = eTickType.zeroPlusTick;\r\n          } else {\r\n            tick = eTickType.zeroMinusTick;\r\n          }\r\n        }\r\n        o2.tick = tick;\r\n      });\r\n      this.trades = _.orderBy(trades, \"timestamp\", [\"desc\"]);\r\n    });\r\n\r\n    this.loadingEnd();\r\n  }\r\n}\r\n","import { action, observable } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { OrderBookModel } from \"../../model/models\";\r\nimport { Market } from \"./Market\";\r\n\r\nexport class OrderBook extends BaseResModel<Market> {\r\n  get market() {\r\n    return this.parent;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.parent.ccxtIns;\r\n  }\r\n\r\n  @observable asks: OrderBookModel[] = [];\r\n  @observable bids: OrderBookModel[] = [];\r\n\r\n  transferToOrderBookRes = (originItem: number[]) => {\r\n    return {\r\n      price: originItem[0],\r\n      size: originItem[1],\r\n      accumulateSize: originItem[1]\r\n      // side:,\r\n    } as OrderBookModel;\r\n  };\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    const market = this.market;\r\n    await this.ccxtIns.fetchOrderBook(market.spec.symbol).then(data => {\r\n      this.bids = data.bids.map(this.transferToOrderBookRes);\r\n      this.asks = data.asks.map(this.transferToOrderBookRes);\r\n    });\r\n    this.loadingEnd();\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { Exchange } from \"./Exchange\";\r\nimport { MarketSpecModel, TickerModel } from \"../../model/models\";\r\nimport { RecentTrade } from \"./RecentTrade\";\r\nimport { OrderBook } from \"./OrderBook\";\r\n\r\nexport class Market extends BaseResModel<Exchange> {\r\n  @observable recentTrades: RecentTrade; //近期交易\r\n  @observable orderBook: OrderBook; //买卖盘\r\n  @observable spec: MarketSpecModel = null;\r\n\r\n  @observable lastTicker = null as TickerModel;\r\n\r\n  constructor(root, parent, spec: MarketSpecModel) {\r\n    super(root, parent);\r\n    this.spec = spec;\r\n    this.recentTrades = new RecentTrade(root, this);\r\n    this.orderBook = new OrderBook(root, this);\r\n  }\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    await this.recentTrades.updateRes();\r\n    await this.orderBook.updateRes();\r\n    this.loadingEnd();\r\n  }\r\n\r\n  @computed get lastTrade() {\r\n    return this.recentTrades.trades[0];\r\n  }\r\n\r\n  //市场价\r\n  @computed get lastPrice() {\r\n    if (this.lastTrade) {\r\n      return this.lastTrade.price;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n}\r\n","import { action, computed, observable, runInAction } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { Market } from \"./Market\";\r\nimport { Exchanges } from \"./Exchanges\";\r\nimport _ from \"lodash\";\r\nimport { TickerModel } from \"../../model/models\";\r\n\r\nexport class Exchange extends BaseResModel<Exchanges> {\r\n  marketsMap = observable.map<string, Market>({}, { name: \"marketsMap\" });\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    window[\"bigone\"] = this;\r\n  }\r\n\r\n  @observable ccxtIns = null as ccxt.Exchange;\r\n\r\n  @observable exchange = \"bigone3\"; // 对应ccxt里的名字\r\n\r\n  @observable createCCXTOption = {\r\n    urls: {\r\n      // 'api': 'https://b1.run/api/v3/',\r\n      api: {\r\n        private: \"https://b1.run/api/v3/viewer\",\r\n        public: \"https://b1.run/api/v3\"\r\n      }\r\n    }\r\n  };\r\n\r\n  @observable fetchedMarkets = false;\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    if (!this.fetchedMarkets) {\r\n      let items = await this.ccxtIns.fetchMarkets();\r\n      this.fetchedMarkets = true;\r\n      runInAction(() => {\r\n        items.forEach(item => {\r\n          const res = new Market(this.store, this, item);\r\n          this.marketsMap.set(item.symbol, res);\r\n        });\r\n      });\r\n    }\r\n\r\n    let items = await this.ccxtIns.fetchTickers();\r\n    runInAction(() => {\r\n      _.each(items, (item: TickerModel) => {\r\n        const market = this.marketsMap.get(item.symbol);\r\n        if (market) {\r\n          market.lastTicker = item;\r\n        }\r\n      });\r\n    });\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  getMarketsByCoinSymbol(coinSymbol: string) {\r\n    return this.allMarkets.filter(o => {\r\n      return o.spec.base === coinSymbol;\r\n    });\r\n  }\r\n  getMarketsByCoinSymbolFilterActive(coinSymbol: string) {\r\n    return this.allMarkets.filter(o => {\r\n      return o.spec.base === coinSymbol;\r\n    });\r\n  }\r\n\r\n\r\n\r\n  @action\r\n  async createCCXTIns() {\r\n    this.ccxtIns = await new window.ccxt[this.exchange](this.createCCXTOption);\r\n  }\r\n\r\n  @computed get allMarkets() {\r\n    return Array.from(this.marketsMap.values());\r\n  }\r\n\r\n  getSnapShoot(): this {\r\n    const obj = super.getSnapShoot();\r\n    delete obj.ccxtIns;\r\n    return obj;\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { AppRootStore } from \"../AppRootStore\";\r\nimport { Exchange } from \"./Exchange\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport _ from \"lodash\";\r\n\r\nexport class Exchanges extends BaseResModel<AppRootStore> {\r\n  exchangesMap = observable.map<string, Exchange>({}, { name: \"exchangesMap\" });\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    const bigone3 = new Exchange(this.store, this);\r\n    this.exchangesMap.set(bigone3.exchange, bigone3);\r\n\r\n    /*    const zb = new Exchange(this.store, this);\r\n    {\r\n      zb.exchange = \"zb\";\r\n      zb.createCCXTOption = {\r\n        urls: {\r\n          api: {\r\n            private: \"https://api.zb.plus/data/v1\",\r\n            public: \"https://api.zb.plus/data/v1\"\r\n          }\r\n        }\r\n      } as any;\r\n      this.exchangesMap.set(\"zb\", zb);\r\n    }\r\n    */\r\n\r\n    const exchangesNames = [\r\n      \"bittrex\", // dwad\r\n      \"basefex\",\r\n      // \"bitmex\",\r\n      \"coss\",\r\n      \"bibox\",\r\n      \"huobipro\",\r\n      \"okex3\",\r\n      \"poloniex\",\r\n      // 'bitstamp',\r\n      \"coinbasepro\"\r\n    ];\r\n\r\n    ///ccxt.exchanges\r\n    _.each(exchangesNames, name => {\r\n      const item = new Exchange(this.store, this);\r\n      item.exchange = name;\r\n      item.createCCXTOption = {} as any;\r\n      this.exchangesMap.set(name, item);\r\n    });\r\n  }\r\n\r\n  @computed get all() {\r\n    return Array.from(this.exchangesMap.values());\r\n  }\r\n\r\n  @action\r\n  async initExchanges() {\r\n    for (const exchange of this.all) {\r\n      await exchange.createCCXTIns();\r\n    }\r\n  }\r\n}\r\n","import { AppSubStore } from \"./AppSubStore\";\r\nimport { AppRootStore } from \"./AppRootStore\";\r\nimport { action, observable } from \"mobx\";\r\nimport { Exchange } from \"./res/Exchange\";\r\nimport { Market } from \"./res/Market\";\r\nimport { Account } from \"./res/Account\";\r\n\r\nexport class UiStates extends AppSubStore<AppRootStore> {\r\n  @observable exchange: Exchange = null;\r\n\r\n  @observable market: Market = null;\r\n\r\n  @observable account: Account = null;\r\n\r\n  @action changeExchange(exchange: Exchange) {\r\n    this.exchange = exchange;\r\n    this.market = null;\r\n    this.account = null;\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { BalanceModel } from \"../../model/models\";\r\nimport _ from \"lodash\";\r\nimport { Account } from \"./Account\";\r\n\r\nexport class Balance extends BaseResModel<Account> {\r\n  get ccxtIns() {\r\n    return this.parent.ccxtIns;\r\n  }\r\n\r\n  map = observable.map<string, BalanceModel>({}, { name: \"balance\" });\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    let balances =  await this.ccxtIns.fetchBalance();\r\n    _.each(balances, (balance : BalanceModel, key) => {\r\n      balance.base = key;\r\n    });\r\n    delete balances[\"info\"];\r\n    this.map.merge(balances);\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  @computed\r\n  get balancesAll() {\r\n    let items = Array.from(this.map.values());\r\n    items = _.orderBy(items, [\"total\"], [\"desc\"]);\r\n    return items;\r\n  }\r\n\r\n  @computed\r\n  get balancesNotZero() {\r\n    return this.balancesAll.filter(o => {\r\n      return o.total > 0.0001;\r\n    });\r\n  }\r\n}\r\n","import { action, computed, observable, runInAction } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { OrderModel } from \"../../model/models\";\r\nimport _ from \"lodash\";\r\nimport { Account } from \"./Account\";\r\nimport { Market } from \"./Market\";\r\nimport { CommonSubLs } from \"../../Util\";\r\n\r\nexport class AccountOrder extends BaseResModel<Account> {\r\n  map = observable.map<string, OrderModel>({}, { name: \"orderMap\" });\r\n\r\n  @observable market: Market = null;\r\n\r\n  constructor(root, parent, market: Market) {\r\n    super(root, parent);\r\n    this.market = market;\r\n  }\r\n\r\n  get ccxtIns() {\r\n    return this.parent.ccxtIns;\r\n  }\r\n\r\n  @computed\r\n  get all() {\r\n    let items = Array.from(this.map.values());\r\n    items = _.orderBy(items, [\"timestamp\"], [\"desc\"]);\r\n    return items;\r\n  }\r\n\r\n  @computed\r\n  get activeOrders() {\r\n    return this.all.filter(o => o.status === \"open\");\r\n  }\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n    const market = this.market;\r\n    const symbol = market.spec.symbol;\r\n    let orders: OrderModel[] = await this.ccxtIns.fetchOrders(symbol);\r\n    runInAction(() => {\r\n      orders = _.orderBy(orders, \"timestamp\", [\"desc\"]);\r\n      const ordersObj = _.keyBy(orders, \"id\");\r\n      this.map.merge(ordersObj);\r\n      this.createLatestClosedOrderFromLs();\r\n      this.loadingEnd();\r\n    });\r\n  }\r\n\r\n  // pal - profit and loss\r\n\r\n  @observable latestClosedOrder = null; // Need for calculate pal\r\n  //Orders involved in profit and loss calculations  - from latestClosedOrder(Not included) to latest order\r\n  @computed\r\n  get palOrders() {\r\n    let orders = this.all;\r\n    if (this.latestClosedOrder) {\r\n      orders = _.take(orders, _.indexOf(orders, this.latestClosedOrder));\r\n    }\r\n    return orders;\r\n  }\r\n\r\n  @action\r\n  setLatestClosedOrder(order: OrderModel) {\r\n    this.latestClosedOrder = order;\r\n    this.lsLatestClosedOrdersSet(order);\r\n  }\r\n\r\n  lsLatestClosedOrders = new CommonSubLs(\r\n    this.store.config.ls,\r\n    `LatestClosedOrders`\r\n  );\r\n\r\n  lsGetOrderKey = () => {\r\n    const lsKey = `${this.market.parent.exchange}-${this.parent.name}-${this.market.spec.symbol}`;\r\n    return lsKey;\r\n  };\r\n\r\n  lsLatestClosedOrdersSet = (order: OrderModel) => {\r\n    const base = this.lsLatestClosedOrders.lsGet(\"orders\", {});\r\n    const lsKey = this.lsGetOrderKey();\r\n    const lsObj = {\r\n      marketSymbol: this.market.spec.symbol,\r\n      orderId: order.id,\r\n      account: this.parent.name\r\n    } as ILsLatestClosedOrder;\r\n    base[lsKey] = lsObj;\r\n    this.lsLatestClosedOrders.lsSet(\"orders\", base);\r\n  };\r\n\r\n  lsLatestClosedOrdersDelete = () => {\r\n    const base = this.lsLatestClosedOrders.lsGet(\"orders\", {});\r\n    const lsKey = this.lsGetOrderKey();\r\n    delete base[lsKey];\r\n    this.lsLatestClosedOrders.lsSet(\"orders\", base);\r\n  };\r\n\r\n  createLatestClosedOrderFromLs = () => {\r\n    const base = this.lsLatestClosedOrders.lsGet(\"orders\", {});\r\n    const lsKey = this.lsGetOrderKey();\r\n    const lsObj = base[lsKey] as ILsLatestClosedOrder;\r\n    if (lsObj) {\r\n      this.latestClosedOrder = this.map.get(lsObj.orderId);\r\n    }\r\n  };\r\n}\r\n\r\nexport interface ILsLatestClosedOrder {\r\n  marketSymbol: string;\r\n  orderId: string;\r\n  account: string;\r\n}\r\n","import { action, observable } from \"mobx\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { Exchange } from \"./Exchange\";\r\nimport { Accounts } from \"./Accounts\";\r\nimport { Balance } from \"./Balance\";\r\nimport { OrderModel } from \"../../model/models\";\r\nimport { AccountOrder, ILsLatestClosedOrder } from \"./AccountOrder\";\r\nimport { Market } from \"./Market\";\r\nimport { CommonSubLs } from \"../../Util\";\r\n\r\nexport class Account extends BaseResModel<Accounts> {\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    this.balances = new Balance(root, this);\r\n  }\r\n\r\n  @observable ccxtIns = null as ccxt.Exchange; //共享market， 但是私有api 通过自己的 cctx 请求\r\n  @observable name = \"bigone3\"; // account 唯一名字，不能重复\r\n\r\n  @observable exchange: Exchange = null;\r\n\r\n  @observable createCCXTOption = {};\r\n\r\n  @action\r\n  async updateRes() {\r\n    this.loadingStart();\r\n\r\n    this.loadingEnd();\r\n  }\r\n\r\n  @action\r\n  async createCCXTIns(exchange: Exchange) {\r\n    this.exchange = exchange;\r\n    const ccxtOptions = Object.assign(\r\n      {},\r\n      exchange.createCCXTOption,\r\n      this.createCCXTOption\r\n    );\r\n    this.ccxtIns = await new window.ccxt[exchange.exchange](ccxtOptions);\r\n  }\r\n\r\n  @observable balances: Balance;\r\n\r\n  accountOrdersMap = observable.map<string, AccountOrder>(\r\n    {},\r\n    { name: \"accountOrdersMap\" }\r\n  );\r\n\r\n  @action createOrUpdateOrdersByMarket(market: Market) {\r\n    const symbol = market.spec.symbol;\r\n    let accountOrder = this.accountOrdersMap.get(symbol);\r\n    if (!accountOrder) {\r\n      accountOrder = new AccountOrder(this.store, this, market);\r\n      this.accountOrdersMap.set(symbol, accountOrder);\r\n    }\r\n    return accountOrder;\r\n  }\r\n\r\n  safeGetAccountOrder(market: Market) {\r\n    return this.createOrUpdateOrdersByMarket(market);\r\n  }\r\n\r\n  //计算花出去的钱\r\n  computeOutMoneyByHistory(orders: OrderModel[]) {\r\n    let toCompute = orders.filter(o => {\r\n      return o.filled > 0; //才是真正执行过的订单\r\n    });\r\n\r\n    const sum = toCompute.reduce((sum, order) => {\r\n      let money = 0;\r\n\r\n      if (order.type === \"limit\") {\r\n        money = order.price * order.amount;\r\n      } else {\r\n        money = order.filled;\r\n      }\r\n\r\n      if (order.side === \"sell\") {\r\n        money *= -1;\r\n      }\r\n      return sum + money;\r\n    }, 0);\r\n    return sum;\r\n  }\r\n\r\n  computeCurrentValue(market: Market) {\r\n    const lastPrice = market.lastPrice;\r\n    const currentValue =\r\n      this.balances.map.get(market.spec.base).total * lastPrice;\r\n    return currentValue;\r\n  }\r\n\r\n  computeProfitAndRate(market: Market) {\r\n    const accountOrder = this.safeGetAccountOrder(market);\r\n    const outValue = this.computeOutMoneyByHistory(accountOrder.palOrders);\r\n    const currentValue = this.computeCurrentValue(market);\r\n    return {\r\n      profit: currentValue - outValue,\r\n      rate: (currentValue - outValue) / outValue\r\n    };\r\n  }\r\n\r\n  getSnapShoot(): this {\r\n    const obj = super.getSnapShoot();\r\n    delete obj.ccxtIns;\r\n    delete this.exchange;\r\n    return obj;\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\";\r\nimport { AppRootStore } from \"../AppRootStore\";\r\nimport { Exchange } from \"./Exchange\";\r\nimport { BaseResModel } from \"./Base\";\r\nimport { Account } from \"./Account\";\r\nimport { CommonSubLs } from \"../../Util\";\r\nimport _ from \"lodash\";\r\nimport { OrderModel } from \"../../model/models\";\r\nimport { ILsLatestClosedOrder } from \"./AccountOrder\";\r\n\r\nexport class Accounts extends BaseResModel<AppRootStore> {\r\n  accountsMap = observable.map<string, Account>({}, { name: \"accountsMap\" });\r\n\r\n  constructor(root, parent) {\r\n    super(root, parent);\r\n\r\n    this.createAccountsFromLs();\r\n  }\r\n\r\n  @computed get all() {\r\n    return Array.from(this.accountsMap.values());\r\n  }\r\n\r\n  @action\r\n  async createAccount(exchange: Exchange, name: string, cctxOption) {\r\n    if (this.accountsMap.get(name)) {\r\n      console.warn(\"已经存在此账户，不能重复添加\", name);\r\n    } else {\r\n      const account = new Account(this.store, this);\r\n\r\n      account.name = name;\r\n      account.createCCXTOption = Object.assign(\r\n        account.createCCXTOption,\r\n        cctxOption\r\n      );\r\n      await account.createCCXTIns(exchange);\r\n      this.accountsMap.set(name, account);\r\n      return account;\r\n    }\r\n  }\r\n\r\n  @action\r\n  async createAccountAndSaveLs(exchange: Exchange, name: string, cctxOption) {\r\n    const account = await this.createAccount(exchange, name, cctxOption);\r\n    if (account) {\r\n      this.lsAccountsAdd(exchange.exchange, account, cctxOption);\r\n    }\r\n  }\r\n\r\n  lsAccounts = new CommonSubLs(this.store.config.ls, \"accounts\");\r\n  lsAccountsAdd = (exchangeKey: string, account: Account, cctxOption) => {\r\n    const arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\r\n    const a = arr.find(o => o.name === account.name);\r\n    if (a) {\r\n      console.warn(\"已经存在\", exchangeKey, account);\r\n    } else {\r\n      arr.push(\r\n        Object.assign(\r\n          {},\r\n          {\r\n            exchangeKey,\r\n            name: account.name,\r\n            cctxOption: cctxOption\r\n          }\r\n        )\r\n      );\r\n    }\r\n    this.lsAccounts.lsSet(\"list\", arr);\r\n  };\r\n\r\n  lsAccountsRemove = (accountName: string) => {\r\n    let arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\r\n    _.remove(arr, o => o.name === accountName);\r\n\r\n    this.accountsMap.delete(accountName);\r\n    this.lsAccounts.lsSet(\"list\", arr);\r\n  };\r\n\r\n  lsAccountsGetAllAccounts = () => {\r\n    const arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\r\n    return arr;\r\n  };\r\n\r\n  createAccountsFromLs = async () => {\r\n    const arr = this.lsAccountsGetAllAccounts();\r\n    for (const o of arr) {\r\n      const exchange = this.store.exchanges.exchangesMap.get(o.exchangeKey);\r\n      if (exchange) {\r\n        await this.createAccount(exchange, o.name, o.cctxOption);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Store the last activated user\r\n  lsLatestAccountKey = (exchange: Exchange) => {\r\n    const lsKey = `${exchange.exchange}`;\r\n    return lsKey;\r\n  };\r\n\r\n  lsLatestAccountSet = (account: Account) => {\r\n    const base = this.lsAccounts.lsGet(\"LatestAccountMap\", {});\r\n    const lsKey = this.lsLatestAccountKey(account.exchange);\r\n    const lsObj = {\r\n      accountName: account.name,\r\n      exchangeName: account.exchange.exchange\r\n    };\r\n    base[lsKey] = lsObj;\r\n    this.lsAccounts.lsSet(\"LatestAccountMap\", base);\r\n  };\r\n\r\n  lsLatestAccountGetFromExchange = (exchange: Exchange): Account => {\r\n    const base = this.lsAccounts.lsGet(\"LatestAccountMap\", {});\r\n    const lsKey = this.lsLatestAccountKey(exchange);\r\n    const lsObj = base[lsKey];\r\n    if (lsObj) {\r\n      return this.accountsMap.get(lsObj.accountName);\r\n    }\r\n    return null;\r\n  };\r\n}\r\n\r\ninterface IAccountLsOption {\r\n  exchangeKey: string;\r\n  name: string;\r\n  cctxOption: any;\r\n}\r\n","import { SubStore } from \"./core\";\r\nimport { Config } from \"./Config\";\r\nimport { Exchanges } from \"./res/Exchanges\";\r\nimport { UiStates } from \"./UiStates\";\r\nimport { Accounts } from \"./res/Accounts\";\r\n\r\nwindow[\"patch_bigone3\"]();\r\nwindow[\"patch_basefex\"]();\r\n\r\nexport class AppRootStore extends SubStore<null, AppRootStore> {\r\n  name = \"root store\";\r\n\r\n  config: Config;\r\n  exchanges: Exchanges;\r\n  accounts: Accounts;\r\n  uiStates: UiStates;\r\n\r\n  constructor() {\r\n    super(null, null);\r\n\r\n    this.config = new Config(this, this);\r\n    this.exchanges = new Exchanges(this, this);\r\n    this.accounts = new Accounts(this, this);\r\n    this.uiStates = new UiStates(this, this);\r\n  }\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { AppRootStore } from \"./AppRootStore\";\r\n\r\nimport * as mobx from \"mobx\";\r\n\r\nexport const StoreContext = React.createContext(null as AppRootStore | null);\r\n\r\nexport function useStore(): AppRootStore {\r\n  return useContext(StoreContext);\r\n}\r\n\r\nwindow[\"mobx\"] = mobx;\r\n","import { Layout, Menu } from \"antd\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../state\";\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nexport const PageStruct = function(props: { children: any }) {\r\n  return (\r\n    <Layout>\r\n      <AppHeader />\r\n      <Content style={{ minHeight: \"90vh\" }}>{props.children}</Content>\r\n      <Footer>Footer</Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst AppHeader = observer(function() {\r\n  const { uiStates } = useStore();\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Header className={\"appHeader\"}>\r\n      <Menu\r\n        theme=\"light\"\r\n        mode=\"horizontal\"\r\n        defaultSelectedKeys={[\"exchanges\"]}\r\n        style={{ lineHeight: \"64px\" }}\r\n      >\r\n        <Menu.Item\r\n          key=\"exchanges\"\r\n          onClick={() => {\r\n            history.push(\"/\");\r\n          }}\r\n        >\r\n          Exchanges\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"exchange\"\r\n          onClick={() => {\r\n            const exchangeKey = uiStates.exchange\r\n              ? uiStates.exchange.exchange\r\n              : \"\";\r\n            history.push(`/exchange/${exchangeKey}`);\r\n          }}\r\n        >\r\n          Exchange\r\n        </Menu.Item>\r\n        {/*<Menu.Item key=\"3\">Setting</Menu.Item>*/}\r\n      </Menu>\r\n    </Header>\r\n  );\r\n});\r\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport { observer, Observer } from \"mobx-react-lite\";\r\nimport { eTickType, MarketSpecModel } from \"../model/models\";\r\nimport { format, isToday } from \"date-fns\";\r\nimport { ColumnProps, TableProps } from \"antd/lib/table\";\r\nimport { Button, Icon, Table } from \"antd\";\r\nimport ReactTimeAgo from \"timeago-react\";\r\n\r\nexport function MobTable<T>(props: TableProps<T>) {\r\n  const columns = props.columns.map(column => {\r\n    column.title = column.title || _.capitalize(column.dataIndex);\r\n    column.key = column.key || column.dataIndex;\r\n\r\n    column.width = column.width || 200;\r\n\r\n    if (column.render) {\r\n      const originalRender = column.render;\r\n      column.render = (text, row, index) => {\r\n        return (\r\n          <Ob\r\n            r={() => {\r\n              const val = row[column.dataIndex];\r\n              return originalRender(val, row, index);\r\n            }}\r\n          />\r\n        );\r\n      };\r\n    } else {\r\n      column.render = (text, row) => {\r\n        return (\r\n          <Ob\r\n            r={() => {\r\n              const val = row[column.dataIndex];\r\n              return val;\r\n            }}\r\n          />\r\n        );\r\n      };\r\n    }\r\n    return column as ColumnProps<any>;\r\n  });\r\n  return <Table<T> {...props} columns={columns} />;\r\n}\r\n\r\nexport function Ob(props: { r: Function }) {\r\n  return <Observer render={props.r as any} />;\r\n}\r\n\r\nexport const FormatValue = observer(function FormatPrice(props: {\r\n  val: number;\r\n  market: MarketSpecModel;\r\n}) {\r\n  const { val, market } = props;\r\n  let len = 8;\r\n  if (market.quote === \"USDT\") {\r\n    len = 2;\r\n  }\r\n  const v = _.ceil(val, len);\r\n  return (\r\n    <span>\r\n      {v} {market.quote}\r\n    </span>\r\n  );\r\n});\r\n\r\nexport const FormatPercentage = observer(function FormatPrice(props: {\r\n  val: number;\r\n  len?: number;\r\n}) {\r\n  const { val, len = 4 } = props;\r\n  const v = _.ceil(val * 100, len);\r\n  return <span>{v} %</span>;\r\n});\r\n\r\nexport const FormatTimeAuto = (props: { val: number | Date }) => {\r\n  const { val } = props;\r\n  let formatStr = `yyyy-MM-dd HH:mm:ss`;\r\n  if (isToday(val)) {\r\n    formatStr = `HH:mm:ss`;\r\n  }\r\n  return format(val, formatStr) as any;\r\n};\r\n\r\nexport const UpdateBtn = (props: { onClick: any; loading: boolean }) => {\r\n  return (\r\n    <Button\r\n      type={\"primary\"}\r\n      shape=\"circle\"\r\n      icon=\"sync\"\r\n      onClick={props.onClick}\r\n      loading={props.loading}\r\n    />\r\n  );\r\n};\r\n\r\nexport const TimeAgo = observer(function(props: { time: number | Date }) {\r\n  let time = props.time;\r\n\r\n  if (_.isDate(props.time)) {\r\n    return <ReactTimeAgo datetime={props.time} locale=\"en_US\" />;\r\n  } else {\r\n    return time as any;\r\n  }\r\n});\r\n\r\nexport const TickItem = observer(function TickItem(props: { tick: eTickType }) {\r\n  const { tick } = props;\r\n\r\n  let icon = <Icon type=\"arrow-up\" />;\r\n\r\n  switch (tick) {\r\n    case eTickType.plusTick:\r\n      icon = <Icon type=\"arrow-up\" />;\r\n      break;\r\n    case eTickType.zeroPlusTick:\r\n      icon = <Icon type=\"caret-up\" />;\r\n      break;\r\n    case eTickType.minusTick:\r\n      icon = <Icon type=\"arrow-down\" />;\r\n      break;\r\n    case eTickType.zeroMinusTick:\r\n      icon = <Icon type=\"caret-down\" />;\r\n      break;\r\n  }\r\n\r\n  return <div className={`icon ${tick}`}>{icon}</div>;\r\n});\r\n\r\nconst splitNumberStringSignificantBit = (numericString: string) => {\r\n  if (numericString.indexOf(\".\") > 0) {\r\n    // const valid = numericString.match(/\\d(.*[^0])+/g)[0]\r\n    // const zero = numericString.substring(valid.length,numericString.length)\r\n    const valid = numericString;\r\n    const zero = \"\";\r\n    return [valid, zero];\r\n  } else {\r\n    return [numericString];\r\n  }\r\n};\r\n\r\nexport const NumberSeparateFormat = observer(\r\n  (props: { num: number; fixed: number }) => {\r\n    const { fixed, num } = props;\r\n\r\n    const numericString = accounting.toFixed(num, fixed);\r\n\r\n    const [valid, zero = \"\"] = splitNumberStringSignificantBit(numericString);\r\n    return (\r\n      <span className={\"Nf\"}>\r\n        {valid}\r\n        <span className={\"invalidSection\"}>{zero}</span>\r\n      </span>\r\n    );\r\n  }\r\n);\r\n\r\n//Split digital significant bit\r\n\r\nexport const FormatBase = observer(function FormatBase(props: {\r\n  val: number;\r\n  spec: MarketSpecModel;\r\n  withUnit?: boolean;\r\n}) {\r\n  const { val, spec, withUnit = false } = props;\r\n  const fixedNum = spec.precision.base || spec.precision.amount;\r\n  const unit = spec.quote;\r\n  return (\r\n    <span>\r\n      <NumberSeparateFormat num={val} fixed={fixedNum} /> {withUnit && unit}\r\n    </span>\r\n  );\r\n});\r\n\r\nexport const FormatQuote = observer(function FormatQuote(props: {\r\n  val: number;\r\n  spec: MarketSpecModel;\r\n  withUnit?: boolean;\r\n}) {\r\n  const { val, spec, withUnit = false } = props;\r\n  const fixedNum = spec.precision.quote || spec.precision.price;\r\n  const unit = spec.quote;\r\n  return (\r\n    <span>\r\n      <NumberSeparateFormat num={val} fixed={fixedNum} /> {withUnit && unit}\r\n    </span>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { TimeAgo, UpdateBtn } from \"../Util\";\r\nimport { Card } from \"antd\";\r\nimport \"./index.scss\";\r\nimport { CardProps } from \"antd/lib/card\";\r\nimport classNames from \"classnames\";\r\nimport _ from \"lodash\";\r\nimport { BaseResModel } from \"../../state/res/Base\";\r\n\r\nexport const UpdatableCard = observer(function UpdatableCard(\r\n  props: Partial<CardProps> & {\r\n    updatableRes: Partial<BaseResModel>;\r\n    noContentPadding?: boolean;\r\n    updateImmediately?: boolean;\r\n  }\r\n) {\r\n  const {\r\n    updatableRes,\r\n    noContentPadding = true,\r\n    updateImmediately = true\r\n  } = props;\r\n\r\n  const doUpdate = useCallback(async () => {\r\n    try {\r\n      await updatableRes.updateRes();\r\n    } catch (e) {\r\n      console.warn(\"updatableRes failed\", e);\r\n    }\r\n  }, [updatableRes]);\r\n\r\n  useEffect(() => {\r\n    if (updateImmediately) {\r\n      doUpdate();\r\n    }\r\n  }, []);\r\n\r\n  const cardProps = _.omit(props, [\r\n    \"updatableRes\",\r\n    \"noContentPadding\",\r\n    \"updateImmediately\"\r\n  ]);\r\n\r\n  return (\r\n    <Card\r\n      {...cardProps}\r\n      title={\r\n        <div className={\"titleWithUpdateTime\"}>\r\n          <div>{props.title}</div>\r\n          <div className={\"updateTime\"}>\r\n            <TimeAgo time={updatableRes.lastUpdateTime} />\r\n          </div>\r\n        </div>\r\n      }\r\n      className={classNames(\r\n        \"UpdatableCard\",\r\n        {\r\n          noContentPadding: noContentPadding\r\n        },\r\n        cardProps.className\r\n      )}\r\n      size=\"small\"\r\n      extra={\r\n        <div>\r\n          <UpdateBtn\r\n            onClick={() => {\r\n              doUpdate();\r\n            }}\r\n            loading={updatableRes.loading}\r\n          />\r\n        </div>\r\n      }\r\n    >\r\n      {cardProps.children}\r\n    </Card>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { MobTable } from \"../Util\";\r\nimport \"./index.scss\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport { useStore } from \"../../state\";\r\nimport { Exchange } from \"../../state/res/Exchange\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Exchanges = observer(function Exchanges(props: {}) {\r\n  const { exchanges } = useStore();\r\n\r\n  const list = exchanges.all;\r\n\r\n  return (\r\n    <div className={\"Exchanges\"} style={{ padding: 24 }}>\r\n      <UpdatableCard title={<div>Exchanges</div>} updatableRes={exchanges}>\r\n        <MobTable<Exchange>\r\n          size={\"small\"}\r\n          dataSource={list}\r\n          rowKey={\"exchange\"}\r\n          columns={[\r\n            {\r\n              title: \"Id\",\r\n              dataIndex: \"exchange\",\r\n              render: (v, row) => (\r\n                <div>\r\n                  <Link to={`/exchange/${row.exchange}`}>{v}</Link>\r\n                </div>\r\n              )\r\n            }\r\n          ]}\r\n        />\r\n      </UpdatableCard>\r\n    </div>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { PageStruct } from \"../Util\";\r\nimport { Exchanges } from \"../../components/Exchanges\";\r\n\r\nexport const Home = observer(function Home() {\r\n  return (\r\n    <PageStruct>\r\n      <Exchanges />\r\n    </PageStruct>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { FormatBase, FormatQuote, FormatTimeAuto, TickItem } from \"../Util\";\r\nimport { Icon } from \"antd\";\r\nimport \"./index.scss\";\r\nimport { eSide, eTickType, TradeModel } from \"../../model/models\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport { Market } from \"../../state/res/Market\";\r\n\r\nexport const RecentTrades = observer(function RecentTrades(props: {\r\n  market: Market;\r\n}) {\r\n  const { market } = props;\r\n  const res = market.recentTrades;\r\n  const list = res.trades;\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\"Recent Trades\"}\r\n      className={\"RecentTrades\"}\r\n      updatableRes={res}\r\n    >\r\n      <Scrollbars style={{ height: 600 }} autoHide={true}>\r\n        <div className={\"TradeHistoryContainer\"}>\r\n          {list.map(o => (\r\n            <RecentTradesItem key={o.id} trade={o} market={market} />\r\n          ))}\r\n        </div>\r\n      </Scrollbars>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst RecentTradesItem = observer(function RecentTradesItem(props: {\r\n  trade: TradeModel;\r\n  market: Market;\r\n}) {\r\n  const { trade, market } = props;\r\n\r\n  return (\r\n    <div className=\"TradeHistoryContainer_item\">\r\n      <div className=\"volume\">\r\n        <FormatBase val={trade.amount} spec={market.spec} />\r\n      </div>\r\n      <div className={`price ${trade.side}`}>\r\n        <TickItem tick={trade.tick} />\r\n        <FormatQuote val={trade.price} spec={market.spec} />\r\n      </div>\r\n      <div className=\"time\">\r\n        <FormatTimeAuto val={trade.timestamp} />\r\n      </div>\r\n      {/*<div className=\"side\">{trade.side === eSide.buy ? \"B\" : \"S\"}</div>*/}\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer, useLocalStore } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { eSide, OrderBookModel } from \"../../model/models\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport _ from \"lodash\";\r\nimport { Button } from \"antd\";\r\nimport { Market } from \"../../state/res/Market\";\r\nimport { FormatBase, FormatQuote, NumberSeparateFormat } from \"../Util\";\r\n\r\nexport const OrderBook = observer(function OrderBook(props: {\r\n  market: Market;\r\n}) {\r\n  const { market } = props;\r\n  const res = market.orderBook;\r\n\r\n  const state = useLocalStore(() => ({\r\n    showNum: 14,\r\n    side: eSide.both as eSide,\r\n    get asks() {\r\n      let items = [];\r\n      if (state.side === eSide.both) {\r\n        items = _.take(res.asks, state.showNum);\r\n      } else {\r\n        items = res.asks; //_.take(, state.showNum * 2);\r\n      }\r\n      const reversed = items.reverse();\r\n      return reversed;\r\n    },\r\n    get bids() {\r\n      if (state.side === eSide.both) {\r\n        return _.take(res.bids, state.showNum);\r\n      } else {\r\n        return res.bids; // _.take(res.bids, state.showNum * 2);\r\n      }\r\n    },\r\n\r\n    setSide(side: eSide) {\r\n      state.side = side;\r\n    }\r\n  }));\r\n\r\n  const { asks, bids } = state;\r\n\r\n  const renderList = (list: OrderBookModel[], side: string) => {\r\n    return (\r\n      <div className={side}>\r\n        {list.map((o, index) => (\r\n          <OrderBookItem key={index} item={o} market={market} />\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\"OrderBook\"}\r\n      className={\"OrderBook\"}\r\n      updatableRes={res}\r\n    >\r\n      <Scrollbars style={{ height: 600 }} autoHide={true}>\r\n        <div className={\"OrderBookContainer\"}>\r\n          <div className=\"OrderBookInnerHeader\">\r\n            <div className=\"sideBtns\">\r\n              <Button\r\n                size={\"small\"}\r\n                icon=\"vertical-align-middle\"\r\n                onClick={() => state.setSide(eSide.both)}\r\n              />\r\n              <Button\r\n                size={\"small\"}\r\n                icon=\"vertical-align-top\"\r\n                onClick={() => state.setSide(eSide.buy)}\r\n              />\r\n              <Button\r\n                size={\"small\"}\r\n                icon=\"vertical-align-bottom\"\r\n                onClick={() => state.setSide(eSide.sell)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"centeredContent\">\r\n            {state.side === eSide.both ? (\r\n              <>\r\n                {renderList(asks, \"asks\")}\r\n                <div className={\"MarketPrice\"}>\r\n                  <MarketPrice market={market} />\r\n                </div>\r\n                {renderList(bids, \"bids\")}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div className={\"MarketPrice\"}>\r\n                  <MarketPrice market={market} />\r\n                </div>\r\n                {state.side === eSide.buy && renderList(asks, \"asks\")}\r\n                {state.side === eSide.sell && renderList(asks, \"bids\")}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Scrollbars>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst OrderBookItem = observer(function OrderBookItem(props: {\r\n  item: OrderBookModel;\r\n  market: Market;\r\n}) {\r\n  const { item, market } = props;\r\n\r\n  return (\r\n    <div className=\"OrderBookItem\">\r\n      <div className={\"price\"}>\r\n        <FormatQuote val={item.price} spec={market.spec} />\r\n      </div>\r\n      <div className={\"size\"}>\r\n        <FormatBase val={item.size} spec={market.spec} />\r\n      </div>\r\n      <div className={\"accumulateSize\"}>\r\n        <FormatBase val={item.accumulateSize} spec={market.spec} />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst MarketPrice = observer(function MarketPrice(props: { market: Market }) {\r\n  const { market } = props;\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <FormatQuote val={market.lastPrice} spec={market.spec} />\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer, useLocalStore } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport { Icon, Tabs } from \"antd\";\r\nimport { Exchange } from \"../../state/res/Exchange\";\r\nimport { Market } from \"../../state/res/Market\";\r\nimport { FormatQuote, MobTable } from \"../Util\";\r\nimport { useStore } from \"../../state\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport const MarketsView = observer(function MarketsView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const { exchange } = props;\r\n\r\n  const { uiStates } = useStore();\r\n\r\n  const state = useLocalStore(() => ({\r\n    get quotes(): string[] {\r\n      const s = new Set<string>();\r\n      const list = exchange.allMarkets;\r\n      list.forEach(o => {\r\n        s.add(o.spec.quote);\r\n      });\r\n      return Array.from(s);\r\n    }\r\n  }));\r\n\r\n  const renderCurrentAccount = () => {\r\n    let account = uiStates.account; //store.accounts.all.find(o => o.exchange === exchange);\r\n\r\n    if (!account) {\r\n      return null;\r\n    } else {\r\n      const balances = account.balances.balancesNotZero;\r\n\r\n      const allMarkets = account.exchange.allMarkets;\r\n      const allQuotes = Array.from(new Set(allMarkets.map(o => o.spec.quote)));\r\n\r\n      const balancesBases = balances.map(o => o.base);\r\n\r\n      const markets = allMarkets.filter(\r\n        o =>\r\n          balancesBases.includes(o.spec.quote) &&\r\n          balancesBases.includes(o.spec.base)\r\n      );\r\n\r\n      return (\r\n        <TabPane tab={<Icon type=\"bank\" />} key={account.name}>\r\n          <MarketsList markets={markets} />\r\n        </TabPane>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\"Markets\"}\r\n      className={\"Markets\"}\r\n      updatableRes={exchange}\r\n      updateImmediately={false}\r\n    >\r\n      <Tabs defaultActiveKey=\"1\" onChange={() => {}}>\r\n        {renderCurrentAccount()}\r\n        {state.quotes.map(v => {\r\n          const markets = exchange.allMarkets.filter(\r\n            o => o.spec.active && o.spec.quote === v\r\n          );\r\n          return (\r\n            <TabPane tab={v} key={v}>\r\n              <MarketsList markets={markets} />\r\n            </TabPane>\r\n          );\r\n        })}\r\n      </Tabs>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst MarketsList = observer(function MarketsTable(props: {\r\n  markets: Market[];\r\n}) {\r\n  const { markets } = props;\r\n\r\n  const { uiStates } = useStore();\r\n\r\n  return (\r\n    <Scrollbars style={{ height: 550 }} autoHide={true}>\r\n      <div className={\"MarketsList\"}>\r\n        {markets.map(row => (\r\n          <div\r\n            key={row.spec.symbol}\r\n            className={\"MarketsListItem\"}\r\n            onClick={() => {\r\n              uiStates.market = row;\r\n            }}\r\n          >\r\n            <div className=\"exchangeName\">{row.spec.symbol}</div>\r\n            <div className=\"latestPrice\">\r\n              {row.lastTicker && (\r\n                <FormatQuote val={row.lastTicker.close} spec={row.spec} />\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Scrollbars>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer, useLocalStore } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { OrderModel } from \"../../model/models\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport { Button, Tabs } from \"antd\";\r\nimport { FormatTimeAuto, MobTable, Ob } from \"../Util\";\r\nimport { Account } from \"../../state/res/Account\";\r\nimport { Market } from \"../../state/res/Market\";\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nexport const AccountOrders = observer(function AccountOrders(props: {\r\n  account: Account;\r\n  market: Market;\r\n}) {\r\n  const { account, market } = props;\r\n\r\n  const res = account.safeGetAccountOrder(market);\r\n\r\n  const state = useLocalStore(() => ({\r\n    activeTab: \"active\" //active / all\r\n  }));\r\n\r\n  if (!res) {\r\n    return null;\r\n  }\r\n\r\n  const renderTable = orders => {\r\n    return (\r\n      <MobTable<OrderModel>\r\n        size={\"small\"}\r\n        dataSource={orders}\r\n        rowKey={\"id\"}\r\n        columns={[\r\n          {\r\n            dataIndex: \"symbol\",\r\n            render(v, row) {\r\n              let isLatestClosedOrder = row === res.latestClosedOrder;\r\n              return (\r\n                <span>\r\n                  {v}\r\n\r\n                  {!isLatestClosedOrder && (\r\n                    <Button\r\n                      size={\"small\"}\r\n                      onClick={() => {\r\n                        res.setLatestClosedOrder(row);\r\n                      }}\r\n                    >\r\n                      latest order\r\n                    </Button>\r\n                  )}\r\n                </span>\r\n              );\r\n            }\r\n          },\r\n          {\r\n            dataIndex: \"timestamp\",\r\n            render: v => <FormatTimeAuto val={v} />\r\n          },\r\n          {\r\n            dataIndex: \"side\"\r\n          },\r\n          {\r\n            dataIndex: \"type\"\r\n          },\r\n          {\r\n            dataIndex: \"status\"\r\n          },\r\n\r\n          {\r\n            dataIndex: \"amount\"\r\n          },\r\n          {\r\n            dataIndex: \"cost\"\r\n          },\r\n          {\r\n            dataIndex: \"price\"\r\n          },\r\n          {\r\n            dataIndex: \"filled\"\r\n          },\r\n          {\r\n            dataIndex: \"remaining\"\r\n          }\r\n        ]}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\r\n        <div>\r\n          Orders <Ob r={() => market.spec.symbol} />\r\n        </div>\r\n      }\r\n      className={\"UserOrders\"}\r\n      updatableRes={res}\r\n    >\r\n      <div className={\"UserOrdersContainer\"}>\r\n        <Tabs\r\n          defaultActiveKey=\"all\"\r\n          onChange={activeKey => {\r\n            state.activeTab = activeKey;\r\n          }}\r\n        >\r\n          <TabPane tab=\"Active\" key=\"active\">\r\n            {renderTable(res.activeOrders)}\r\n          </TabPane>\r\n          <TabPane tab=\"All\" key=\"all\">\r\n            {renderTable(res.all)}\r\n          </TabPane>\r\n        </Tabs>\r\n      </div>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { BalanceModel } from \"../../model/models\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport { Badge, Progress } from \"antd\";\r\nimport {\r\n  FormatBase,\r\n  FormatPercentage,\r\n  FormatQuote,\r\n  FormatValue,\r\n  Ob\r\n} from \"../Util\";\r\nimport { Account } from \"../../state/res/Account\";\r\nimport { Market } from \"../../state/res/Market\";\r\n\r\nexport const CurrentBalance = observer(function CurrentBalance(props: {\r\n  account: Account;\r\n  market: Market;\r\n}) {\r\n  const { market, account } = props;\r\n\r\n  // const account = uiStates.account; //accounts.all.find((o)=>o.)  //accounts.accountsMap.get()\r\n\r\n  const res = account.balances;\r\n  const balance = res.map.get(market.spec.base);\r\n\r\n  if (!res || !balance) {\r\n    return null;\r\n  }\r\n\r\n  const userOrder = account.safeGetAccountOrder(market);\r\n  const { profit, rate } = account.computeProfitAndRate(market);\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={\r\n        <div>\r\n          {account.name}-<Ob r={() => market.spec.symbol} />\r\n        </div>\r\n      }\r\n      className={\"BalanceCard\"}\r\n      updatableRes={market}\r\n    >\r\n      <Scrollbars style={{ height: 400 }} autoHide={true}>\r\n        <div className={\"BalanceCardContainer\"}>\r\n          <BalanceItem balance={balance} />\r\n\r\n          <div className={\"ProfitSection\"}>\r\n            <h3>Profit</h3>\r\n            <div>\r\n              <FormatQuote val={profit} spec={market.spec} withUnit />/{\" \"}\r\n              <FormatPercentage val={rate} />\r\n            </div>\r\n\r\n            <div className={\"profitRow2\"}>\r\n              <div>\r\n                <Badge color=\"red\" text=\"Cost\" />\r\n                <FormatQuote\r\n                  val={account.computeOutMoneyByHistory(userOrder.all)}\r\n                  spec={market.spec}\r\n                  withUnit\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Badge color=\"green\" text=\"Current Value\" />\r\n                <FormatQuote\r\n                  val={account.computeCurrentValue(market)}\r\n                  spec={market.spec}\r\n                  withUnit\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Scrollbars>\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst BalanceItem = observer(function BalanceItem(props: {\r\n  balance: BalanceModel;\r\n}) {\r\n  const { balance } = props;\r\n  const usedPercent = (balance.used / balance.total) * 100;\r\n  const freePercent = (balance.free / balance.total) * 100;\r\n\r\n  const renderRow = (color: string, percent: number, text: string, val) => {\r\n    return (\r\n      <div className={\"BalanceItemRow\"}>\r\n        <Progress percent={percent} size=\"small\" showInfo={false} />\r\n        <div className={\"BalanceItemRowDown\"}>\r\n          <Badge status=\"success\" text={text} />\r\n          <div className={\"BalanceItemRowText\"}>{balance.total}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={\"BalanceItem\"}>\r\n      {renderRow(\"green\", 100, \"Total\", balance.total)}\r\n      {renderRow(\"green\", freePercent, \"Free\", balance.free)}\r\n      {renderRow(\"green\", usedPercent, \"Used\", balance.used)}\r\n    </div>\r\n  );\r\n});\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { observer, useLocalStore } from \"mobx-react-lite\";\r\nimport { Button, Form, Input, Modal, Tabs, Tag } from \"antd\";\r\nimport \"./index.scss\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport { useStore } from \"../../state\";\r\nimport { Exchange } from \"../../state/res/Exchange\";\r\nimport { WrappedFormUtils } from \"antd/lib/form/Form\";\r\nimport { Account } from \"../../state/res/Account\";\r\nimport { BalanceModel } from \"../../model/models\";\r\nimport { CurrentBalance } from \"../CurrentBalance\";\r\nimport { MobTable } from \"../Util\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport const AccountsBalanceView = observer(\r\n  function AccountsBalanceView(props: { exchange: Exchange }) {\r\n    const { exchange } = props;\r\n\r\n    const { uiStates } = useStore();\r\n\r\n    return (\r\n      <Tabs defaultActiveKey=\"1\" onChange={() => {}}>\r\n        <TabPane tab=\"Accounts\" key=\"1\">\r\n          <AccountsView exchange={exchange} />\r\n        </TabPane>\r\n        <TabPane tab=\"Balance\" key=\"2\">\r\n          {uiStates.market && uiStates.account && (\r\n            <CurrentBalance\r\n              account={uiStates.account}\r\n              market={uiStates.market}\r\n            />\r\n          )}\r\n        </TabPane>\r\n      </Tabs>\r\n    );\r\n  }\r\n);\r\n\r\nexport const AccountsView = observer(function AccountsView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const { exchange } = props;\r\n\r\n  const { accounts, uiStates } = useStore();\r\n\r\n  const formRef = useRef(null as any);\r\n\r\n  const state = useLocalStore(() => ({\r\n    visible: false,\r\n\r\n    addAccount(name, cctxOptions) {\r\n      accounts.createAccountAndSaveLs(exchange, name, cctxOptions).then(() => {\r\n        console.log(\"添加成功\");\r\n        state.visible = false;\r\n      });\r\n    },\r\n\r\n    handleCreate() {\r\n      const form = formRef.current.props.form as WrappedFormUtils;\r\n      form.validateFields((err, values) => {\r\n        if (err) {\r\n          return;\r\n        }\r\n        console.log(\"Received values of form: \", values);\r\n\r\n        state.addAccount(values.name, {\r\n          apiKey: values.apiKey,\r\n          secret: values.secret\r\n        });\r\n      });\r\n    },\r\n\r\n    activeAccount(account: Account) {\r\n      uiStates.account = account;\r\n      accounts.lsLatestAccountSet(account);\r\n    }\r\n  }));\r\n\r\n  // Automatic activation of the latest account\r\n  useEffect(() => {\r\n    const account = accounts.lsLatestAccountGetFromExchange(exchange);\r\n    if (account) {\r\n      state.activeAccount(account);\r\n    }\r\n  }, []);\r\n\r\n  const list = accounts.all.filter(o => o.exchange === exchange);\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={<div>Accounts in:{exchange.exchange}</div>}\r\n      updatableRes={accounts}\r\n    >\r\n      <div style={{ padding: 12 }}>\r\n        <Button\r\n          type={\"primary\"}\r\n          onClick={() => {\r\n            state.visible = true;\r\n          }}\r\n        >\r\n          add\r\n        </Button>\r\n      </div>\r\n\r\n      <AccountCreateForm\r\n        wrappedComponentRef={formRef as any}\r\n        visible={state.visible as any}\r\n        onCancel={() => {\r\n          state.visible = false;\r\n        }}\r\n        onCreate={() => {\r\n          state.handleCreate();\r\n        }}\r\n      />\r\n\r\n      <MobTable<Account>\r\n        size={\"small\"}\r\n        dataSource={list}\r\n        rowKey={row => {\r\n          return row.name;\r\n        }}\r\n        columns={[\r\n          {\r\n            dataIndex: \"name\",\r\n            render: (v, row) => (\r\n              <Tag\r\n                color=\"gold\"\r\n                onClick={() => {\r\n                  state.activeAccount(row);\r\n                }}\r\n              >\r\n                {row.name}\r\n              </Tag>\r\n            )\r\n          },\r\n\r\n          {\r\n            dataIndex: \"action\",\r\n            render: (v, row) => (\r\n              <div>\r\n                <Button\r\n                  type={\"danger\"}\r\n                  size={\"small\"}\r\n                  onClick={() => {\r\n                    accounts.lsAccountsRemove(row.name);\r\n                  }}\r\n                >\r\n                  delete\r\n                </Button>\r\n              </div>\r\n            )\r\n          }\r\n        ]}\r\n      />\r\n\r\n      {uiStates.account && (\r\n        <UserAsset key={uiStates.account.name} account={uiStates.account} />\r\n      )}\r\n    </UpdatableCard>\r\n  );\r\n});\r\n\r\nconst AccountCreateForm = Form.create<{\r\n  visible;\r\n  onCancel;\r\n  onCreate;\r\n  form;\r\n  wrappedComponentRef;\r\n}>({ name: \"AccountCreateForm\" })(\r\n  class extends React.Component {\r\n    render() {\r\n      const { visible, onCancel, onCreate, form } = this.props as any;\r\n      const { getFieldDecorator } = form;\r\n      return <HookForm {...this.props} />;\r\n    }\r\n  }\r\n);\r\n\r\nfunction HookForm(props: any) {\r\n  const { visible, onCancel, onCreate, form } = props;\r\n  const { getFieldDecorator } = form;\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Create An Account\"\r\n      okText=\"Create\"\r\n      onCancel={onCancel}\r\n      onOk={onCreate}\r\n    >\r\n      <Form layout=\"vertical\">\r\n        <Form.Item label=\"name\">\r\n          {getFieldDecorator(\"name\", {\r\n            rules: [\r\n              {\r\n                required: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"apiKey\">\r\n          {getFieldDecorator(\"apiKey\", {\r\n            rules: [\r\n              {\r\n                required: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"secret\">\r\n          {getFieldDecorator(\"secret\", {\r\n            rules: [\r\n              {\r\n                required: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nconst UserAsset = observer(function UserAsset(props: { account: Account }) {\r\n  const { account } = props;\r\n\r\n  const { uiStates } = useStore();\r\n\r\n  const list = account.balances.balancesNotZero;\r\n\r\n  return (\r\n    <div className={\"UserAsset\"}>\r\n      <UpdatableCard\r\n        title={<div>Balances</div>}\r\n        updatableRes={account.balances}\r\n      >\r\n        <MobTable<BalanceModel>\r\n          size={\"small\"}\r\n          dataSource={list}\r\n          rowKey={\"base\"}\r\n          columns={[\r\n            {\r\n              dataIndex: \"base\",\r\n              render: (v, row) => {\r\n                const coinSymbol = row.base;\r\n                const markets = account.exchange.getMarketsByCoinSymbol(\r\n                  coinSymbol\r\n                );\r\n                const loading = markets.every(o => o.loading);\r\n\r\n                return (\r\n                  <div>\r\n                    {row.base} {/*{markets.length && (*/}\r\n                    {/*  <Button*/}\r\n                    {/*    type={\"primary\"}*/}\r\n                    {/*    shape=\"circle\"*/}\r\n                    {/*    icon=\"sync\"*/}\r\n                    {/*    onClick={async () => {*/}\r\n                    {/*      for (const market of markets) {*/}\r\n                    {/*        await market.updateRes();*/}\r\n                    {/*      }*/}\r\n                    {/*    }}*/}\r\n                    {/*    loading={loading}*/}\r\n                    {/*  />*/}\r\n                    {/*)}*/}\r\n                  </div>\r\n                );\r\n              }\r\n            },\r\n            {\r\n              dataIndex: \"total\"\r\n            }\r\n            // mCol({ dataIndex: \"free\" }),\r\n            // mCol({ dataIndex: \"used\" })\r\n          ]}\r\n          // expandedRowRender={row => {\r\n          //   return (\r\n          //     <Ob\r\n          //       r={() => {\r\n          //         const coinSymbol = row.key;\r\n          //         const markets = account.exchange.getMarketsByCoinSymbol(\r\n          //           coinSymbol\r\n          //         );\r\n          //\r\n          //         return (\r\n          //           <div className={\"orderCol\"}>\r\n          //             {markets.map(o => {\r\n          //               // account.exchange.marketsMap.get(o.spec.symbol);\r\n          //               const { profit, rate } = account.computeProfitAndRate(\r\n          //                 o\r\n          //               );\r\n          //\r\n          //               const accountOrder = account.safeGetAccountOrder(o);\r\n          //               const orderCount = accountOrder.all.length;\r\n          //\r\n          //               return (\r\n          //                 <div key={o.spec.quote} className={\"orderColItem\"}>\r\n          //                   <div className=\"btn\">\r\n          //                     <Button\r\n          //                       type={\"primary\"}\r\n          //                       shape=\"circle\"\r\n          //                       icon=\"sync\"\r\n          //                       onClick={async () => {\r\n          //                         await accountOrder.updateRes();\r\n          //                         await o.updateRes();\r\n          //                       }}\r\n          //                       loading={o.loading && accountOrder.loading}\r\n          //                     />\r\n          //                   </div>\r\n          //                   <div className=\"quote\">{o.spec.quote}:</div>\r\n          //                   <div className=\"viewOrder\">\r\n          //                     <Badge count={orderCount}>\r\n          //                       <Button\r\n          //                         style={{ marginLeft: 8 }}\r\n          //                         onClick={() => {\r\n          //                           uiStates.market = o;\r\n          //                         }}\r\n          //                       >\r\n          //                         切换市场\r\n          //                       </Button>\r\n          //                     </Badge>\r\n          //                   </div>\r\n          //                   <div className=\"profit\">\r\n          //                     <FormatValue val={profit} market={o.spec} /> (\r\n          //                     <FormatPercentage val={rate} />)\r\n          //                   </div>\r\n          //                 </div>\r\n          //               );\r\n          //             })}\r\n          //           </div>\r\n          //         );\r\n          //       }}\r\n          //     />\r\n          //   );\r\n          // }}\r\n        />\r\n      </UpdatableCard>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Col, Row } from \"antd\";\r\nimport \"./index.scss\";\r\nimport { RecentTrades } from \"../RecentTrades\";\r\nimport { OrderBook } from \"../OrderBook\";\r\nimport { MarketsView } from \"../MarketsView\";\r\nimport { useStore } from \"../../state\";\r\nimport { Exchange } from \"../../state/res/Exchange\";\r\nimport { AccountOrders } from \"../AccountOrders\";\r\nimport { AccountsBalanceView } from \"../AccountsBalanceView\";\r\n\r\nexport const TradeMainView = observer(function TradeMainView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const { exchange } = props;\r\n\r\n  const { uiStates } = useStore();\r\n\r\n  return (\r\n    <div className={\"TradeMainView\"}>\r\n      <Row>\r\n        <Col md={6} sm={12} xs={24}>\r\n          <MarketsView exchange={exchange} />\r\n        </Col>\r\n\r\n        {uiStates.market && (\r\n          <>\r\n            <Col md={6} sm={12} xs={24}>\r\n              <OrderBook\r\n                key={uiStates.market.spec.symbol}\r\n                market={uiStates.market}\r\n              />\r\n            </Col>\r\n            <Col md={6} sm={12} xs={24}>\r\n              <RecentTrades\r\n                key={uiStates.market.spec.symbol}\r\n                market={uiStates.market}\r\n              />\r\n            </Col>\r\n          </>\r\n        )}\r\n\r\n        <Col md={6} sm={12} xs={24}>\r\n          <AccountsBalanceView exchange={exchange} />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row>\r\n        <Col span={24}>\r\n          <div style={{ maxWidth: \"100%\", overflowX: \"scroll\" }}>\r\n            <div style={{ minWidth: 900 }}>\r\n              {uiStates.market && uiStates.account && (\r\n                <AccountOrders\r\n                  key={uiStates.market.spec.symbol + uiStates.account.name}\r\n                  account={uiStates.account}\r\n                  market={uiStates.market}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport \"./index.scss\";\r\nimport { UpdatableCard } from \"../UpdatableCard\";\r\nimport { useStore } from \"../../state\";\r\nimport { Exchange } from \"../../state/res/Exchange\";\r\nimport { TradeMainView } from \"../TradeMainView\";\r\n\r\nexport const ExchangeView = observer(function ExchangeView(props: {\r\n  exchange: Exchange;\r\n}) {\r\n  const { exchange } = props;\r\n  const { uiStates } = useStore();\r\n\r\n  const list = exchange.allMarkets;\r\n\r\n  return (\r\n    <UpdatableCard\r\n      title={<div>Exchange - {exchange.exchange}</div>}\r\n      updatableRes={exchange}\r\n    >\r\n      <TradeMainView exchange={exchange} />\r\n    </UpdatableCard>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { PageStruct } from \"../Util\";\r\nimport { ExchangeView } from \"../../components/ExchangeView\";\r\nimport { useStore } from \"../../state\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Empty } from \"antd\";\r\n\r\nexport const ExchangePage = observer(function ExchangePage() {\r\n  const { exchanges, uiStates } = useStore();\r\n\r\n  const { exchangeKey } = useParams<{ exchangeKey: string }>();\r\n\r\n  const exchange = exchanges.exchangesMap.get(exchangeKey);\r\n\r\n  if (exchange) {\r\n    uiStates.changeExchange(exchange);\r\n  }\r\n  return (\r\n    <PageStruct>\r\n      {exchange ? (\r\n        <ExchangeView key={exchange.exchange} exchange={exchange} />\r\n      ) : (\r\n        <Empty />\r\n      )}\r\n    </PageStruct>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport \"./index.scss\";\r\nimport { Home } from \"./Home\";\r\nimport { ExchangePage } from \"./Exchange\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home />\r\n          </Route>\r\n\r\n          <Route path={\"/exchange/:exchangeKey\"}>\r\n            <ExchangePage />\r\n          </Route>\r\n          <Redirect from=\"/exchange\" to=\"/exchange/none\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./styles/App.scss\";\r\nimport { AppRootStore } from \"./state/AppRootStore\";\r\nimport { StoreContext } from \"./state\";\r\n\r\nimport RouterApp from \"./pages/index\";\r\n\r\nconst store = (window[\"store\"] = window[\"ss\"] = new AppRootStore());\r\n\r\nconst App: React.FC = () => {\r\n  const [ready, setReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      await store.exchanges.initExchanges();\r\n      setReady(true);\r\n    };\r\n\r\n    init();\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <StoreContext.Provider value={store}>\r\n        {ready && <RouterApp />}\r\n      </StoreContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n// serviceWorker.register();\r\n"],"sourceRoot":""}