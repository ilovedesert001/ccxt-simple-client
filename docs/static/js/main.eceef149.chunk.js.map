{"version":3,"sources":["model/models.ts","state/core/index.ts","state/AppSubStore.ts","state/Config.ts","state/res/Base.ts","Util.ts","state/res/RecentTrade.ts","state/res/OrderBook.ts","state/res/Market.ts","state/res/Exchange.ts","state/res/Exchanges.ts","state/UiStates.ts","state/res/Balance.ts","state/res/AccountOrder.ts","state/res/Account.ts","state/res/Accounts.ts","cctxPatch/util.ts","cctxPatch/bigone3.ts","state/AppRootStore.ts","cctxPatch/basefex.ts","state/index.ts","pages/Util.tsx","components/Util.tsx","components/UpdatableCard/index.tsx","components/Exchanges/index.tsx","pages/Home/index.tsx","components/RecentTrades/index.tsx","components/OrderBook/index.tsx","components/MarketsView/index.tsx","components/AccountOrders/index.tsx","components/CurrentBalance/index.tsx","components/AccountsBalanceView/index.tsx","components/TradeMainView/index.tsx","components/ExchangeView/index.tsx","pages/Exchange/index.tsx","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["eSide","eTickType","SubStore","root","parent","snapShot","store","this","applySnapShot","self","obj","Object","assign","getStoreSnapShoot","keys","key","hasOwnProperty","val","getSnapShoot","Array","isArray","isObservableArray","map","item","Map","isObservableMap","itemObj","forEach","itemKey","AppSubStore","Config","ls","BrowserStore","observable","BaseResModel","loading","lastUpdateTime","Date","console","warn","forTwo","arr","handle","length","len","i","CommonSubLs","localStorageManager","rootKey","lsGet","k","dv","get","undefined","lsSet","v","set","lsRemove","RecentTrade","loadingStart","market","ccxtIns","fetchTrades","spec","symbol","trades","runInAction","_","orderBy","reverse","o1","o2","tick","zeroMinusTick","price","plusTick","minusTick","zeroPlusTick","loadingEnd","action","OrderBook","transferToOrderBookRes","originItem","size","accumulateSize","fetchOrderBook","then","data","bids","asks","Market","recentTrades","orderBook","updateRes","lastTrade","computed","Exchange","marketsMap","name","window","fetchedMarkets","fetchMarkets","items","res","fetchTickers","each","lastTicker","coinSymbol","allMarkets","filter","o","base","ccxt","exchange","createCCXTOption","from","values","urls","api","private","public","Exchanges","exchangesMap","bigone3","all","createCCXTIns","UiStates","account","Balance","fetchBalance","balances","balance","merge","balancesAll","total","AccountOrder","fetchOrders","orders","ordersObj","keyBy","status","Account","accountOrdersMap","ccxtOptions","accountOrder","createOrUpdateOrdersByMarket","filled","reduce","sum","order","money","type","amount","side","lastPrice","safeGetAccountOrder","outValue","computeOutMoneyByHistory","currentValue","computeCurrentValue","profit","rate","Accounts","accountsMap","lsAccounts","config","lsAccountsAdd","exchangeKey","cctxOption","find","push","lsAccountsRemove","accountName","remove","delete","lsAccountsGetAllAccounts","createAccountsFromLs","a","exchanges","createAccount","ExchangeOriginalClass","cctx","Original","Enhanced","enhanced","args","since","limit","params","Promise","state","d","log","_base","safeString","_quote","isInverse","ccxtSymbol","ccxtSymbolToBaseFexMarket","baseFexSymbolToCcxtSymbol","id","translateSymbol","toUpperCase","quote","baseId","quoteId","active","safeValue","precision","safeInteger","limits","info","publicGetInstruments","instruments","instrument","timestamp","getTime","datetime","iso8601","high","last24hMaxPrice","low","last24hMinPrice","bid","bidVolume","ask","askVolume","vwap","open","close","latestPrice","last","previousClose","change","percentage","last24hPriceChange","average","baseVolume","volume24hInUsd","quoteVolume","query","translateBaseFEXSymbol","privateGetOrders","extend","fnMap","basefex","AppRootStore","accounts","uiStates","StoreContext","React","createContext","useStore","useContext","mobx","Header","Footer","Content","PageStruct","props","AppHeader","style","minHeight","children","observer","history","useHistory","className","theme","mode","defaultSelectedKeys","lineHeight","Item","onClick","MobTable","columns","column","title","capitalize","dataIndex","width","render","originalRender","text","row","index","Ob","r","FormatValue","ceil","FormatPercentage","FormatTimeAuto","formatStr","isToday","format","UpdateBtn","shape","icon","TimeAgo","time","isDate","locale","UpdatableCard","updatableRes","noContentPadding","updateImmediately","doUpdate","useCallback","useEffect","cardProps","omit","classNames","extra","list","padding","dataSource","rowKey","to","Home","RecentTrades","height","autoHide","trade","RecentTradesItem","buy","TickItem","useLocalStore","showNum","both","take","setSide","sell","OrderBookItem","MarketPrice","TabPane","MarketsView","s","Set","add","defaultActiveKey","onChange","balancesNotZero","markets","getMarketsByCoinSymbolFilterActive","tab","renderCurrentAccount","quotes","MarketsTable","onRow","AccountOrders","activeTab","renderTable","activeKey","activeOrders","CurrentBalance","userOrder","computeProfitAndRate","color","BalanceItem","usedPercent","used","freePercent","free","renderRow","percent","showInfo","AccountsBalanceView","AccountsView","formRef","useRef","visible","addAccount","cctxOptions","createAccountAndSaveLs","handleCreate","current","form","validateFields","err","apiKey","secret","AccountCreateForm","wrappedComponentRef","onCancel","onCreate","create","getFieldDecorator","HookForm","Component","okText","onOk","layout","label","rules","required","UserAsset","getMarketsByCoinSymbol","every","TradeMainView","md","sm","xs","span","maxWidth","overflowX","minWidth","ExchangeView","ExchangePage","useParams","changeExchange","App","exact","path","useState","ready","setReady","initExchanges","init","Provider","value","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"ydAAYA,EAcAC,E,2ICZUC,EAAtB,WAIE,WAAYC,EAA4BC,EAAoBC,GAAiB,yBAH7EC,WAG4E,OAF5EF,YAE4E,EAC1EG,KAAKD,MAAQH,EACRA,IACHI,KAAKD,MAASC,MAEhBA,KAAKH,OAASA,EACdG,KAAKC,cAAcH,GAVvB,2DAgDmC,IAApBI,EAAmB,uDAAZF,KACdG,EAAMC,OAAOC,OAAO,GAAIH,GAE5B,OAAOP,EAASW,kBAAkBH,KAnDtC,+BAuDI,IAAMA,EAAMC,OAAOC,OAAO,GAAIL,MAI9B,cAHOG,EAAIJ,aACJI,EAAIN,OAEJM,IA3DX,oCA8DgBL,OA9DhB,yCAc2BK,UAChBA,EAAIJ,aACJI,EAAIN,OACX,cAAkBO,OAAOG,KAAKJ,GAA9B,eAAoC,CAA/B,IAAMK,EAAG,KACZ,GAAIL,EAAIM,eAAeD,GAAM,CAC3B,IAAIE,EAAMP,EAAIK,GAEVE,aAAef,EACjBQ,EAAIK,GAAOE,EAAIC,eACNC,MAAMC,QAAQH,IAAQI,4BAAkBJ,IACjDA,EAAMA,EAAIK,KAAI,SAAAC,GAIZ,OAHIA,aAAgBrB,IAClBqB,EAAOA,EAAKL,gBAEPK,KAETb,EAAIK,GAAOE,GACFA,aAAeO,KAAOC,0BAAgBR,GAAO,WACtD,IAAMS,EAAU,GAChBT,EAAIU,SAAQ,SAACJ,EAAMK,GACjBF,EAAQE,GAAWL,EACfA,aAAgBrB,IAClBwB,EAAQE,GAAWL,EAAKL,mBAG5BR,EAAIK,GAAOW,EAR2C,GAS9B,kBAART,IAChBP,EAAIK,GAAOb,EAASW,kBAAkBI,KAI5C,OAAOP,MA7CX,K,eCCamB,G,MAAb,sIAA6C3B,I,SCEhC4B,GAAb,cAKE,WAAY3B,EAAMC,GAAS,IAAD,6BACxB,4CAAMD,EAAMC,IADY,4CAF1B2B,QAE0B,EAExB,EAAKA,GAAKC,EAFc,EAL5B,2BAA4BH,GAA5B,qCACGI,cADH,yEACwB,KADxB,G,QCFaC,GAAb,qXAKI3B,KAAK4B,SAAU,IALnB,mCASI5B,KAAK4B,SAAU,EACf5B,KAAK6B,eAAiB,IAAIC,OAV9B,kCAcIC,QAAQC,KAAK,8BAdjB,GAAoDV,GAApD,qCACGI,cADH,yEACwB,KADxB,4CAEGA,cAFH,yEAE+B,IAAII,QAFnC,I,SJHYrC,K,UAAAA,E,YAAAA,E,aAAAA,M,cAcAC,K,oBAAAA,E,4BAAAA,E,sBAAAA,E,+BAAAA,M,0BKdL,SAASuC,EAAgBC,EAAUC,GACxC,KAAID,EAAIE,OAAS,GAIjB,IADA,IAAMC,EAAMH,EAAIE,OAAS,EAChBE,EAAI,EAAGA,EAAID,EAAKC,IAAK,CAG5BH,EAFgBD,EAAII,GACPJ,EAAII,EAAI,KAOlB,I,wEAAMC,GAIX,WAAYC,EAAqBC,GAAkB,IAAD,gCAHlDA,aAGkD,OAFlDjB,QAEkD,OAKlDkB,MAAQ,SAACC,EAAWC,GAClB,IACI5B,EADS,EAAKQ,GAAGqB,IAAI,EAAKJ,QAAS,IACvBE,GAIhB,YAHaG,IAAT9B,IACFA,EAAO4B,GAEF5B,GAXyC,KAclD+B,MAAQ,SAACJ,EAAGK,GACV,IAAMpD,EAAO,EAAK4B,GAAGqB,IAAI,EAAKJ,QAAS,IACvC7C,EAAK+C,GAAKK,EACV,EAAKxB,GAAGyB,IAAI,EAAKR,QAAS7C,IAjBsB,KAoBlDsD,SAAW,SAAAP,GACT,IAAM/C,EAAO,EAAK4B,GAAGqB,IAAI,EAAKJ,QAAS,WAChC7C,EAAK+C,GACZ,EAAKnB,GAAGyB,IAAI,EAAKR,QAAS7C,IAtB1BI,KAAKyC,QAAUA,EACfzC,KAAKwB,GAAKgB,GCbDW,IAAb,gcAaInD,KAAKoD,eACCC,EAASrD,KAAKqD,OAdxB,SAgBYrD,KAAKsD,QAAQC,YAAYF,EAAOG,KAAKC,QAhBjD,OAeQC,EAfR,OAmBIC,uBAAY,WACVD,EAASE,IAAEC,QAAQH,EAAQ,YAAa,CAAC,SACzCzB,EAAO2B,IAAEE,QAAQJ,IAAS,SAACK,EAAIC,GAC7B,IAAIC,EAAOvE,EAAUwE,cAEjBF,EAAGG,MAAQJ,EAAGI,MAChBF,EAAOvE,EAAU0E,SACRJ,EAAGG,MAAQJ,EAAGI,MACvBF,EAAOvE,EAAU2E,UACRL,EAAGG,QAAUJ,EAAGI,QAKvBF,EAHAF,EAAGE,OAASvE,EAAU0E,UACtBL,EAAGE,OAASvE,EAAU4E,aAEf5E,EAAU4E,aAEV5E,EAAUwE,eAGrBF,EAAGC,KAAOA,KAEZ,EAAKP,OAASE,IAAEC,QAAQH,EAAQ,YAAa,CAAC,YAGhD1D,KAAKuE,aA3CT,mIAEI,OAAOvE,KAAKH,SAFhB,8BAMI,OAAOG,KAAKH,OAAOA,OAAOyD,YAN9B,GAAiC3B,GAAjC,oCASGD,cATH,wEASqC,MATrC,qCAWG8C,UAXH,yECFaC,IAAb,4RAYEC,uBAAyB,SAACC,GACxB,MAAO,CACLR,MAAOQ,EAAW,GAClBC,KAAMD,EAAW,GACjBE,eAAgBF,EAAW,KAhBjC,yMAuBI3E,KAAKoD,eACCC,EAASrD,KAAKqD,OAxBxB,SAyBUrD,KAAKsD,QAAQwB,eAAezB,EAAOG,KAAKC,QAAQsB,MAAK,SAAAC,GACzD,EAAKC,KAAOD,EAAKC,KAAKlE,IAAI,EAAK2D,wBAC/B,EAAKQ,KAAOF,EAAKE,KAAKnE,IAAI,EAAK2D,2BA3BrC,OA6BI1E,KAAKuE,aA7BT,mIAEI,OAAOvE,KAAKH,SAFhB,8BAMI,OAAOG,KAAKH,OAAOA,OAAOyD,YAN9B,GAA+B3B,GAA/B,kCASGD,cATH,wEASuC,MATvC,kCAUGA,cAVH,wEAUuC,MAVvC,qCAqBG8C,UArBH,yECEaW,IAAb,cAOE,WAAYvF,EAAMC,EAAQ2D,GAAwB,IAAD,6BAC/C,4CAAM5D,EAAMC,IADmC,+KAE/C,EAAK2D,KAAOA,EACZ,EAAK4B,aAAe,IAAIjC,GAAYvD,EAAhB,gBACpB,EAAKyF,UAAY,IAAIZ,GAAU7E,EAAd,gBAJ8B,EAPnD,0LAgBII,KAAKoD,eAhBT,SAiBUpD,KAAKoF,aAAaE,YAjB5B,uBAkBUtF,KAAKqF,UAAUC,YAlBzB,OAmBItF,KAAKuE,aAnBT,sIAuBI,OAAOvE,KAAKoF,aAAa1B,OAAO,KAvBpC,gCA4BI,OAAI1D,KAAKuF,UACAvF,KAAKuF,UAAUpB,MAEf,MA/Bb,GAA4BxC,GAA5B,0CACGD,cADH,qGAEGA,cAFH,gGAGGA,cAHH,yEAGsC,QAHtC,wCAKGA,cALH,yEAK2B,QAL3B,qCAcG8C,UAdH,2GAsBGgB,YAtBH,2GA2BGA,YA3BH,yECAaC,IAAb,cAGE,WAAY7F,EAAMC,GAAS,IAAD,8BACxB,4CAAMD,EAAMC,KAHd6F,WAAahE,aAAWX,IAAoB,GAAI,CAAE4E,KAAM,eAE9B,yLAGxBC,OAAM,OAAN,eAHwB,EAH5B,qMA2BI5F,KAAKoD,eAEApD,KAAK6F,eA7Bd,gCA8BwB7F,KAAKsD,QAAQwC,eA9BrC,OA8BUC,EA9BV,OA+BM/F,KAAK6F,gBAAiB,EACtBlC,uBAAY,WACVoC,EAAM3E,SAAQ,SAAAJ,GACZ,IAAMgF,EAAM,IAAIb,GAAO,EAAKpF,MAAO,EAAMiB,GACzC,EAAK0E,WAAWzC,IAAIjC,EAAKyC,OAAQuC,SAnC3C,uBAwCsBhG,KAAKsD,QAAQ2C,eAxCnC,OAwCQF,EAxCR,OAyCIpC,uBAAY,WACVC,IAAEsC,KAAKH,GAAO,SAAC/E,GACb,IAAMqC,EAAS,EAAKqC,WAAW7C,IAAI7B,EAAKyC,QACpCJ,IACFA,EAAO8C,WAAanF,SAK1BhB,KAAKuE,aAlDT,oJAqDyB6B,GACrB,OAAOpG,KAAKqG,WAAWC,QAAO,SAAAC,GAC5B,OAAOA,EAAE/C,KAAKgD,OAASJ,OAvD7B,yDA0DqCA,GACjC,OAAOpG,KAAKqG,WAAWC,QAAO,SAAAC,GAC5B,OAAOA,EAAE/C,KAAKgD,OAASJ,OA5D7B,gKAoEyB,IAAIR,OAAOa,KAAKzG,KAAK0G,UAAU1G,KAAK2G,kBApE7D,OAoEI3G,KAAKsD,QApET,kJA4EI,IAAMnD,EAAG,qEAET,cADOA,EAAImD,QACJnD,IA9EX,iCAwEI,OAAOS,MAAMgG,KAAK5G,KAAK0F,WAAWmB,cAxEtC,GAA8BlF,GAA9B,qCASGD,cATH,yEASwB,QATxB,sCAWGA,cAXH,wEAWyB,aAXzB,8CAaGA,cAbH,wEAaiC,CAC7BoF,KAAM,CAEJC,IAAK,CACHC,QAAS,+BACTC,OAAQ,8BAlBhB,4CAuBGvF,cAvBH,yEAuB+B,KAvB/B,qCAyBG8C,UAzBH,+GAkEGA,UAlEH,gHAuEGgB,YAvEH,0ECDa0B,IAAb,cAGE,WAAYtH,EAAMC,GAAS,IAAD,uBACxB,4CAAMD,EAAMC,KAHdsH,aAAezF,aAAWX,IAAsB,GAAI,CAAE4E,KAAM,iBAK1D,IAAMyB,EAAU,IAAI3B,GAAS,EAAK1F,MAAlB,gBAChB,EAAKoH,aAAalE,IAAImE,EAAQV,SAAUU,GAJhB,OAmCxBxD,IAAEsC,KAdqB,CACrB,UACA,UACA,SACA,OACA,QACA,WACA,QACA,WAEA,gBAIqB,SAAAP,GACrB,IAAM3E,EAAO,IAAIyE,GAAS,EAAK1F,MAAlB,gBACbiB,EAAK0F,SAAWf,EAChB3E,EAAK2F,iBAAmB,GACxB,EAAKQ,aAAalE,IAAI0C,EAAM3E,MAvCN,EAH5B,qOAoD2BhB,KAAKqH,IApDhC,yEAoDeX,EApDf,iBAqDYA,EAASY,gBArDrB,gaA+CI,OAAO1G,MAAMgG,KAAK5G,KAAKmH,aAAaN,cA/CxC,GAA+BlF,GAA/B,+BA8CG6D,YA9CH,yGAkDGhB,UAlDH,6ECCa+C,IAAb,0ZAOyBb,GACrB1G,KAAK0G,SAAWA,EAChB1G,KAAKqD,OAAS,KACdrD,KAAKwH,QAAU,SAVnB,GAA8BlG,GAA9B,sCACGI,cADH,yEACmC,QADnC,qCAGGA,cAHH,yEAG+B,QAH/B,sCAKGA,cALH,yEAKiC,QALjC,0CAOG8C,UAPH,8ECDaiD,IAAb,8MAKE1G,IAAMW,aAAWX,IAA0B,GAAI,CAAE4E,KAAM,YALzD,kMASI3F,KAAKoD,eATT,SAW0BpD,KAAKsD,QAAQoE,eAXvC,OAWQC,EAXR,OAYI/D,IAAEsC,KAAKyB,GAAU,SAACC,EAAwBpH,GACxCoH,EAAQpB,KAAOhG,YAEVmH,EAAQ,KACf3H,KAAKe,IAAI8G,MAAMF,GAEf3H,KAAKuE,aAlBT,oIAEI,OAAOvE,KAAKH,OAAOyD,UAFvB,kCAuBI,IAAIyC,EAAQnF,MAAMgG,KAAK5G,KAAKe,IAAI8F,UAEhC,OADAd,EAAQnC,IAAEC,QAAQkC,EAAO,CAAC,SAAU,CAAC,WAxBzC,sCA8BI,OAAO/F,KAAK8H,YAAYxB,QAAO,SAAAC,GAC7B,OAAOA,EAAEwB,MAAQ,YA/BvB,GAA6BpG,GAA7B,sCAOG6C,UAPH,gHAqBGgB,YArBH,sHA4BGA,YA5BH,kFCCawC,IAAb,eAKE,WAAYpI,EAAMC,EAAQwD,GAAiB,IAAD,8BACxC,4CAAMzD,EAAMC,KALdkB,IAAMW,aAAWX,IAAwB,GAAI,CAAE4E,KAAM,aAIX,0CAExC,EAAKtC,OAASA,EAF0B,EAL5C,sMA4BIrD,KAAKoD,eAECC,EAASrD,KAAKqD,OACdI,EAASJ,EAAOG,KAAKC,OA/B/B,SAgCqCzD,KAAKsD,QAAQ2E,YAAYxE,GAhC9D,OAgCQyE,EAhCR,OAiCIA,EAAStE,IAAEC,QAAQqE,EAAQ,YAAa,CAAC,SACnCC,EAAYvE,IAAEwE,MAAMF,EAAQ,MAClClI,KAAKe,IAAI8G,MAAMM,GACfnI,KAAKuE,aApCT,qIAWI,OAAOvE,KAAKH,OAAOyD,UAXvB,0BAgBI,IAAIyC,EAAQnF,MAAMgG,KAAK5G,KAAKe,IAAI8F,UAEhC,OADAd,EAAQnC,IAAEC,QAAQkC,EAAO,CAAC,aAAc,CAAC,WAjB7C,mCAuBI,OAAO/F,KAAKqH,IAAIf,QAAO,SAAAC,GAAC,MAAiB,SAAbA,EAAE8B,cAvBlC,GAAkC1G,GAAlC,sCAGGD,cAHH,yEAG+B,QAH/B,gCAcG8D,YAdH,2GAqBGA,YArBH,iHA0BGhB,UA1BH,4ECEa8D,IAAb,eACE,WAAY1I,EAAMC,GAAS,IAAD,6BACxB,4CAAMD,EAAMC,IADY,iOAiC1B0I,iBAAmB7G,aAAWX,IAC5B,GACA,CAAE4E,KAAM,qBAhCR,EAAKgC,SAAW,IAAIF,GAAQ7H,EAAZ,gBAHQ,EAD5B,mLAgBII,KAAKoD,eAELpD,KAAKuE,aAlBT,mLAsBsBmC,GAtBtB,8EAuBI1G,KAAK0G,SAAWA,EACV8B,EAAcpI,OAAOC,OACzB,GACAqG,EAASC,iBACT3G,KAAK2G,kBA3BX,SA6ByB,IAAIf,OAAOa,KAAKC,EAASA,UAAU8B,GA7B5D,OA6BIxI,KAAKsD,QA7BT,iKAuCuCD,GACnC,IAAMI,EAASJ,EAAOG,KAAKC,OACvBgF,EAAezI,KAAKuI,iBAAiB1F,IAAIY,GAK7C,OAJKgF,IACHA,EAAe,IAAIT,GAAahI,KAAKD,MAAOC,KAAMqD,GAClDrD,KAAKuI,iBAAiBtF,IAAIQ,EAAQgF,IAE7BA,IA9CX,0CAiDsBpF,GAClB,OAAOrD,KAAK0I,6BAA6BrF,KAlD7C,+CAsD2B6E,GAmBvB,OAlBgBA,EAAO5B,QAAO,SAAAC,GAC5B,OAAOA,EAAEoC,OAAS,KAGEC,QAAO,SAACC,EAAKC,GACjC,IAAIC,EAAQ,EAWZ,OAREA,EADiB,UAAfD,EAAME,KACAF,EAAM3E,MAAQ2E,EAAMG,OAEpBH,EAAMH,OAGG,SAAfG,EAAMI,OACRH,IAAU,GAELF,EAAME,IACZ,KAxEP,0CA4EsB1F,GAClB,IAAM8F,EAAY9F,EAAO8F,UAGzB,OADEnJ,KAAK2H,SAAS5G,IAAI8B,IAAIQ,EAAOG,KAAKgD,MAAMuB,MAAQoB,IA/EtD,2CAmFuB9F,GACnB,IAAMoF,EAAezI,KAAKoJ,oBAAoB/F,GACxCgG,EAAWrJ,KAAKsJ,yBAAyBb,EAAapB,KACtDkC,EAAevJ,KAAKwJ,oBAAoBnG,GAC9C,MAAO,CACLoG,OAAQF,EAAeF,EACvBK,MAAOH,EAAeF,GAAYA,KAzFxC,qCA8FI,IAAMlJ,EAAG,qEAGT,cAFOA,EAAImD,eACJtD,KAAK0G,SACLvG,MAjGX,GAA6BwB,GAA7B,uCAOGD,cAPH,yEAOwB,QAPxB,oCAQGA,cARH,wEAQqB,aARrB,wCAUGA,cAVH,yEAUmC,QAVnC,gDAYGA,cAZH,wEAYiC,MAZjC,sCAcG8C,UAdH,kHAqBGA,UArBH,oHAgCG9C,cAhCH,uHAuCG8C,UAvCH,+FCDamF,IAAb,eAGE,WAAY/J,EAAMC,GAAS,IAAD,8BACxB,4CAAMD,EAAMC,KAHd+J,YAAclI,aAAWX,IAAqB,GAAI,CAAE4E,KAAM,gBAEhC,EAoC1BkE,WAAa,IAAItH,GAAY,EAAKxC,MAAM+J,OAAOtI,GAAI,YApCzB,EAqC1BuI,cAAgB,SAACC,EAAqBxC,EAAkByC,GACtD,IAAM/H,EAAM,EAAK2H,WAAWnH,MAAM,OAAQ,IAChCR,EAAIgI,MAAK,SAAA3D,GAAC,OAAIA,EAAEZ,OAAS6B,EAAQ7B,QAEzC5D,QAAQC,KAAK,2BAAOgI,EAAYxC,GAEhCtF,EAAIiI,KACF/J,OAAOC,OACL,GACA,CACE2J,cACArE,KAAM6B,EAAQ7B,KACdsE,WAAYA,KAKpB,EAAKJ,WAAW9G,MAAM,OAAQb,IAtDN,EAyD1BkI,iBAAmB,SAACC,GAClB,IAAInI,EAAM,EAAK2H,WAAWnH,MAAM,OAAQ,IACxCkB,IAAE0G,OAAOpI,GAAK,SAAAqE,GAAC,OAAIA,EAAEZ,OAAS0E,KAE9B,EAAKT,YAAYW,OAAOF,GACxB,EAAKR,WAAW9G,MAAM,OAAQb,IA9DN,EAiE1BsI,yBAA2B,WAEzB,OADY,EAAKX,WAAWnH,MAAM,OAAQ,KAlElB,EAsE1B+H,qBAtE0B,sBAsEH,0CAAAC,EAAA,sDACfxI,EAAM,EAAKsI,2BADI,8BAELtI,EAFK,qEAEVqE,EAFU,UAGbG,EAAW,EAAK3G,MAAM4K,UAAUxD,aAAatE,IAAI0D,EAAEyD,cAHtC,kCAKX,EAAKY,cAAclE,EAAUH,EAAEZ,KAAMY,EAAE0D,YAL5B,iVAnErB,EAAKQ,uBAHmB,EAH5B,oHAcsB/D,EAAoBf,EAAcsE,GAdxD,2EAeQjK,KAAK4J,YAAY/G,IAAI8C,GAf7B,gBAgBM5D,QAAQC,KAAK,uFAAiB2D,GAhBpC,8BAkBY6B,EAAU,IAAIc,GAAQtI,KAAKD,MAAOC,OAEhC2F,KAAOA,EACf6B,EAAQb,iBAAmBvG,OAAOC,OAChCmH,EAAQb,iBACRsD,GAvBR,SAyBYzC,EAAQF,cAAcZ,GAzBlC,cA0BM1G,KAAK4J,YAAY3G,IAAI0C,EAAM6B,GA1BjC,kBA2BaA,GA3Bb,kMAgC+Bd,EAAoBf,EAAcsE,GAhCjE,uFAiC0BjK,KAAK4K,cAAclE,EAAUf,EAAMsE,GAjC7D,QAiCUzC,EAjCV,SAmCMxH,KAAK+J,cAAcrD,EAASA,SAAUc,EAASyC,GAnCrD,qIAUI,OAAOrJ,MAAMgG,KAAK5G,KAAK4J,YAAY/C,cAVvC,GAA8BlF,GAA9B,gCASG6D,YATH,4GAaGhB,UAbH,+HA+BGA,UA/BH,yF,UCLaqG,GAAb,mCCAO,WACL,IAAMC,EAAQlF,OAAOa,KAIfsE,EAAgCD,EAAI,QAEpCE,EAPgB,YAQpB,aAAuB,IAAD,uBACpB,+CAGFC,UAAW,EAJW,2BAANC,EAAM,yBAANA,EAAM,uBAEpB,yBAAwBH,EAAYG,GAFhB,EARF,kOAcCA,EAdD,yBAcCA,EAdD,eAeXzH,EAA6ByH,EAflB,GAeJC,EAAsBD,EAflB,GAeEE,EAAgBF,EAflB,GAeQG,EAAUH,EAflB,qBAgBXI,QAAQjE,IAAI,CAAC,mEACA5D,EAAQ0H,EAAOC,EAAOhL,OAAOC,OAAO,GAAG,CACvDkL,MAAO,WACPF,IAHe,mEAIC5H,EAAQ0H,EAAOC,EAAOhL,OAAOC,OAAO,GAAG,CACvDkL,MAAO,UACPF,MACDtG,MAAK,YAAqB,IAAD,mBACtBmD,GADsB,UACb,IAQb,OAPAA,EAAO9G,SAAQ,SAAAmF,GACTA,EAAEpC,MACJoC,EAAEyC,KAAO,QAETzC,EAAEyC,KAAO,YAGNd,MAhCS,2GAOC2C,IA8BvBC,EAAI,QAASE,EC9Bf5D,GCUO,WACL,IAAMX,EAAOb,OAAOa,KAEdsE,EAAiCtE,EAAI,QACrCuE,EAJe,YAMnB,aAAuB,IAAD,uBACpB,+CAFFC,UAAW,EACW,2BAANC,EAAM,yBAANA,EAAM,uBAEpB,yBAAwBH,EAAYG,GAFhB,EANH,wEAWjB,IAAMM,EAAC,iEAIP,OAHAzJ,QAAQ0J,IAAI,MAAMzL,MAElBwL,EAAEzE,IAAIE,OAAOpE,IAAIsH,KAAK,eACfqB,IAfU,iCAsBRnI,EAAuBgI,GAChC,IAAIK,EAAQ1L,KAAK2L,WAAWtI,EAAQ,gBAChCuI,EAAS5L,KAAK2L,WAAWtI,EAAQ,iBAGrC,GAAIA,EAAOwI,UAAW,CAAC,IAAD,EACF,CAACD,EAAQF,GAA1BA,EADmB,KACZE,EADY,KAItB,IAAME,EAAU,UAAMJ,EAAN,YAAeE,GAI/B,OAHAZ,EAASe,0BAA0B9I,IAAI6I,EAAYzI,GACnD2H,EAASgB,0BAA0B/I,IAAII,EAAOI,OAAQqI,GAE/C,CACLG,GAAIjM,KAAK2L,WAAWtI,EAAQ,UAC5BI,OAAQzD,KAAKkM,gBAAgBR,EAAOE,GACpCpF,KAAMkF,EAAMS,cACZC,MAAOR,EAAOO,cACdE,OAAQX,EACRY,QAASV,EACTW,OAAQvM,KAAKwM,UAAUnJ,EAAQ,UAC/BoJ,UAAW,CACTtI,MAAOnE,KAAK0M,YAAYrJ,EAAQ,cAElCsJ,OAAQ,GACRC,KAAMvJ,KA/CS,qCAoDjB,OAAO,qEAAqB0B,MAAK,SAAAC,GAC/B,OAAOA,OArDQ,6CAyDI8G,GACrB,IAAMzI,EAAS2H,EAASe,0BAA0BlJ,IAAIiJ,GAClDrI,EAAS,GAIb,OAHIJ,IACFI,EAASJ,EAAOI,QAEXA,IA/DU,4KAmEsBzD,KAAK6M,uBAnE3B,cAoEjBC,GADIA,EAnEa,QAoES/L,KAAI,SAACgM,GAC7B,IAAMtJ,EAASuH,EAASgB,0BAA0BnJ,IAAIkK,EAAWtJ,QAC3DuJ,GAAY,IAAIlL,MAAOmL,UAC7B,MAAO,CACLxJ,SACAmJ,KAAMG,EACNC,YACAE,SAAU,EAAKC,QAAQH,GAEvBI,KAAML,EAAWM,gBACjBC,IAAKP,EAAWQ,gBAChBC,SAAK1K,EACL2K,eAAW3K,EACX4K,SAAK5K,EACL6K,eAAW7K,EACX8K,UAAM9K,EACN+K,UAAM/K,EACNgL,MAAOf,EAAWgB,YAClBC,KAAMjB,EAAWgB,YACjBE,mBAAenL,EACfoL,YAAQpL,EACRqL,WAAYpB,EAAWqB,mBACvBC,aAASvL,EACTwL,WAAYvB,EAAWwB,eACvBC,iBAAa1L,MA5FA,kBA+FVc,IAAEwE,MAAM0E,EAAa,WA/FX,qRAkGArJ,EAlGA,oCAkGSX,EAlGT,oCAkG4BA,EAAWsI,EAlGvC,oCAkG+CtI,EAAWuI,EAlG1D,+BAkGmE,GAC9EoD,EAAQ,CACZ,OAAUzO,KAAK0O,uBAAwBjL,GACvC,MAAS2H,GArGM,SAuGEpL,KAAK2O,iBAAkB,CACxC,MAAS3O,KAAK4O,OAAQH,EAAOzO,KAAKwM,UAAWnB,EAAQ,QAAS,OAxG/C,cAuGbnD,EAvGa,yBA0GVlI,KAAK6O,MAAO3G,EAAQ,aAAczE,IA1GxB,2GAIEoH,IAAjBG,EAeGe,0BAA4B,IAAI9K,IAfnC+J,EAgBGgB,0BAA4B,IAAI/K,IA2FzCwF,EAAI,QAASuE,EDxHf8D,GAEO,IAAMC,GAAb,YAQE,aAAe,IAAD,8BACZ,4CAAM,KAAM,QARdpJ,KAAO,aAOO,EALdmE,YAKc,IAJda,eAIc,IAHdqE,cAGc,IAFdC,cAEc,EAGZ,EAAKnF,OAAS,IAAIvI,EAAJ,+BACd,EAAKoJ,UAAY,IAAIzD,GAAJ,+BACjB,EAAK8H,SAAW,IAAIrF,GAAJ,+BAChB,EAAKsF,SAAW,IAAI1H,GAAJ,+BANJ,EARhB,2BAAkC5H,GERrBuP,GAAeC,IAAMC,cAAc,MAEzC,SAASC,KACd,OAAOC,qBAAWJ,IAGpBtJ,OAAM,KAAW2J,E,4ECLTC,G,KAAAA,OAAQC,G,KAAAA,OAAQC,G,KAAAA,QAEXC,GAAa,SAASC,GACjC,OACE,4BACE,kBAACC,GAAD,MACA,kBAACH,GAAD,CAASI,MAAO,CAAEC,UAAW,SAAWH,EAAMI,UAC9C,kBAACP,GAAD,iBAKAI,GAAYI,cAAS,WAAY,IAC7BhB,EAAaI,KAAbJ,SACFiB,EAAUC,eAEhB,OACE,kBAACX,GAAD,CAAQY,UAAW,aACjB,wBACEC,MAAM,QACNC,KAAK,aACLC,oBAAqB,CAAC,aACtBT,MAAO,CAAEU,WAAY,SAErB,uBAAMC,KAAN,CACEjQ,IAAI,YACJkQ,QAAS,WACPR,EAAQ/F,KAAK,OAHjB,aAQA,uBAAMsG,KAAN,CACEjQ,IAAI,WACJkQ,QAAS,WACP,IAAM1G,EAAciF,EAASvI,SACzBuI,EAASvI,SAASA,SAClB,GACJwJ,EAAQ/F,KAAR,oBAA0BH,MAN9B,iB,kEC7BD,SAAS2G,GAAYf,GAC1B,IAAMgB,EAAUhB,EAAMgB,QAAQ7P,KAAI,SAAA8P,GAMhC,GALAA,EAAOC,MAAQD,EAAOC,OAASlN,IAAEmN,WAAWF,EAAOG,WACnDH,EAAOrQ,IAAMqQ,EAAOrQ,KAAOqQ,EAAOG,UAElCH,EAAOI,MAAQJ,EAAOI,OAAS,IAE3BJ,EAAOK,OAAQ,CACjB,IAAMC,EAAiBN,EAAOK,OAC9BL,EAAOK,OAAS,SAACE,EAAMC,EAAKC,GAC1B,OACE,kBAACC,GAAD,CACEC,EAAG,WACD,IAAM9Q,EAAM2Q,EAAIR,EAAOG,WACvB,OAAOG,EAAezQ,EAAK2Q,EAAKC,YAMxCT,EAAOK,OAAS,SAACE,EAAMC,GACrB,OACE,kBAACE,GAAD,CACEC,EAAG,WAED,OADYH,EAAIR,EAAOG,eAOjC,OAAOH,KAET,OAAO,wCAAcjB,EAAd,CAAqBgB,QAASA,KAGhC,SAASW,GAAG3B,GACjB,OAAO,kBAAC,KAAD,CAAUsB,OAAQtB,EAAM4B,IAG1B,IAAMC,GAAcxB,cAAS,SAAqBL,GAGrD,IACMlP,EAAgBkP,EAAhBlP,IAAK2C,EAAWuM,EAAXvM,OACThB,EAAM,EACW,SAAjBgB,EAAO+I,QACT/J,EAAM,GAER,IAAMW,EAAIY,IAAE8N,KAAKhR,EAAK2B,GACtB,OACE,8BACGW,EADH,IACOK,EAAO+I,UAKLuF,GAAmB1B,cAAS,SAAqBL,GAG1D,IACMlP,EAAiBkP,EAAjBlP,IADP,EACwBkP,EAAZvN,WADZ,MACkB,EADlB,EAEKW,EAAIY,IAAE8N,KAAW,IAANhR,EAAW2B,GAC5B,OAAO,8BAAOW,EAAP,SAGI4O,GAAiB,SAAChC,GAAmC,IACxDlP,EAAQkP,EAARlP,IACJmR,EAAS,sBAIb,OAHIC,aAAQpR,KACVmR,EAAS,YAEJE,aAAOrR,EAAKmR,IAGRG,GAAY,SAACpC,GACxB,OACE,wBACE5G,KAAM,UACNiJ,MAAM,SACNC,KAAK,OACLxB,QAASd,EAAMc,QACf9O,QAASgO,EAAMhO,WAKRuQ,GAAUlC,cAAS,SAASL,GACvC,IAAIwC,EAAOxC,EAAMwC,KAEjB,OAAIxO,IAAEyO,OAAOzC,EAAMwC,MACV,kBAAC,KAAD,CAAclF,SAAU0C,EAAMwC,KAAME,OAAO,UAE3CF,K,sDC5FEG,GAAgBtC,cAAS,SACpCL,GAKC,IAEC4C,EAGE5C,EAHF4C,aAFF,EAKI5C,EAFF6C,wBAHF,WAKI7C,EADF8C,yBAJF,SAOMC,EAAWC,sBAAW,sBAAC,sBAAAlI,EAAA,+EAEnB8H,EAAalN,YAFM,sDAIzBvD,QAAQC,KAAK,sBAAb,MAJyB,wDAM1B,CAACwQ,IAEJK,qBAAU,WACJH,GACFC,MAED,IAEH,IAAMG,EAAYlP,IAAEmP,KAAKnD,EAAO,CAC9B,eACA,mBACA,sBAGF,OACE,wCACMkD,EADN,CAEEhC,MACE,yBAAKV,UAAW,uBACd,6BAAMR,EAAMkB,OACZ,yBAAKV,UAAW,cACd,kBAAC+B,GAAD,CAASC,KAAMI,EAAa3Q,mBAIlCuO,UAAW4C,KACT,gBACA,CACEP,iBAAkBA,GAEpBK,EAAU1C,WAEZxL,KAAK,QACLqO,MACE,6BACE,kBAAC,GAAD,CACEvC,QAAS,WACPiC,KAEF/Q,QAAS4Q,EAAa5Q,aAK3BkR,EAAU9C,aChEJ9I,GAAY+I,cAAS,SAAmBL,GAAY,IACvDjF,EAAc0E,KAAd1E,UAEFuI,EAAOvI,EAAUtD,IAEvB,OACE,yBAAK+I,UAAW,YAAaN,MAAO,CAAEqD,QAAS,KAC7C,kBAAC,GAAD,CAAerC,MAAO,0CAAsB0B,aAAc7H,GACxD,kBAACgG,GAAD,CACE/L,KAAM,QACNwO,WAAYF,EACZG,OAAQ,WACRzC,QAAS,CACP,CACEE,MAAO,KACPE,UAAW,WACXE,OAAQ,SAAClO,EAAGqO,GAAJ,OACN,6BACE,kBAAC,KAAD,CAAMiC,GAAE,oBAAejC,EAAI3K,WAAa1D,cCtB7CuQ,GAAOtD,cAAS,WAC3B,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,U,kHCEOuD,GAAevD,cAAS,SAAsBL,GAEvD,IAEI5J,EADa4J,EAAXvM,OACW+B,aACb8N,EAAOlN,EAAItC,OAEjB,OACE,kBAAC,GAAD,CACEoN,MAAO,gBACPV,UAAW,eACXoC,aAAcxM,GAEd,kBAAC,KAAD,CAAY8J,MAAO,CAAE2D,OAAQ,KAAOC,UAAU,GAC5C,yBAAKtD,UAAW,yBACb8C,EAAKnS,KAAI,SAAAwF,GAAC,OACT,kBAAC,GAAD,CAAkB/F,IAAK+F,EAAE0F,GAAI0H,MAAOpN,aAQ1CqN,GAAmB3D,cAAS,SAA0BL,GAExD,IACM+D,EAAU/D,EAAV+D,MAER,OACE,yBAAKvD,UAAU,8BACb,kBAAC,GAAD,CAAUnM,KAAM0P,EAAM1P,OACtB,yBAAKmM,UAAU,SAASuD,EAAMxP,OAC9B,yBAAKiM,UAAU,UAAUuD,EAAM1K,QAC/B,yBAAKmH,UAAU,QACb,kBAAC,GAAD,CAAgB1P,IAAKiT,EAAM3G,aAE7B,yBAAKoD,UAAU,QAAQuD,EAAMzK,OAASzJ,EAAMoU,IAAM,IAAM,SAKxDC,GAAW7D,cAAS,SAAkBL,GAA6B,IAC/D3L,EAAS2L,EAAT3L,KAEJiO,EAAO,wBAAMlJ,KAAK,aAEtB,OAAQ/E,GACN,KAAKvE,EAAU0E,SACb8N,EAAO,wBAAMlJ,KAAK,aAClB,MACF,KAAKtJ,EAAU4E,aACb4N,EAAO,wBAAMlJ,KAAK,aAClB,MACF,KAAKtJ,EAAU2E,UACb6N,EAAO,wBAAMlJ,KAAK,eAClB,MACF,KAAKtJ,EAAUwE,cACbgO,EAAO,wBAAMlJ,KAAK,eAItB,OAAO,yBAAKoH,UAAS,eAAUnM,IAASiO,MC9D7BzN,I,OAAYwL,cAAS,SAAmBL,GAEjD,IACMvM,EAAWuM,EAAXvM,OACF2C,EAAM3C,EAAOgC,UAEbkG,EAAQwI,cAAc,iBAAO,CACjCC,QAAS,GACT9K,KAAMzJ,EAAMwU,KACZ,WAQE,OANI1I,EAAMrC,OAASzJ,EAAMwU,KACfrQ,IAAEsQ,KAAKlO,EAAId,KAAMqG,EAAMyI,SAEvBhO,EAAId,MAESpB,WAGzB,WACE,OAAIyH,EAAMrC,OAASzJ,EAAMwU,KAChBrQ,IAAEsQ,KAAKlO,EAAIf,KAAMsG,EAAMyI,SAEvBhO,EAAIf,MAIfkP,QArBiC,SAqBzBjL,GACNqC,EAAMrC,KAAOA,OAIThE,EAAeqG,EAAfrG,KAAMD,EAASsG,EAATtG,KAEd,OACE,kBAAC,GAAD,CACE6L,MAAO,YACPV,UAAW,YACXoC,aAAcxM,GAEd,kBAAC,KAAD,CAAY8J,MAAO,CAAE2D,OAAQ,KAAOC,UAAU,GAC5C,yBAAKtD,UAAW,sBACd,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,YACb,wBACExL,KAAM,QACNsN,KAAK,wBACLxB,QAAS,kBAAMnF,EAAM4I,QAAQ1U,EAAMwU,SAErC,wBACErP,KAAM,QACNsN,KAAK,qBACLxB,QAAS,kBAAMnF,EAAM4I,QAAQ1U,EAAMoU,QAErC,wBACEjP,KAAM,QACNsN,KAAK,wBACLxB,QAAS,kBAAMnF,EAAM4I,QAAQ1U,EAAM2U,WAKzC,yBAAKhE,UAAU,mBACZ7E,EAAMrC,OAASzJ,EAAMwU,KACpB,oCACG/O,EAAKnE,KAAI,SAACwF,EAAG+K,GAAJ,OACR,kBAAC,GAAD,CAAe9Q,IAAK8Q,EAAOtQ,KAAMuF,OAEnC,yBAAK6J,UAAW,eACd,kBAAC,GAAD,CAAa/M,OAAQA,KAEtB4B,EAAKlE,KAAI,SAACwF,EAAG+K,GAAJ,OACR,kBAAC,GAAD,CAAe9Q,IAAK8Q,EAAOtQ,KAAMuF,QAIrC,oCACE,yBAAK6J,UAAW,eACd,kBAAC,GAAD,CAAa/M,OAAQA,KAEtBkI,EAAMrC,OAASzJ,EAAMoU,KACpB3O,EAAKnE,KAAI,SAACwF,EAAG+K,GAAJ,OACP,kBAAC,GAAD,CAAe9Q,IAAK8Q,EAAOtQ,KAAMuF,OAEpCgF,EAAMrC,OAASzJ,EAAM2U,MACpBnP,EAAKlE,KAAI,SAACwF,EAAG+K,GAAJ,OACP,kBAAC,GAAD,CAAe9Q,IAAK8Q,EAAOtQ,KAAMuF,gBAW/C8N,GAAgBpE,cAAS,SAAuBL,GAElD,IACM5O,EAAS4O,EAAT5O,KAER,OACE,yBAAKoP,UAAU,iBACb,yBAAKA,UAAW,SAAUpP,EAAKmD,OAC/B,yBAAKiM,UAAW,QAASpP,EAAK4D,MAC9B,yBAAKwL,UAAW,kBAAmBpP,EAAK6D,oBAKxCyP,GAAcrE,cAAS,SAAqBL,GAA4B,IACpEvM,EAAWuM,EAAXvM,OACR,OAAO,6BAAMA,EAAO8F,c,4BCjHdoL,I,YAAAA,SAEKC,GAAcvE,cAAS,SAAqBL,GAErD,IACMlJ,EAAakJ,EAAblJ,SAEAuI,EAAaI,KAAbJ,SAEF1D,EAAQwI,cAAc,iBAAO,CACjC,aACE,IAAMU,EAAI,IAAIC,IAKd,OAJahO,EAASL,WACjBjF,SAAQ,SAAAmF,GACXkO,EAAEE,IAAIpO,EAAE/C,KAAK4I,UAERxL,MAAMgG,KAAK6N,QA2BtB,OACE,kBAAC,GAAD,CACE3D,MAAO,UACPV,UAAW,UACXoC,aAAc9L,EACdgM,mBAAmB,GAEnB,wBAAMkC,iBAAiB,IAAIC,SAAU,cA9BZ,WAC3B,IAAIrN,EAAUyH,EAASzH,QAEvB,GAAKA,EAEE,CACL,IAAMG,EAAWH,EAAQG,SAASmN,gBAE5BC,EAAoB,GAO1B,OANApN,EAASvG,SAAQ,SAAAwG,GACfmN,EAAQ5K,KAAR,MAAA4K,EAAO,aACFvN,EAAQd,SAASsO,mCAAmCpN,EAAQpB,WAKjE,kBAAC+N,GAAD,CAASU,IAAK,wBAAMjM,KAAK,SAAWxI,IAAKgH,EAAQ7B,MAC/C,kBAAC,GAAD,CAAcoP,QAASA,KAb3B,OAAO,KA2BJG,GAEA3J,EAAM4J,OAAOpU,KAAI,SAAAiC,GAChB,IAAM+R,EAAUrO,EAASL,WAAWC,QAClC,SAAAC,GAAC,OAAIA,EAAE/C,KAAK+I,QAAUhG,EAAE/C,KAAK4I,QAAUpJ,KAEzC,OACE,kBAACuR,GAAD,CAASU,IAAKjS,EAAGxC,IAAKwC,GACpB,kBAAC,GAAD,CAAc+R,QAASA,aAS/BK,GAAenF,cAAS,SAAsBL,GAEhD,IACMmF,EAAYnF,EAAZmF,QAEA9F,EAAaI,KAAbJ,SAER,OACE,kBAAC0B,GAAD,CACE/L,KAAM,QACNwO,WAAY2B,EACZ1B,OAAQ,SAAAhC,GACN,OAAOA,EAAI7N,KAAKC,QAElB4R,MAAO,SAAChE,GACN,MAAO,CACLX,QADK,WAEHzB,EAAS5L,OAASgO,KAIxBT,QAAS,CACP,CACEI,UAAW,WACXE,OAAQ,SAAClO,EAAGqO,GAAJ,OAAY,6BAAMA,EAAI7N,KAAKC,UAErC,CACEuN,UAAW,QACXE,OAAQ,SAAClO,EAAGqO,GAAJ,OACN,6BAAMA,EAAIlL,YAAckL,EAAIlL,WAAW2H,eCjG7CyG,I,OAAU,KAAKA,SAERe,GAAgBrF,cAAS,SAAuBL,GAGzD,IACMpI,EAAoBoI,EAApBpI,QAASnE,EAAWuM,EAAXvM,OAEX2C,EAAMwB,EAAQ4B,oBAAoB/F,GAElCkI,EAAQwI,cAAc,iBAAO,CACjCwB,UAAW,aAGb,IAAKvP,EACH,OAAO,KAGT,IAAMwP,EAAc,SAAAtN,GAClB,OACE,kBAACyI,GAAD,CACE/L,KAAM,QACNwO,WAAYlL,EACZmL,OAAQ,KACRzC,QAAS,CACP,CACEI,UAAW,UAEb,CACEA,UAAW,YACXE,OAAQ,SAAAlO,GAAC,OAAI,kBAAC,GAAD,CAAgBtC,IAAKsC,MAEpC,CACEgO,UAAW,QAEb,CACEA,UAAW,QAEb,CACEA,UAAW,UAGb,CACEA,UAAW,UAEb,CACEA,UAAW,QAEb,CACEA,UAAW,SAEb,CACEA,UAAW,UAEb,CACEA,UAAW,iBAOrB,OACE,kBAAC,GAAD,CACEF,MACE,uCACS,kBAACS,GAAD,CAAIC,EAAG,kBAAMnO,EAAOG,KAAKC,WAGpC2M,UAAW,aACXoC,aAAcxM,GAEd,yBAAKoK,UAAW,uBACd,wBACEwE,iBAAiB,MACjBC,SAAU,SAAAY,GACRlK,EAAMgK,UAAYE,IAGpB,kBAAC,GAAD,CAASR,IAAI,SAASzU,IAAI,UACvBgV,EAAYxP,EAAI0P,eAEnB,kBAAC,GAAD,CAAST,IAAI,MAAMzU,IAAI,OACpBgV,EAAYxP,EAAIqB,Y,wHClFhBsO,I,OAAiB1F,cAAS,SAAwBL,GAG3D,IACMvM,EAAoBuM,EAApBvM,OAAQmE,EAAYoI,EAAZpI,QAIVxB,EAAMwB,EAAQG,SACdC,EAAU5B,EAAIjF,IAAI8B,IAAIQ,EAAOG,KAAKgD,MAExC,IAAKR,IAAQ4B,EACX,OAAO,KAGT,IAAMgO,EAAYpO,EAAQ4B,oBAAoB/F,GAZ7C,EAawBmE,EAAQqO,qBAAqBxS,GAA9CoG,EAbP,EAaOA,OAAQC,EAbf,EAaeA,KAEhB,OACE,kBAAC,GAAD,CACEoH,MACE,6BACGtJ,EAAQ7B,KADX,IACiB,kBAAC4L,GAAD,CAAIC,EAAG,kBAAMnO,EAAOG,KAAKC,WAG5C2M,UAAW,cACXoC,aAAcnP,GAEd,kBAAC,KAAD,CAAYyM,MAAO,CAAE2D,OAAQ,KAAOC,UAAU,GAC5C,yBAAKtD,UAAW,wBACd,kBAAC,GAAD,CAAaxI,QAASA,IAEtB,yBAAKwI,UAAW,iBACd,sCACA,6BACE,kBAACqB,GAAD,CAAa/Q,IAAK+I,EAAQpG,OAAQA,EAAOG,OAD3C,KACsD,IACpD,kBAACmO,GAAD,CAAkBjR,IAAKgJ,KAGzB,yBAAK0G,UAAW,cACd,6BACE,wBAAO0F,MAAM,MAAM1E,KAAK,SACxB,kBAACK,GAAD,CACE/Q,IAAK8G,EAAQ8B,yBAAyBsM,EAAUvO,KAChDhE,OAAQA,EAAOG,QAInB,6BACE,wBAAOsS,MAAM,QAAQ1E,KAAK,kBAC1B,kBAACK,GAAD,CACE/Q,IAAK8G,EAAQgC,oBAAoBnG,GACjCA,OAAQA,EAAOG,iBAW3BuS,GAAc9F,cAAS,SAAqBL,GAE9C,IACMhI,EAAYgI,EAAZhI,QACFoO,EAAepO,EAAQqO,KAAOrO,EAAQG,MAAS,IAC/CmO,EAAetO,EAAQuO,KAAOvO,EAAQG,MAAS,IAE/CqO,EAAY,SAACN,EAAeO,EAAiBjF,EAAc1Q,GAC/D,OACE,yBAAK0P,UAAW,kBACd,wBAAUiG,QAASA,EAASzR,KAAK,QAAQ0R,UAAU,IACnD,yBAAKlG,UAAW,sBACd,wBAAO/H,OAAO,UAAU+I,KAAMA,IAC9B,yBAAKhB,UAAW,sBAAuBxI,EAAQG,UAMvD,OACE,yBAAKqI,UAAW,eACbgG,EAAU,EAAS,IAAK,QAASxO,EAAQG,OACzCqO,EAAU,EAASF,EAAa,OAAQtO,EAAQuO,MAChDC,EAAU,EAASJ,EAAa,OAAQpO,EAAQqO,UCpF/C1B,G,KAAAA,QAEKgC,GAAsBtG,cACjC,SAA6BL,GAAgC,IACnDlJ,EAAakJ,EAAblJ,SAEAuI,EAAaI,KAAbJ,SAER,OACE,wBAAM2F,iBAAiB,IAAIC,SAAU,cACnC,kBAAC,GAAD,CAASI,IAAI,WAAWzU,IAAI,KAC1B,kBAAC,GAAD,CAAckG,SAAUA,KAE1B,kBAAC,GAAD,CAASuO,IAAI,UAAUzU,IAAI,KACxByO,EAAS5L,QAAU4L,EAASzH,SAC3B,kBAAC,GAAD,CACEA,QAASyH,EAASzH,QAClBnE,OAAQ4L,EAAS5L,cASlBmT,GAAevG,cAAS,SAAsBL,GAEvD,IACMlJ,EAAakJ,EAAblJ,SADP,EAG8B2I,KAAvBL,EAHP,EAGOA,SAAUC,EAHjB,EAGiBA,SAEZwH,EAAUC,iBAAO,MAEjBnL,EAAQwI,cAAc,iBAAO,CACjC4C,SAAS,EAETC,WAHiC,SAGtBjR,EAAMkR,GACf7H,EAAS8H,uBAAuBpQ,EAAUf,EAAMkR,GAAa9R,MAAK,WAChEhD,QAAQ0J,IAAI,4BACZF,EAAMoL,SAAU,MAIpBI,aAViC,WAWlBN,EAAQO,QAAQpH,MAAMqH,KAC9BC,gBAAe,SAACC,EAAKtQ,GACpBsQ,IAGJpV,QAAQ0J,IAAI,4BAA6B5E,GAEzC0E,EAAMqL,WAAW/P,EAAOlB,KAAM,CAC5ByR,OAAQvQ,EAAOuQ,OACfC,OAAQxQ,EAAOwQ,kBAMvBxE,qBAAU,cAAU,IAEpB,IAAMK,EAAOlE,EAAS3H,IAAIf,QAAO,SAAAC,GAAC,OAAIA,EAAEG,WAAaA,KAErD,OACE,kBAAC,GAAD,CACEoK,MAAO,4CAAkBpK,EAASA,UAClC8L,aAAcxD,GAEd,yBAAKc,MAAO,CAAEqD,QAAS,KACrB,wBACEnK,KAAM,UACN0H,QAAS,WACPnF,EAAMoL,SAAU,IAHpB,QAUF,kBAACW,GAAD,CACEC,oBAAqBd,EACrBE,QAASpL,EAAMoL,QACfa,SAAU,WACRjM,EAAMoL,SAAU,GAElBc,SAAU,WACRlM,EAAMwL,kBAIV,kBAACpG,GAAD,CACE/L,KAAM,QACNwO,WAAYF,EACZG,OAAQ,SAAAhC,GACN,OAAOA,EAAI1L,MAEbiL,QAAS,CACP,CACEI,UAAW,OACXE,OAAQ,SAAClO,EAAGqO,GAAJ,OACN,wBACEyE,MAAM,OACNpF,QAAS,WACPzB,EAASzH,QAAU6J,IAGpBA,EAAI1L,QAKX,CACEqL,UAAW,SACXE,OAAQ,SAAClO,EAAGqO,GAAJ,OACN,6BACE,wBACErI,KAAM,SACNpE,KAAM,QACN8L,QAAS,WACP1B,EAAS5E,iBAAiBiH,EAAI1L,QAJlC,gBAeTsJ,EAASzH,SACR,kBAAC,GAAD,CAAWhH,IAAKyO,EAASzH,QAAQ7B,KAAM6B,QAASyH,EAASzH,cAM3D8P,GAAoB,KAAKI,OAM5B,CAAE/R,KAAM,qBANe,kLAQZ,IAAD,EACuC3F,KAAK4P,MAD5C,EACC+G,QADD,EACUa,SADV,EACoBC,SADpB,EAC8BR,KAC7BU,kBACR,OAAO,kBAACC,GAAa5X,KAAK4P,WAXN,GAOVT,IAAM0I,YAStB,SAASD,GAAShI,GAAa,IACrB+G,EAAsC/G,EAAtC+G,QAASa,EAA6B5H,EAA7B4H,SAAUC,EAAmB7H,EAAnB6H,SACnBE,EADsC/H,EAATqH,KAC7BU,kBACR,OACE,wBACEhB,QAASA,EACT7F,MAAM,oBACNgH,OAAO,SACPN,SAAUA,EACVO,KAAMN,GAEN,wBAAMO,OAAO,YACX,uBAAMvH,KAAN,CAAWwH,MAAM,QACdN,EAAkB,OAAQ,CACzBO,MAAO,CACL,CACEC,UAAU,KAHfR,CAME,+BAEL,uBAAMlH,KAAN,CAAWwH,MAAM,UACdN,EAAkB,SAAU,CAC3BO,MAAO,CACL,CACEC,UAAU,KAHfR,CAME,+BAEL,uBAAMlH,KAAN,CAAWwH,MAAM,UACdN,EAAkB,SAAU,CAC3BO,MAAO,CACL,CACEC,UAAU,KAHfR,CAME,iCAOb,IAAMS,GAAYnI,cAAS,SAAmBL,GAA8B,IAClEpI,EAAYoI,EAAZpI,QAIF0L,GAFe7D,KAAbJ,SAEKzH,EAAQG,SAASmN,iBAE9B,OACE,yBAAK1E,UAAW,aACd,kBAAC,GAAD,CACEU,MAAO,yCACP0B,aAAchL,EAAQG,UAEtB,kBAACgJ,GAAD,CACE/L,KAAM,QACNwO,WAAYF,EACZG,OAAQ,OACRzC,QAAS,CACP,CACEI,UAAW,OACXE,OAAQ,SAAClO,EAAGqO,GACV,IAAMjL,EAAaiL,EAAI7K,KACPgB,EAAQd,SAAS2R,uBAC/BjS,GAEsBkS,OAAM,SAAA/R,GAAC,OAAIA,EAAE3E,WAErC,OACE,6BACGyP,EAAI7K,KADP,OAkBN,CACEwK,UAAW,iBCvPZuH,GAAgBtI,cAAS,SAAuBL,GAEzD,IACMlJ,EAAakJ,EAAblJ,SAEAuI,EAAaI,KAAbJ,SAER,OACE,yBAAKmB,UAAW,iBACd,4BACE,wBAAKoI,GAAI,EAAGC,GAAI,GAAIC,GAAI,IACtB,kBAAC,GAAD,CAAahS,SAAUA,KAGxBuI,EAAS5L,QACR,oCACE,wBAAKmV,GAAI,EAAGC,GAAI,GAAIC,GAAI,IACtB,kBAAC,GAAD,CACElY,IAAKyO,EAAS5L,OAAOG,KAAKC,OAC1BJ,OAAQ4L,EAAS5L,UAGrB,wBAAKmV,GAAI,EAAGC,GAAI,GAAIC,GAAI,IACtB,kBAAC,GAAD,CACElY,IAAKyO,EAAS5L,OAAOG,KAAKC,OAC1BJ,OAAQ4L,EAAS5L,WAMzB,wBAAKmV,GAAI,EAAGC,GAAI,GAAIC,GAAI,IACtB,kBAAC,GAAD,CAAqBhS,SAAUA,MAInC,4BACE,wBAAKiS,KAAM,IACT,yBAAK7I,MAAO,CAAE8I,SAAU,OAAQC,UAAW,WACzC,yBAAK/I,MAAO,CAAEgJ,SAAU,MACrB7J,EAAS5L,QAAU4L,EAASzH,SAC3B,kBAAC,GAAD,CACEhH,IAAKyO,EAAS5L,OAAOG,KAAKC,OAASwL,EAASzH,QAAQ7B,KACpD6B,QAASyH,EAASzH,QAClBnE,OAAQ4L,EAAS5L,iBChDtB0V,GAAe9I,cAAS,SAAsBL,GAEvD,IACMlJ,EAAakJ,EAAblJ,SACa2I,KAAbJ,SAEKvI,EAASL,WAEtB,OACE,kBAAC,GAAD,CACEyK,MAAO,2CAAiBpK,EAASA,UACjC8L,aAAc9L,GAEd,kBAAC,GAAD,CAAeA,SAAUA,QCblBsS,GAAe/I,cAAS,WAAyB,IAAD,EAC3BZ,KAAxB1E,EADmD,EACnDA,UAAWsE,EADwC,EACxCA,SAEXjF,EAAgBiP,eAAhBjP,YAEFtD,EAAWiE,EAAUxD,aAAatE,IAAImH,GAM5C,OAJA6I,qBAAU,WACR5D,EAASiK,eAAexS,KACvB,CAACA,IAGF,kBAAC,GAAD,KACGA,EACC,kBAAC,GAAD,CAAclG,IAAKkG,EAASA,SAAUA,SAAUA,IAEhD,iCCbO,SAASyS,KACtB,OACE,kBAAC,KAAD,KACE,6BACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,GAAD,OAGF,kBAAC,KAAD,CAAOA,KAAM,0BACX,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAUzS,KAAK,YAAY0M,GAAG,sBChBxC,IAAMvT,GAAS6F,OAAM,MAAYA,OAAM,GAAS,IAAImJ,GAsBrCoK,GApBO,WAAO,IAAD,EACAG,oBAAS,GADT,mBACnBC,EADmB,KACZC,EADY,KAW1B,OARA3G,qBAAU,YACE,uCAAG,sBAAAnI,EAAA,sEACL3K,GAAM4K,UAAU8O,gBADX,OAEXD,GAAS,GAFE,2CAAH,qDAKVE,KACC,IAED,yBAAKtJ,UAAU,OACb,kBAAClB,GAAayK,SAAd,CAAuBC,MAAO7Z,IAC3BwZ,GAAS,kBAAC,GAAD,SCXZM,GAAcC,QACW,cAA7BlU,OAAOmU,SAASC,UAEa,UAA7BpU,OAAOmU,SAASC,UAEhBpU,OAAOmU,SAASC,SAASC,MACvB,2DA8CJ,SAASC,GAAgBC,EAAerQ,GACtCsQ,UAAUC,cACPC,SAASH,GACTpV,MAAK,SAAAwV,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlP,QACf6O,UAAUC,cAAcO,YAI1B7Y,QAAQ0J,IACN,iHAKE3B,GAAUA,EAAO+Q,UACnB/Q,EAAO+Q,SAASN,KAMlBxY,QAAQ0J,IAAI,sCAGR3B,GAAUA,EAAOgR,WACnBhR,EAAOgR,UAAUP,WAO5BQ,OAAM,SAAAC,GACLjZ,QAAQiZ,MAAM,4CAA6CA,MClGjEC,IAAS/J,OAAO,kBAAC,GAAD,MAASgK,SAASC,eAAe,SDqB1C,SAAkBrR,GACvB,GAA6C,kBAAmBsQ,UAAW,CAMzE,GAJkB,IAAIgB,IACnBC,IACDzV,OAAOmU,SAASuB,MAEJC,SAAW3V,OAAOmU,SAASwB,OAIvC,OAGF3V,OAAO4V,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMkB,IAAN,sBAEPxB,KAgEV,SAAiCM,EAAerQ,GAE9C2R,MAAMtB,GACHpV,MAAK,SAAA2W,GAEJ,IAAMC,EAAcD,EAASE,QAAQ/Y,IAAI,gBAEnB,MAApB6Y,EAASrT,QACO,MAAfsT,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CzB,UAAUC,cAAcd,MAAMxU,MAAK,SAAAwV,GACjCA,EAAauB,aAAa/W,MAAK,WAC7Ba,OAAOmU,SAASgC,eAKpB7B,GAAgBC,EAAOrQ,MAG1BiR,OAAM,WACLhZ,QAAQ0J,IACN,oEArFAuQ,CAAwB7B,EAAOrQ,GAI/BsQ,UAAUC,cAAcd,MAAMxU,MAAK,WACjChD,QAAQ0J,IACN,iHAMJyO,GAAgBC,EAAOrQ,OC9C/BuQ,K","file":"static/js/main.eceef149.chunk.js","sourcesContent":["export enum eSide {\n  buy = \"buy\",\n  sell = \"sell\",\n  both = \"both\"\n}\n\nexport interface BalanceModel extends ccxt.Balance {\n  base: string;\n}\n\nexport interface TickerModel extends ccxt.Ticker {}\n\nexport interface OrderModel extends ccxt.Order {}\n\nexport enum eTickType {\n  plusTick = \"plusTick\",\n  zeroPlusTick = \"ZeroPlusTick\",\n  minusTick = \"minusTick\",\n  zeroMinusTick = \"ZeroMinusTick\"\n}\n\nexport interface TradeModel extends ccxt.Trade {\n  tick: eTickType;\n}\n\nexport interface MarketSpecModel extends ccxt.Market {}\n\nexport interface OrderBookModel {\n  price: number;\n  size: number;\n  accumulateSize: number; //累计（吃到这里所需要的数量）\n  // side:eSide;\n}\n","import { isObservableArray, isObservableMap } from \"mobx\";\n\nexport abstract class SubStore<ParentType = any, RootStoreType = ParentType> {\n  store: RootStoreType; //root\n  parent: ParentType; // parent store\n\n  constructor(root: RootStoreType | null, parent: ParentType, snapShot?: any) {\n    this.store = root as RootStoreType;\n    if (!root) {\n      this.store = (this as unknown) as RootStoreType;\n    }\n    this.parent = parent;\n    this.applySnapShot(snapShot);\n  }\n\n  //store clone\n  static getStoreSnapShoot(obj: SubStore) {\n    delete obj.store;\n    delete obj.parent;\n    for (const key of Object.keys(obj)) {\n      if (obj.hasOwnProperty(key)) {\n        let val = obj[key] as unknown;\n\n        if (val instanceof SubStore) {\n          obj[key] = val.getSnapShoot();\n        } else if (Array.isArray(val) || isObservableArray(val)) {\n          val = val.map(item => {\n            if (item instanceof SubStore) {\n              item = item.getSnapShoot();\n            }\n            return item;\n          });\n          obj[key] = val;\n        } else if (val instanceof Map || isObservableMap(val)) {\n          const itemObj = {};\n          val.forEach((item, itemKey) => {\n            itemObj[itemKey] = item;\n            if (item instanceof SubStore) {\n              itemObj[itemKey] = item.getSnapShoot();\n            }\n          });\n          obj[key] = itemObj;\n        } else if (typeof val === \"object\") {\n          obj[key] = SubStore.getStoreSnapShoot(val as any);\n        }\n      }\n    }\n    return obj;\n  }\n\n  getSnapShoot(self = this): this {\n    let obj = Object.assign({}, self);\n    // obj = toJS(obj);\n    return SubStore.getStoreSnapShoot(obj) as any;\n  }\n\n  toJSON() {\n    const obj = Object.assign({}, this);\n    delete obj.store;\n    delete obj.parent;\n\n    return obj;\n  }\n\n  applySnapShot(snapShot: this) {\n    // console.warn('need to be implemented');\n  }\n}\n","import { SubStore } from \"./core\";\nimport { AppRootStore } from \"./AppRootStore\";\n\nexport class AppSubStore<ParentType> extends SubStore<\n  ParentType,\n  AppRootStore\n> {}\n","import { AppSubStore } from \"./AppSubStore\";\nimport { AppRootStore } from \"./AppRootStore\";\nimport { observable } from \"mobx\";\nimport * as BrowserStore from \"store\";\n\nexport class Config extends AppSubStore<AppRootStore> {\n  @observable version = 1;\n\n  ls: LocalStorageType;\n\n  constructor(root, parent) {\n    super(root, parent);\n    this.ls = BrowserStore;\n  }\n}\n\nexport type LocalStorageType = {\n  get: (key: string, defaultVal?: any) => any;\n  set: (key: string, val: any) => void;\n  remove: (key: string) => void;\n};\n","import { AppSubStore } from \"../AppSubStore\";\nimport { observable } from \"mobx\";\n\nexport class BaseResModel<ParentType = any> extends AppSubStore<ParentType> {\n  @observable loading = false;\n  @observable lastUpdateTime = new Date();\n\n  loadingStart() {\n    this.loading = true;\n  }\n\n  loadingEnd() {\n    this.loading = false;\n    this.lastUpdateTime = new Date();\n  }\n\n  updateRes() {\n    console.warn(\"need to be implemented\");\n  }\n}\n","export function forTwo<T = any>(arr: T[], handle: (current: T, next: T) => void) {\n  if (arr.length < 2) {\n    return;\n  }\n  const len = arr.length - 1;\n  for (let i = 0; i < len; i++) {\n    const current = arr[i]\n    const next = arr[i + 1];\n    handle(current, next)\n  }\n}\n\n\n//把 ls 的一个字段当做 map 来用\nexport class CommonSubLs {\n  rootKey: string;\n  ls: any;\n\n  constructor(localStorageManager, rootKey: string) {\n    this.rootKey = rootKey;\n    this.ls = localStorageManager;\n  }\n\n  lsGet = (k: string, dv) => {\n    const root = this.ls.get(this.rootKey, {});\n    let item = root[k];\n    if (item === undefined) {\n      item = dv;\n    }\n    return item;\n  };\n\n  lsSet = (k, v) => {\n    const root = this.ls.get(this.rootKey, {});\n    root[k] = v;\n    this.ls.set(this.rootKey, root);\n  };\n\n  lsRemove = k => {\n    const root = this.ls.get(this.rootKey, {});\n    delete root[k];\n    this.ls.set(this.rootKey, root);\n  };\n}\n","import { action, observable, runInAction } from \"mobx\";\nimport { BaseResModel } from \"./Base\";\nimport { eTickType, TradeModel } from \"../../model/models\";\nimport { Market } from \"./Market\";\nimport _ from \"lodash\";\nimport { forTwo } from \"../../Util\";\n\nexport class RecentTrade extends BaseResModel<Market> {\n  get market() {\n    return this.parent;\n  }\n\n  get ccxtIns() {\n    return this.parent.parent.ccxtIns;\n  }\n\n  @observable trades: TradeModel[] = [];\n\n  @action\n  async updateRes() {\n    this.loadingStart();\n    const market = this.market;\n    let trades = <TradeModel[]>(\n      await this.ccxtIns.fetchTrades(market.spec.symbol)\n    );\n\n    runInAction(() => {\n      trades = _.orderBy(trades, \"timestamp\", [\"desc\"]);\n      forTwo(_.reverse(trades), (o1, o2) => {\n        let tick = eTickType.zeroMinusTick;\n\n        if (o2.price > o1.price) {\n          tick = eTickType.plusTick;\n        } else if (o2.price < o1.price) {\n          tick = eTickType.minusTick;\n        } else if (o2.price === o1.price) {\n          if (\n            o1.tick === eTickType.plusTick ||\n            o1.tick === eTickType.zeroPlusTick\n          ) {\n            tick = eTickType.zeroPlusTick;\n          } else {\n            tick = eTickType.zeroMinusTick;\n          }\n        }\n        o2.tick = tick;\n      });\n      this.trades = _.orderBy(trades, \"timestamp\", [\"desc\"]);\n    });\n\n    this.loadingEnd();\n  }\n}\n","import { action, observable } from \"mobx\";\nimport { BaseResModel } from \"./Base\";\nimport { OrderBookModel } from \"../../model/models\";\nimport { Market } from \"./Market\";\n\nexport class OrderBook extends BaseResModel<Market> {\n  get market() {\n    return this.parent;\n  }\n\n  get ccxtIns() {\n    return this.parent.parent.ccxtIns;\n  }\n\n  @observable asks: OrderBookModel[] = [];\n  @observable bids: OrderBookModel[] = [];\n\n  transferToOrderBookRes = (originItem: number[]) => {\n    return {\n      price: originItem[0],\n      size: originItem[1],\n      accumulateSize: originItem[1]\n      // side:,\n    } as OrderBookModel;\n  };\n\n  @action\n  async updateRes() {\n    this.loadingStart();\n    const market = this.market;\n    await this.ccxtIns.fetchOrderBook(market.spec.symbol).then(data => {\n      this.bids = data.bids.map(this.transferToOrderBookRes);\n      this.asks = data.asks.map(this.transferToOrderBookRes);\n    });\n    this.loadingEnd();\n  }\n}\n","import { action, computed, observable } from \"mobx\";\nimport { BaseResModel } from \"./Base\";\nimport { Exchange } from \"./Exchange\";\nimport { MarketSpecModel, TickerModel } from \"../../model/models\";\nimport { RecentTrade } from \"./RecentTrade\";\nimport { OrderBook } from \"./OrderBook\";\n\nexport class Market extends BaseResModel<Exchange> {\n  @observable recentTrades: RecentTrade; //近期交易\n  @observable orderBook: OrderBook; //买卖盘\n  @observable spec: MarketSpecModel = null;\n\n  @observable lastTicker = null as TickerModel;\n\n  constructor(root, parent, spec: MarketSpecModel) {\n    super(root, parent);\n    this.spec = spec;\n    this.recentTrades = new RecentTrade(root, this);\n    this.orderBook = new OrderBook(root, this);\n  }\n\n  @action\n  async updateRes() {\n    this.loadingStart();\n    await this.recentTrades.updateRes();\n    await this.orderBook.updateRes();\n    this.loadingEnd();\n  }\n\n  @computed get lastTrade() {\n    return this.recentTrades.trades[0];\n  }\n\n  //市场价\n  @computed get lastPrice() {\n    if (this.lastTrade) {\n      return this.lastTrade.price;\n    } else {\n      return 0;\n    }\n  }\n}\n","import { action, computed, observable, runInAction } from \"mobx\";\nimport { BaseResModel } from \"./Base\";\nimport { Market } from \"./Market\";\nimport { Exchanges } from \"./Exchanges\";\nimport _ from \"lodash\";\nimport { TickerModel } from \"../../model/models\";\n\nexport class Exchange extends BaseResModel<Exchanges> {\n  marketsMap = observable.map<string, Market>({}, { name: \"marketsMap\" });\n\n  constructor(root, parent) {\n    super(root, parent);\n\n    window[\"bigone\"] = this;\n  }\n\n  @observable ccxtIns = null as ccxt.Exchange;\n\n  @observable exchange = \"bigone3\"; // 对应ccxt里的名字\n\n  @observable createCCXTOption = {\n    urls: {\n      // 'api': 'https://b1.run/api/v3/',\n      api: {\n        private: \"https://b1.run/api/v3/viewer\",\n        public: \"https://b1.run/api/v3\"\n      }\n    }\n  };\n\n  @observable fetchedMarkets = false;\n\n  @action\n  async updateRes() {\n    this.loadingStart();\n\n    if (!this.fetchedMarkets) {\n      let items = await this.ccxtIns.fetchMarkets();\n      this.fetchedMarkets = true;\n      runInAction(() => {\n        items.forEach(item => {\n          const res = new Market(this.store, this, item);\n          this.marketsMap.set(item.symbol, res);\n        });\n      });\n    }\n\n    let items = await this.ccxtIns.fetchTickers();\n    runInAction(() => {\n      _.each(items, (item: TickerModel) => {\n        const market = this.marketsMap.get(item.symbol);\n        if (market) {\n          market.lastTicker = item;\n        }\n      });\n    });\n\n    this.loadingEnd();\n  }\n\n  getMarketsByCoinSymbol(coinSymbol: string) {\n    return this.allMarkets.filter(o => {\n      return o.spec.base === coinSymbol;\n    });\n  }\n  getMarketsByCoinSymbolFilterActive(coinSymbol: string) {\n    return this.allMarkets.filter(o => {\n      return o.spec.base === coinSymbol;\n    });\n  }\n\n\n\n  @action\n  async createCCXTIns() {\n    this.ccxtIns = await new window.ccxt[this.exchange](this.createCCXTOption);\n  }\n\n  @computed get allMarkets() {\n    return Array.from(this.marketsMap.values());\n  }\n\n  getSnapShoot(): this {\n    const obj = super.getSnapShoot();\n    delete obj.ccxtIns;\n    return obj;\n  }\n}\n","import { action, computed, observable } from \"mobx\";\nimport { AppRootStore } from \"../AppRootStore\";\nimport { Exchange } from \"./Exchange\";\nimport { BaseResModel } from \"./Base\";\nimport _ from \"lodash\";\n\nexport class Exchanges extends BaseResModel<AppRootStore> {\n  exchangesMap = observable.map<string, Exchange>({}, { name: \"exchangesMap\" });\n\n  constructor(root, parent) {\n    super(root, parent);\n\n    const bigone3 = new Exchange(this.store, this);\n    this.exchangesMap.set(bigone3.exchange, bigone3);\n\n    /*    const zb = new Exchange(this.store, this);\n    {\n      zb.exchange = \"zb\";\n      zb.createCCXTOption = {\n        urls: {\n          api: {\n            private: \"https://api.zb.plus/data/v1\",\n            public: \"https://api.zb.plus/data/v1\"\n          }\n        }\n      } as any;\n      this.exchangesMap.set(\"zb\", zb);\n    }\n    */\n\n    const exchangesNames = [\n      \"bittrex\", // dwad\n      \"basefex\",\n      \"bitmex\",\n      'coss',\n      'bibox',\n      'huobipro',\n      'okex3',\n      'poloniex',\n      // 'bitstamp',\n      'coinbasepro'\n    ];\n\n    ///ccxt.exchanges\n    _.each(exchangesNames, name => {\n      const item = new Exchange(this.store, this);\n      item.exchange = name;\n      item.createCCXTOption = {} as any;\n      this.exchangesMap.set(name, item);\n    });\n  }\n\n  @computed get all() {\n    return Array.from(this.exchangesMap.values());\n  }\n\n  @action\n  async initExchanges() {\n    for (const exchange of this.all) {\n      await exchange.createCCXTIns();\n    }\n  }\n}\n","import { AppSubStore } from \"./AppSubStore\";\nimport { AppRootStore } from \"./AppRootStore\";\nimport { action, observable } from \"mobx\";\nimport { Exchange } from \"./res/Exchange\";\nimport { Market } from \"./res/Market\";\nimport { Account } from \"./res/Account\";\n\nexport class UiStates extends AppSubStore<AppRootStore> {\n  @observable exchange: Exchange = null;\n\n  @observable market: Market = null;\n\n  @observable account: Account = null;\n\n  @action changeExchange(exchange: Exchange) {\n    this.exchange = exchange;\n    this.market = null;\n    this.account = null;\n  }\n}\n","import { action, computed, observable } from \"mobx\";\nimport { BaseResModel } from \"./Base\";\nimport { BalanceModel } from \"../../model/models\";\nimport _ from \"lodash\";\nimport { Account } from \"./Account\";\n\nexport class Balance extends BaseResModel<Account> {\n  get ccxtIns() {\n    return this.parent.ccxtIns;\n  }\n\n  map = observable.map<string, BalanceModel>({}, { name: \"balance\" });\n\n  @action\n  async updateRes() {\n    this.loadingStart();\n\n    let balances =  await this.ccxtIns.fetchBalance();\n    _.each(balances, (balance : BalanceModel, key) => {\n      balance.base = key;\n    });\n    delete balances[\"info\"];\n    this.map.merge(balances);\n\n    this.loadingEnd();\n  }\n\n  @computed\n  get balancesAll() {\n    let items = Array.from(this.map.values());\n    items = _.orderBy(items, [\"total\"], [\"desc\"]);\n    return items;\n  }\n\n  @computed\n  get balancesNotZero() {\n    return this.balancesAll.filter(o => {\n      return o.total > 0.0001;\n    });\n  }\n}\n","import { action, computed, observable } from \"mobx\";\nimport { BaseResModel } from \"./Base\";\nimport { OrderModel } from \"../../model/models\";\nimport _ from \"lodash\";\nimport { Account } from \"./Account\";\nimport { Market } from \"./Market\";\n\nexport class AccountOrder extends BaseResModel<Account> {\n  map = observable.map<string, OrderModel>({}, { name: \"orderMap\" });\n\n  @observable market: Market = null;\n\n  constructor(root, parent, market: Market) {\n    super(root, parent);\n    this.market = market;\n  }\n\n  get ccxtIns() {\n    return this.parent.ccxtIns;\n  }\n\n  @computed\n  get all() {\n    let items = Array.from(this.map.values());\n    items = _.orderBy(items, [\"timestamp\"], [\"desc\"]);\n    return items;\n  }\n\n  @computed\n  get activeOrders() {\n    return this.all.filter(o => o.status === \"open\");\n  }\n\n  @action\n  async updateRes() {\n    this.loadingStart();\n\n    const market = this.market;\n    const symbol = market.spec.symbol;\n    let orders: OrderModel[] = await this.ccxtIns.fetchOrders(symbol);\n    orders = _.orderBy(orders, \"timestamp\", [\"desc\"]);\n    const ordersObj = _.keyBy(orders, \"id\");\n    this.map.merge(ordersObj);\n    this.loadingEnd();\n  }\n}\n","import { action, observable } from \"mobx\";\nimport { BaseResModel } from \"./Base\";\nimport { Exchange } from \"./Exchange\";\nimport { Accounts } from \"./Accounts\";\nimport { Balance } from \"./Balance\";\nimport { OrderModel } from \"../../model/models\";\nimport { AccountOrder } from \"./AccountOrder\";\nimport { Market } from \"./Market\";\n\nexport class Account extends BaseResModel<Accounts> {\n  constructor(root, parent) {\n    super(root, parent);\n\n    this.balances = new Balance(root, this);\n  }\n\n  @observable ccxtIns = null as ccxt.Exchange; //共享market， 但是私有api 通过自己的 cctx 请求\n  @observable name = \"bigone3\"; // account 唯一名字，不能重复\n\n  @observable exchange: Exchange = null;\n\n  @observable createCCXTOption = {};\n\n  @action\n  async updateRes() {\n    this.loadingStart();\n\n    this.loadingEnd();\n  }\n\n  @action\n  async createCCXTIns(exchange: Exchange) {\n    this.exchange = exchange;\n    const ccxtOptions = Object.assign(\n      {},\n      exchange.createCCXTOption,\n      this.createCCXTOption\n    );\n    this.ccxtIns = await new window.ccxt[exchange.exchange](ccxtOptions);\n  }\n\n  @observable balances: Balance;\n\n  accountOrdersMap = observable.map<string, AccountOrder>(\n    {},\n    { name: \"accountOrdersMap\" }\n  );\n\n  @action createOrUpdateOrdersByMarket(market: Market) {\n    const symbol = market.spec.symbol;\n    let accountOrder = this.accountOrdersMap.get(symbol);\n    if (!accountOrder) {\n      accountOrder = new AccountOrder(this.store, this, market);\n      this.accountOrdersMap.set(symbol, accountOrder);\n    }\n    return accountOrder;\n  }\n\n  safeGetAccountOrder(market: Market) {\n    return this.createOrUpdateOrdersByMarket(market);\n  }\n\n  //计算花出去的钱\n  computeOutMoneyByHistory(orders: OrderModel[]) {\n    let toCompute = orders.filter(o => {\n      return o.filled > 0; //才是真正执行过的订单\n    });\n\n    const sum = toCompute.reduce((sum, order) => {\n      let money = 0;\n\n      if (order.type === \"limit\") {\n        money = order.price * order.amount;\n      } else {\n        money = order.filled;\n      }\n\n      if (order.side === \"sell\") {\n        money *= -1;\n      }\n      return sum + money;\n    }, 0);\n    return sum;\n  }\n\n  computeCurrentValue(market: Market) {\n    const lastPrice = market.lastPrice;\n    const currentValue =\n      this.balances.map.get(market.spec.base).total * lastPrice;\n    return currentValue;\n  }\n\n  computeProfitAndRate(market: Market) {\n    const accountOrder = this.safeGetAccountOrder(market);\n    const outValue = this.computeOutMoneyByHistory(accountOrder.all);\n    const currentValue = this.computeCurrentValue(market);\n    return {\n      profit: currentValue - outValue,\n      rate: (currentValue - outValue) / outValue\n    };\n  }\n\n  getSnapShoot(): this {\n    const obj = super.getSnapShoot();\n    delete obj.ccxtIns;\n    delete this.exchange;\n    return obj;\n  }\n}\n","import { action, computed, observable } from \"mobx\";\nimport { AppRootStore } from \"../AppRootStore\";\nimport { Exchange } from \"./Exchange\";\nimport { BaseResModel } from \"./Base\";\nimport { Account } from \"./Account\";\nimport { CommonSubLs } from \"../../Util\";\nimport _ from \"lodash\";\n\nexport class Accounts extends BaseResModel<AppRootStore> {\n  accountsMap = observable.map<string, Account>({}, { name: \"accountsMap\" });\n\n  constructor(root, parent) {\n    super(root, parent);\n\n    this.createAccountsFromLs();\n  }\n\n  @computed get all() {\n    return Array.from(this.accountsMap.values());\n  }\n\n  @action\n  async createAccount(exchange: Exchange, name: string, cctxOption) {\n    if (this.accountsMap.get(name)) {\n      console.warn(\"已经存在此账户，不能重复添加\",name);\n    } else {\n      const account = new Account(this.store, this);\n\n      account.name = name;\n      account.createCCXTOption = Object.assign(\n        account.createCCXTOption,\n        cctxOption\n      );\n      await account.createCCXTIns(exchange);\n      this.accountsMap.set(name, account);\n      return account;\n    }\n  }\n\n  @action\n  async createAccountAndSaveLs(exchange: Exchange, name: string, cctxOption) {\n    const account = await this.createAccount(exchange, name, cctxOption);\n    if (account) {\n      this.lsAccountsAdd(exchange.exchange, account, cctxOption);\n    }\n  }\n\n  lsAccounts = new CommonSubLs(this.store.config.ls, \"accounts\");\n  lsAccountsAdd = (exchangeKey: string, account: Account, cctxOption) => {\n    const arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\n    const a = arr.find(o => o.name === account.name);\n    if (a) {\n      console.warn(\"已经存在\",exchangeKey,account);\n    } else {\n      arr.push(\n        Object.assign(\n          {},\n          {\n            exchangeKey,\n            name: account.name,\n            cctxOption: cctxOption\n          }\n        )\n      );\n    }\n    this.lsAccounts.lsSet(\"list\", arr);\n  };\n\n  lsAccountsRemove = (accountName: string) => {\n    let arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\n    _.remove(arr, o => o.name === accountName);\n\n    this.accountsMap.delete(accountName);\n    this.lsAccounts.lsSet(\"list\", arr);\n  };\n\n  lsAccountsGetAllAccounts = () => {\n    const arr = this.lsAccounts.lsGet(\"list\", []) as IAccountLsOption[];\n    return arr;\n  };\n\n  createAccountsFromLs = async () => {\n    const arr = this.lsAccountsGetAllAccounts();\n    for (const o of arr) {\n      const exchange = this.store.exchanges.exchangesMap.get(o.exchangeKey);\n      if (exchange) {\n        await this.createAccount(exchange, o.name, o.cctxOption);\n      }\n    }\n  };\n}\n\ninterface IAccountLsOption {\n  exchangeKey: string;\n  name: string;\n  cctxOption: any;\n}\n","export interface ExchangeOriginalClass extends ccxt.Exchange{\n\n}\nexport class ExchangeOriginalClass{\n}\n","import { ExchangeOriginalClass } from './util'\nimport _ from 'lodash'\n\nexport function init () {\n  const cctx =  window.ccxt;\n\n  const name = 'bigone3'\n\n  const Original:typeof ccxt.Exchange = cctx[name];\n\n  class Enhanced extends ExchangeOriginalClass {\n    constructor (...args) {\n      super();\n      this['__proto__'] = new Original(...args);\n    }\n    enhanced = true;\n\n    async fetchOrders(...args) {\n      const [symbol,since,limit,params] = args;\n      return Promise.all([\n        super.fetchOrders(symbol, since, limit, Object.assign({},{\n          state: \"PENDING\"\n        },params)),\n        super.fetchOrders(symbol, since, limit, Object.assign({},{\n          state: \"CLOSED\"\n        },params)),\n      ]).then(([data1, data2]) => {\n        let orders = [];\n        orders.forEach(o => {\n          if (o.price) {\n            o.type = 'limit';\n          } else {\n            o.type = 'market';\n          }\n        });\n        return orders\n      });\n    }\n  }\n\n  cctx[name] = Enhanced;\n\n}\n","import { SubStore } from \"./core\";\nimport { Config } from \"./Config\";\nimport { Exchanges } from \"./res/Exchanges\";\nimport { UiStates } from \"./UiStates\";\nimport { Accounts } from \"./res/Accounts\";\n\nimport { init as bigone3 } from \"../cctxPatch/bigone3\";\nimport { init as basefex } from \"../cctxPatch/basefex\";\n\n\nbigone3();\nbasefex();\n\nexport class AppRootStore extends SubStore<null, AppRootStore> {\n  name = \"root store\";\n\n  config: Config;\n  exchanges: Exchanges;\n  accounts: Accounts;\n  uiStates: UiStates;\n\n  constructor() {\n    super(null, null);\n\n    this.config = new Config(this, this);\n    this.exchanges = new Exchanges(this, this);\n    this.accounts = new Accounts(this, this);\n    this.uiStates = new UiStates(this, this);\n  }\n}\n","import _ from \"lodash\";\nimport { ExchangeOriginalClass } from './util'\n\ninterface BaseFexMarket {\n  pricePrecision: number;\n  symbol: string;\n  isInverse: boolean;\n  riskStep: number;\n  maxRiskLimit: number;\n  baseCurrency: string;\n  initialMargin: number;\n  quoteCurrency: string;\n  minRiskLimit: number;\n  riskLimit: number;\n  maintenanceMargin: number;\n  enable: boolean;\n  baseName: string;\n  priceStep: number;\n}\n\nexport function init() {\n  const ccxt = window.ccxt;\n  const name = \"basefex\";\n  const Original: typeof ccxt.Exchange = ccxt[name];\n  class Enhanced extends ExchangeOriginalClass{\n    enhanced = true;\n    constructor (...args) {\n      super();\n      this['__proto__'] = new Original(...args);\n    }\n    describe() {\n      const d = super.describe();\n      console.log(\"aaa\",this);\n      debugger\n      d.api.public.get.push(\"instruments\");\n      return d;\n    }\n\n    //用来转换 symbol\n    static ccxtSymbolToBaseFexMarket = new Map<string, BaseFexMarket>();\n    static baseFexSymbolToCcxtSymbol = new Map<string, string>();\n\n    castMarket(market: BaseFexMarket, params) {\n      let _base = this.safeString(market, \"baseCurrency\");\n      let _quote = this.safeString(market, \"quoteCurrency\");\n\n      //反向合约\n      if (market.isInverse) {\n        [_base, _quote] = [_quote, _base];\n      }\n\n      const ccxtSymbol = `${_base}/${_quote}`;\n      Enhanced.ccxtSymbolToBaseFexMarket.set(ccxtSymbol, market);\n      Enhanced.baseFexSymbolToCcxtSymbol.set(market.symbol, ccxtSymbol);\n\n      return {\n        id: this.safeString(market, \"symbol\"),\n        symbol: this.translateSymbol(_base, _quote),\n        base: _base.toUpperCase(),\n        quote: _quote.toUpperCase(),\n        baseId: _base,\n        quoteId: _quote,\n        active: this.safeValue(market, \"enable\"),\n        precision: {\n          price: this.safeInteger(market, \"priceStep\")\n        },\n        limits: {},\n        info: market\n      };\n    }\n\n    fetchMarkets(): Promise<ccxt.Market[]> {\n      return super.fetchMarkets().then(data => {\n        return data;\n      });\n    }\n\n    translateBaseFEXSymbol(ccxtSymbol) {\n      const market = Enhanced.ccxtSymbolToBaseFexMarket.get(ccxtSymbol);\n      let symbol = \"\";\n      if (market) {\n        symbol = market.symbol;\n      }\n      return symbol;\n    }\n\n    async fetchTickers() {\n      let instruments: ccxt.Ticker[] = await this.publicGetInstruments();\n      instruments = instruments.map((instrument: any) => {\n        const symbol = Enhanced.baseFexSymbolToCcxtSymbol.get(instrument.symbol);\n        const timestamp = new Date().getTime(); //this.safeInteger (candlestick, 'time');\n        return {\n          symbol,\n          info: instrument,\n          timestamp,\n          datetime: this.iso8601(timestamp),\n\n          high: instrument.last24hMaxPrice,\n          low: instrument.last24hMinPrice,\n          bid: undefined,\n          bidVolume: undefined,\n          ask: undefined,\n          askVolume: undefined, // current best ask (sell) amount (may be missing or undefined)\n          vwap: undefined,\n          open: undefined, // opening price\n          close: instrument.latestPrice, // price of last trade (closing price for current period)\n          last: instrument.latestPrice, // same as `close`, duplicated for convenience\n          previousClose: undefined, // closing price for the previous period\n          change: undefined, // absolute change, `last - open`\n          percentage: instrument.last24hPriceChange, // relative change, `(change/open) * 100`\n          average: undefined, // average price, `(last + open) / 2`\n          baseVolume: instrument.volume24hInUsd, // volume of base currency traded for last 24 hours\n          quoteVolume: undefined // volume of quote currency traded for last 24 hours\n        } as ccxt.Ticker;\n      });\n      return _.keyBy(instruments, \"symbol\");\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n      const query = {\n        'symbol': this.translateBaseFEXSymbol (symbol),\n        'limit': limit,\n      };\n      let orders = await this.privateGetOrders ({\n        'query': this.extend (query, this.safeValue (params, 'query', {})),\n      });\n      return this.fnMap (orders, 'cast_order', symbol);\n    }\n\n  }\n\n  ccxt[name] = Enhanced;\n}\n","import React, { useContext } from \"react\";\nimport { AppRootStore } from \"./AppRootStore\";\n\nimport * as mobx from \"mobx\";\n\nexport const StoreContext = React.createContext(null as AppRootStore | null);\n\nexport function useStore(): AppRootStore {\n  return useContext(StoreContext);\n}\n\nwindow[\"mobx\"] = mobx;\n","import { Layout, Menu } from \"antd\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { observer } from \"mobx-react-lite\";\nimport { useStore } from \"../state\";\n\nconst { Header, Footer, Content } = Layout;\n\nexport const PageStruct = function(props: { children: any }) {\n  return (\n    <Layout>\n      <AppHeader />\n      <Content style={{ minHeight: \"90vh\" }}>{props.children}</Content>\n      <Footer>Footer</Footer>\n    </Layout>\n  );\n};\n\nconst AppHeader = observer(function() {\n  const { uiStates } = useStore();\n  const history = useHistory();\n\n  return (\n    <Header className={\"appHeader\"}>\n      <Menu\n        theme=\"light\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={[\"exchanges\"]}\n        style={{ lineHeight: \"64px\" }}\n      >\n        <Menu.Item\n          key=\"exchanges\"\n          onClick={() => {\n            history.push(\"/\");\n          }}\n        >\n          Exchanges\n        </Menu.Item>\n        <Menu.Item\n          key=\"exchange\"\n          onClick={() => {\n            const exchangeKey = uiStates.exchange\n              ? uiStates.exchange.exchange\n              : \"\";\n            history.push(`/exchange/${exchangeKey}`);\n          }}\n        >\n          Exchange\n        </Menu.Item>\n        {/*<Menu.Item key=\"3\">Setting</Menu.Item>*/}\n      </Menu>\n    </Header>\n  );\n});\n","import _ from \"lodash\";\nimport React from \"react\";\nimport { observer, Observer } from \"mobx-react-lite\";\nimport { MarketSpecModel } from \"../model/models\";\nimport { format, isToday } from \"date-fns\";\nimport { ColumnProps, TableProps } from \"antd/lib/table\";\nimport { Button, Table } from \"antd\";\nimport ReactTimeAgo from \"timeago-react\";\n\nexport function MobTable<T>(props: TableProps<T>) {\n  const columns = props.columns.map(column => {\n    column.title = column.title || _.capitalize(column.dataIndex);\n    column.key = column.key || column.dataIndex;\n\n    column.width = column.width || 200;\n\n    if (column.render) {\n      const originalRender = column.render;\n      column.render = (text, row, index) => {\n        return (\n          <Ob\n            r={() => {\n              const val = row[column.dataIndex];\n              return originalRender(val, row, index);\n            }}\n          />\n        );\n      };\n    } else {\n      column.render = (text, row) => {\n        return (\n          <Ob\n            r={() => {\n              const val = row[column.dataIndex];\n              return val;\n            }}\n          />\n        );\n      };\n    }\n    return column as ColumnProps<any>;\n  });\n  return <Table<T> {...props} columns={columns} />;\n}\n\nexport function Ob(props: { r: Function }) {\n  return <Observer render={props.r as any} />;\n}\n\nexport const FormatValue = observer(function FormatPrice(props: {\n  val: number;\n  market: MarketSpecModel;\n}) {\n  const { val, market } = props;\n  let len = 8;\n  if (market.quote === \"USDT\") {\n    len = 2;\n  }\n  const v = _.ceil(val, len);\n  return (\n    <span>\n      {v} {market.quote}\n    </span>\n  );\n});\n\nexport const FormatPercentage = observer(function FormatPrice(props: {\n  val: number;\n  len?: number;\n}) {\n  const { val, len = 4 } = props;\n  const v = _.ceil(val * 100, len);\n  return <span>{v} %</span>;\n});\n\nexport const FormatTimeAuto = (props: { val: number | Date }) => {\n  const { val } = props;\n  let formatStr = `yyyy-MM-dd HH:mm:ss`;\n  if (isToday(val)) {\n    formatStr = `HH:mm:ss`;\n  }\n  return format(val, formatStr) as any;\n};\n\nexport const UpdateBtn = (props: { onClick: any; loading: boolean }) => {\n  return (\n    <Button\n      type={\"primary\"}\n      shape=\"circle\"\n      icon=\"sync\"\n      onClick={props.onClick}\n      loading={props.loading}\n    />\n  );\n};\n\nexport const TimeAgo = observer(function(props: { time: number | Date }) {\n  let time = props.time;\n\n  if (_.isDate(props.time)) {\n    return <ReactTimeAgo datetime={props.time} locale=\"en_US\" />;\n  } else {\n    return time as any;\n  }\n});\n","import React, { useCallback, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { TimeAgo, UpdateBtn } from \"../Util\";\nimport { Card } from \"antd\";\nimport \"./index.scss\";\nimport { CardProps } from \"antd/lib/card\";\nimport classNames from \"classnames\";\nimport _ from \"lodash\";\nimport { BaseResModel } from \"../../state/res/Base\";\n\nexport const UpdatableCard = observer(function UpdatableCard(\n  props: Partial<CardProps> & {\n    updatableRes: Partial<BaseResModel>;\n    noContentPadding?: boolean;\n    updateImmediately?: boolean;\n  }\n) {\n  const {\n    updatableRes,\n    noContentPadding = true,\n    updateImmediately = true\n  } = props;\n\n  const doUpdate = useCallback(async () => {\n    try {\n      await updatableRes.updateRes();\n    } catch (e) {\n      console.warn(\"updatableRes failed\", e);\n    }\n  }, [updatableRes]);\n\n  useEffect(() => {\n    if (updateImmediately) {\n      doUpdate();\n    }\n  }, []);\n\n  const cardProps = _.omit(props, [\n    \"updatableRes\",\n    \"noContentPadding\",\n    \"updateImmediately\"\n  ]);\n\n  return (\n    <Card\n      {...cardProps}\n      title={\n        <div className={\"titleWithUpdateTime\"}>\n          <div>{props.title}</div>\n          <div className={\"updateTime\"}>\n            <TimeAgo time={updatableRes.lastUpdateTime} />\n          </div>\n        </div>\n      }\n      className={classNames(\n        \"UpdatableCard\",\n        {\n          noContentPadding: noContentPadding\n        },\n        cardProps.className\n      )}\n      size=\"small\"\n      extra={\n        <div>\n          <UpdateBtn\n            onClick={() => {\n              doUpdate();\n            }}\n            loading={updatableRes.loading}\n          />\n        </div>\n      }\n    >\n      {cardProps.children}\n    </Card>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { MobTable } from \"../Util\";\nimport \"./index.scss\";\nimport { UpdatableCard } from \"../UpdatableCard\";\nimport { useStore } from \"../../state\";\nimport { Exchange } from \"../../state/res/Exchange\";\nimport { Link } from \"react-router-dom\";\n\nexport const Exchanges = observer(function Exchanges(props: {}) {\n  const { exchanges } = useStore();\n\n  const list = exchanges.all;\n\n  return (\n    <div className={\"Exchanges\"} style={{ padding: 24 }}>\n      <UpdatableCard title={<div>Exchanges</div>} updatableRes={exchanges}>\n        <MobTable<Exchange>\n          size={\"small\"}\n          dataSource={list}\n          rowKey={\"exchange\"}\n          columns={[\n            {\n              title: \"Id\",\n              dataIndex: \"exchange\",\n              render: (v, row) => (\n                <div>\n                  <Link to={`/exchange/${row.exchange}`}>{v}</Link>\n                </div>\n              )\n            }\n          ]}\n        />\n      </UpdatableCard>\n    </div>\n  );\n});\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { PageStruct } from \"../Util\";\nimport { Exchanges } from \"../../components/Exchanges\";\n\nexport const Home = observer(function Home() {\n  return (\n    <PageStruct>\n      <Exchanges />\n    </PageStruct>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { FormatTimeAuto } from \"../Util\";\nimport { Icon } from \"antd\";\nimport \"./index.scss\";\nimport { eSide, eTickType, TradeModel } from \"../../model/models\";\nimport { UpdatableCard } from \"../UpdatableCard\";\nimport Scrollbars from \"react-custom-scrollbars\";\nimport { Market } from \"../../state/res/Market\";\n\nexport const RecentTrades = observer(function RecentTrades(props: {\n  market: Market;\n}) {\n  const { market } = props;\n  const res = market.recentTrades;\n  const list = res.trades;\n\n  return (\n    <UpdatableCard\n      title={\"Recent Trades\"}\n      className={\"RecentTrades\"}\n      updatableRes={res}\n    >\n      <Scrollbars style={{ height: 600 }} autoHide={true}>\n        <div className={\"TradeHistoryContainer\"}>\n          {list.map(o => (\n            <RecentTradesItem key={o.id} trade={o} />\n          ))}\n        </div>\n      </Scrollbars>\n    </UpdatableCard>\n  );\n});\n\nconst RecentTradesItem = observer(function RecentTradesItem(props: {\n  trade: TradeModel;\n}) {\n  const { trade } = props;\n\n  return (\n    <div className=\"TradeHistoryContainer_item\">\n      <TickItem tick={trade.tick} />\n      <div className=\"price\">{trade.price}</div>\n      <div className=\"volume\">{trade.amount}</div>\n      <div className=\"time\">\n        <FormatTimeAuto val={trade.timestamp} />\n      </div>\n      <div className=\"side\">{trade.side === eSide.buy ? \"B\" : \"S\"}</div>\n    </div>\n  );\n});\n\nconst TickItem = observer(function TickItem(props: { tick: eTickType }) {\n  const { tick } = props;\n\n  let icon = <Icon type=\"arrow-up\" />;\n\n  switch (tick) {\n    case eTickType.plusTick:\n      icon = <Icon type=\"arrow-up\" />;\n      break;\n    case eTickType.zeroPlusTick:\n      icon = <Icon type=\"caret-up\" />;\n      break;\n    case eTickType.minusTick:\n      icon = <Icon type=\"arrow-down\" />;\n      break;\n    case eTickType.zeroMinusTick:\n      icon = <Icon type=\"caret-down\" />;\n      break;\n  }\n\n  return <div className={`icon ${tick}`}>{icon}</div>;\n});\n","import React from \"react\";\nimport { observer, useLocalStore } from \"mobx-react-lite\";\nimport \"./index.scss\";\nimport { eSide, OrderBookModel } from \"../../model/models\";\nimport { UpdatableCard } from \"../UpdatableCard\";\nimport Scrollbars from \"react-custom-scrollbars\";\nimport _ from \"lodash\";\nimport { Button } from \"antd\";\nimport { Market } from \"../../state/res/Market\";\n\nexport const OrderBook = observer(function OrderBook(props: {\n  market: Market;\n}) {\n  const { market } = props;\n  const res = market.orderBook;\n\n  const state = useLocalStore(() => ({\n    showNum: 12,\n    side: eSide.both as eSide,\n    get asks() {\n      let items = [];\n      if (state.side === eSide.both) {\n        items = _.take(res.asks, state.showNum);\n      } else {\n        items = res.asks; //_.take(, state.showNum * 2);\n      }\n      const reversed = items.reverse();\n      return reversed;\n    },\n    get bids() {\n      if (state.side === eSide.both) {\n        return _.take(res.bids, state.showNum);\n      } else {\n        return res.bids; // _.take(res.bids, state.showNum * 2);\n      }\n    },\n\n    setSide(side: eSide) {\n      state.side = side;\n    }\n  }));\n\n  const { asks, bids } = state;\n\n  return (\n    <UpdatableCard\n      title={\"OrderBook\"}\n      className={\"OrderBook\"}\n      updatableRes={res}\n    >\n      <Scrollbars style={{ height: 600 }} autoHide={true}>\n        <div className={\"OrderBookContainer\"}>\n          <div className=\"OrderBookInnerHeader\">\n            <div className=\"sideBtns\">\n              <Button\n                size={\"small\"}\n                icon=\"vertical-align-middle\"\n                onClick={() => state.setSide(eSide.both)}\n              />\n              <Button\n                size={\"small\"}\n                icon=\"vertical-align-top\"\n                onClick={() => state.setSide(eSide.buy)}\n              />\n              <Button\n                size={\"small\"}\n                icon=\"vertical-align-bottom\"\n                onClick={() => state.setSide(eSide.sell)}\n              />\n            </div>\n          </div>\n\n          <div className=\"centeredContent\">\n            {state.side === eSide.both ? (\n              <>\n                {asks.map((o, index) => (\n                  <OrderBookItem key={index} item={o} />\n                ))}\n                <div className={\"MarketPrice\"}>\n                  <MarketPrice market={market} />\n                </div>\n                {bids.map((o, index) => (\n                  <OrderBookItem key={index} item={o} />\n                ))}\n              </>\n            ) : (\n              <>\n                <div className={\"MarketPrice\"}>\n                  <MarketPrice market={market} />\n                </div>\n                {state.side === eSide.buy &&\n                  asks.map((o, index) => (\n                    <OrderBookItem key={index} item={o} />\n                  ))}\n                {state.side === eSide.sell &&\n                  bids.map((o, index) => (\n                    <OrderBookItem key={index} item={o} />\n                  ))}\n              </>\n            )}\n          </div>\n        </div>\n      </Scrollbars>\n    </UpdatableCard>\n  );\n});\n\nconst OrderBookItem = observer(function OrderBookItem(props: {\n  item: OrderBookModel;\n}) {\n  const { item } = props;\n\n  return (\n    <div className=\"OrderBookItem\">\n      <div className={\"price\"}>{item.price}</div>\n      <div className={\"size\"}>{item.size}</div>\n      <div className={\"accumulateSize\"}>{item.accumulateSize}</div>\n    </div>\n  );\n});\n\nconst MarketPrice = observer(function MarketPrice(props: { market: Market }) {\n  const { market } = props;\n  return <div>{market.lastPrice}</div>;\n});\n","import React from \"react\";\nimport { observer, useLocalStore } from \"mobx-react-lite\";\nimport \"./index.scss\";\nimport { UpdatableCard } from \"../UpdatableCard\";\nimport { Icon, Tabs } from \"antd\";\nimport { Exchange } from \"../../state/res/Exchange\";\nimport { Market } from \"../../state/res/Market\";\nimport { MobTable } from \"../Util\";\nimport { useStore } from \"../../state\";\n\nconst { TabPane } = Tabs;\n\nexport const MarketsView = observer(function MarketsView(props: {\n  exchange: Exchange;\n}) {\n  const { exchange } = props;\n\n  const { uiStates } = useStore();\n\n  const state = useLocalStore(() => ({\n    get quotes(): string[] {\n      const s = new Set<string>();\n      const list = exchange.allMarkets;\n      list.forEach(o => {\n        s.add(o.spec.quote);\n      });\n      return Array.from(s);\n    }\n  }));\n\n  const renderCurrentAccount = () => {\n    let account = uiStates.account; //store.accounts.all.find(o => o.exchange === exchange);\n\n    if (!account) {\n      return null;\n    } else {\n      const balances = account.balances.balancesNotZero;\n\n      const markets: Market[] = [];\n      balances.forEach(balance => {\n        markets.push(\n          ...account.exchange.getMarketsByCoinSymbolFilterActive(balance.base)\n        );\n      });\n\n      return (\n        <TabPane tab={<Icon type=\"bank\" />} key={account.name}>\n          <MarketsTable markets={markets} />\n        </TabPane>\n      );\n    }\n  };\n\n  return (\n    <UpdatableCard\n      title={\"Markets\"}\n      className={\"Markets\"}\n      updatableRes={exchange}\n      updateImmediately={false}\n    >\n      <Tabs defaultActiveKey=\"1\" onChange={() => {}}>\n        {renderCurrentAccount()}\n\n        {state.quotes.map(v => {\n          const markets = exchange.allMarkets.filter(\n            o => o.spec.active && o.spec.quote === v\n          );\n          return (\n            <TabPane tab={v} key={v}>\n              <MarketsTable markets={markets} />\n            </TabPane>\n          );\n        })}\n      </Tabs>\n    </UpdatableCard>\n  );\n});\n\nconst MarketsTable = observer(function MarketsTable(props: {\n  markets: Market[];\n}) {\n  const { markets } = props;\n\n  const { uiStates } = useStore();\n\n  return (\n    <MobTable<Market>\n      size={\"small\"}\n      dataSource={markets}\n      rowKey={row => {\n        return row.spec.symbol;\n      }}\n      onRow={(row: Market) => {\n        return {\n          onClick() {\n            uiStates.market = row;\n          }\n        };\n      }}\n      columns={[\n        {\n          dataIndex: \"exchange\",\n          render: (v, row) => <div>{row.spec.symbol}</div>\n        },\n        {\n          dataIndex: \"price\",\n          render: (v, row) => (\n            <div>{row.lastTicker && row.lastTicker.close}</div>\n          )\n        }\n      ]}\n    />\n  );\n});\n","import React from \"react\";\nimport { observer, useLocalStore } from \"mobx-react-lite\";\nimport \"./index.scss\";\nimport { OrderModel } from \"../../model/models\";\nimport { UpdatableCard } from \"../UpdatableCard\";\nimport { Tabs } from \"antd\";\nimport { FormatTimeAuto, MobTable, Ob } from \"../Util\";\nimport { Account } from \"../../state/res/Account\";\nimport { Market } from \"../../state/res/Market\";\n\nconst TabPane = Tabs.TabPane;\n\nexport const AccountOrders = observer(function AccountOrders(props: {\n  account: Account;\n  market: Market;\n}) {\n  const { account, market } = props;\n\n  const res = account.safeGetAccountOrder(market);\n\n  const state = useLocalStore(() => ({\n    activeTab: \"active\" //active / all\n  }));\n\n  if (!res) {\n    return null;\n  }\n\n  const renderTable = orders => {\n    return (\n      <MobTable<OrderModel>\n        size={\"small\"}\n        dataSource={orders}\n        rowKey={\"id\"}\n        columns={[\n          {\n            dataIndex: \"symbol\"\n          },\n          {\n            dataIndex: \"timestamp\",\n            render: v => <FormatTimeAuto val={v} />\n          },\n          {\n            dataIndex: \"side\"\n          },\n          {\n            dataIndex: \"type\"\n          },\n          {\n            dataIndex: \"status\"\n          },\n\n          {\n            dataIndex: \"amount\"\n          },\n          {\n            dataIndex: \"cost\"\n          },\n          {\n            dataIndex: \"price\"\n          },\n          {\n            dataIndex: \"filled\"\n          },\n          {\n            dataIndex: \"remaining\"\n          }\n        ]}\n      />\n    );\n  };\n\n  return (\n    <UpdatableCard\n      title={\n        <div>\n          Orders <Ob r={() => market.spec.symbol} />\n        </div>\n      }\n      className={\"UserOrders\"}\n      updatableRes={res}\n    >\n      <div className={\"UserOrdersContainer\"}>\n        <Tabs\n          defaultActiveKey=\"all\"\n          onChange={activeKey => {\n            state.activeTab = activeKey;\n          }}\n        >\n          <TabPane tab=\"Active\" key=\"active\">\n            {renderTable(res.activeOrders)}\n          </TabPane>\n          <TabPane tab=\"All\" key=\"all\">\n            {renderTable(res.all)}\n          </TabPane>\n        </Tabs>\n      </div>\n    </UpdatableCard>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport \"./index.scss\";\nimport { BalanceModel } from \"../../model/models\";\nimport { UpdatableCard } from \"../UpdatableCard\";\nimport Scrollbars from \"react-custom-scrollbars\";\nimport { Badge, Progress } from \"antd\";\nimport { FormatPercentage, FormatValue, Ob } from \"../Util\";\nimport { Account } from \"../../state/res/Account\";\nimport { Market } from \"../../state/res/Market\";\n\nexport const CurrentBalance = observer(function CurrentBalance(props: {\n  account: Account;\n  market: Market;\n}) {\n  const { market, account } = props;\n\n  // const account = uiStates.account; //accounts.all.find((o)=>o.)  //accounts.accountsMap.get()\n\n  const res = account.balances;\n  const balance = res.map.get(market.spec.base);\n\n  if (!res || !balance) {\n    return null;\n  }\n\n  const userOrder = account.safeGetAccountOrder(market);\n  const { profit, rate } = account.computeProfitAndRate(market);\n\n  return (\n    <UpdatableCard\n      title={\n        <div>\n          {account.name}-<Ob r={() => market.spec.symbol} />\n        </div>\n      }\n      className={\"BalanceCard\"}\n      updatableRes={market}\n    >\n      <Scrollbars style={{ height: 400 }} autoHide={true}>\n        <div className={\"BalanceCardContainer\"}>\n          <BalanceItem balance={balance} />\n\n          <div className={\"ProfitSection\"}>\n            <h3>Profit</h3>\n            <div>\n              <FormatValue val={profit} market={market.spec} /> /{\" \"}\n              <FormatPercentage val={rate} />\n            </div>\n\n            <div className={\"profitRow2\"}>\n              <div>\n                <Badge color=\"red\" text=\"Cost\" />\n                <FormatValue\n                  val={account.computeOutMoneyByHistory(userOrder.all)}\n                  market={market.spec}\n                />\n              </div>\n\n              <div>\n                <Badge color=\"green\" text=\"Current Value\" />\n                <FormatValue\n                  val={account.computeCurrentValue(market)}\n                  market={market.spec}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Scrollbars>\n    </UpdatableCard>\n  );\n});\n\nconst BalanceItem = observer(function BalanceItem(props: {\n  balance: BalanceModel;\n}) {\n  const { balance } = props;\n  const usedPercent = (balance.used / balance.total) * 100;\n  const freePercent = (balance.free / balance.total) * 100;\n\n  const renderRow = (color: string, percent: number, text: string, val) => {\n    return (\n      <div className={\"BalanceItemRow\"}>\n        <Progress percent={percent} size=\"small\" showInfo={false} />\n        <div className={\"BalanceItemRowDown\"}>\n          <Badge status=\"success\" text={text} />\n          <div className={\"BalanceItemRowText\"}>{balance.total}</div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={\"BalanceItem\"}>\n      {renderRow(\"green\", 100, \"Total\", balance.total)}\n      {renderRow(\"green\", freePercent, \"Free\", balance.free)}\n      {renderRow(\"green\", usedPercent, \"Used\", balance.used)}\n    </div>\n  );\n});\n","import React, { useEffect, useRef } from \"react\";\nimport { observer, useLocalStore } from \"mobx-react-lite\";\nimport { Button, Form, Input, Modal, Tabs, Tag } from \"antd\";\nimport \"./index.scss\";\nimport { UpdatableCard } from \"../UpdatableCard\";\nimport { useStore } from \"../../state\";\nimport { Exchange } from \"../../state/res/Exchange\";\nimport { WrappedFormUtils } from \"antd/lib/form/Form\";\nimport { Account } from \"../../state/res/Account\";\nimport { BalanceModel } from \"../../model/models\";\nimport { CurrentBalance } from \"../CurrentBalance\";\nimport { MobTable } from \"../Util\";\n\nconst { TabPane } = Tabs;\n\nexport const AccountsBalanceView = observer(\n  function AccountsBalanceView(props: { exchange: Exchange }) {\n    const { exchange } = props;\n\n    const { uiStates } = useStore();\n\n    return (\n      <Tabs defaultActiveKey=\"1\" onChange={() => {}}>\n        <TabPane tab=\"Accounts\" key=\"1\">\n          <AccountsView exchange={exchange} />\n        </TabPane>\n        <TabPane tab=\"Balance\" key=\"2\">\n          {uiStates.market && uiStates.account && (\n            <CurrentBalance\n              account={uiStates.account}\n              market={uiStates.market}\n            />\n          )}\n        </TabPane>\n      </Tabs>\n    );\n  }\n);\n\nexport const AccountsView = observer(function AccountsView(props: {\n  exchange: Exchange;\n}) {\n  const { exchange } = props;\n\n  const { accounts, uiStates } = useStore();\n\n  const formRef = useRef(null as any);\n\n  const state = useLocalStore(() => ({\n    visible: false,\n\n    addAccount(name, cctxOptions) {\n      accounts.createAccountAndSaveLs(exchange, name, cctxOptions).then(() => {\n        console.log(\"添加成功\");\n        state.visible = false;\n      });\n    },\n\n    handleCreate() {\n      const form = formRef.current.props.form as WrappedFormUtils;\n      form.validateFields((err, values) => {\n        if (err) {\n          return;\n        }\n        console.log(\"Received values of form: \", values);\n\n        state.addAccount(values.name, {\n          apiKey: values.apiKey,\n          secret: values.secret\n        });\n      });\n    }\n  }));\n\n  useEffect(() => {}, []);\n\n  const list = accounts.all.filter(o => o.exchange === exchange);\n\n  return (\n    <UpdatableCard\n      title={<div>Accounts in:{exchange.exchange}</div>}\n      updatableRes={accounts}\n    >\n      <div style={{ padding: 12 }}>\n        <Button\n          type={\"primary\"}\n          onClick={() => {\n            state.visible = true;\n          }}\n        >\n          add\n        </Button>\n      </div>\n\n      <AccountCreateForm\n        wrappedComponentRef={formRef as any}\n        visible={state.visible as any}\n        onCancel={() => {\n          state.visible = false;\n        }}\n        onCreate={() => {\n          state.handleCreate();\n        }}\n      />\n\n      <MobTable<Account>\n        size={\"small\"}\n        dataSource={list}\n        rowKey={row => {\n          return row.name;\n        }}\n        columns={[\n          {\n            dataIndex: \"name\",\n            render: (v, row) => (\n              <Tag\n                color=\"gold\"\n                onClick={() => {\n                  uiStates.account = row;\n                }}\n              >\n                {row.name}\n              </Tag>\n            )\n          },\n\n          {\n            dataIndex: \"action\",\n            render: (v, row) => (\n              <div>\n                <Button\n                  type={\"danger\"}\n                  size={\"small\"}\n                  onClick={() => {\n                    accounts.lsAccountsRemove(row.name);\n                  }}\n                >\n                  delete\n                </Button>\n              </div>\n            )\n          }\n        ]}\n      />\n\n      {uiStates.account && (\n        <UserAsset key={uiStates.account.name} account={uiStates.account} />\n      )}\n    </UpdatableCard>\n  );\n});\n\nconst AccountCreateForm = Form.create<{\n  visible;\n  onCancel;\n  onCreate;\n  form;\n  wrappedComponentRef;\n}>({ name: \"AccountCreateForm\" })(\n  class extends React.Component {\n    render() {\n      const { visible, onCancel, onCreate, form } = this.props as any;\n      const { getFieldDecorator } = form;\n      return <HookForm {...this.props} />;\n    }\n  }\n);\n\nfunction HookForm(props: any) {\n  const { visible, onCancel, onCreate, form } = props;\n  const { getFieldDecorator } = form;\n  return (\n    <Modal\n      visible={visible}\n      title=\"Create An Account\"\n      okText=\"Create\"\n      onCancel={onCancel}\n      onOk={onCreate}\n    >\n      <Form layout=\"vertical\">\n        <Form.Item label=\"name\">\n          {getFieldDecorator(\"name\", {\n            rules: [\n              {\n                required: true\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"apiKey\">\n          {getFieldDecorator(\"apiKey\", {\n            rules: [\n              {\n                required: true\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"secret\">\n          {getFieldDecorator(\"secret\", {\n            rules: [\n              {\n                required: true\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n\nconst UserAsset = observer(function UserAsset(props: { account: Account }) {\n  const { account } = props;\n\n  const { uiStates } = useStore();\n\n  const list = account.balances.balancesNotZero;\n\n  return (\n    <div className={\"UserAsset\"}>\n      <UpdatableCard\n        title={<div>Balances</div>}\n        updatableRes={account.balances}\n      >\n        <MobTable<BalanceModel>\n          size={\"small\"}\n          dataSource={list}\n          rowKey={\"base\"}\n          columns={[\n            {\n              dataIndex: \"base\",\n              render: (v, row) => {\n                const coinSymbol = row.base;\n                const markets = account.exchange.getMarketsByCoinSymbol(\n                  coinSymbol\n                );\n                const loading = markets.every(o => o.loading);\n\n                return (\n                  <div>\n                    {row.base} {/*{markets.length && (*/}\n                    {/*  <Button*/}\n                    {/*    type={\"primary\"}*/}\n                    {/*    shape=\"circle\"*/}\n                    {/*    icon=\"sync\"*/}\n                    {/*    onClick={async () => {*/}\n                    {/*      for (const market of markets) {*/}\n                    {/*        await market.updateRes();*/}\n                    {/*      }*/}\n                    {/*    }}*/}\n                    {/*    loading={loading}*/}\n                    {/*  />*/}\n                    {/*)}*/}\n                  </div>\n                );\n              }\n            },\n            {\n              dataIndex: \"total\"\n            }\n            // mCol({ dataIndex: \"free\" }),\n            // mCol({ dataIndex: \"used\" })\n          ]}\n          // expandedRowRender={row => {\n          //   return (\n          //     <Ob\n          //       r={() => {\n          //         const coinSymbol = row.key;\n          //         const markets = account.exchange.getMarketsByCoinSymbol(\n          //           coinSymbol\n          //         );\n          //\n          //         return (\n          //           <div className={\"orderCol\"}>\n          //             {markets.map(o => {\n          //               // account.exchange.marketsMap.get(o.spec.symbol);\n          //               const { profit, rate } = account.computeProfitAndRate(\n          //                 o\n          //               );\n          //\n          //               const accountOrder = account.safeGetAccountOrder(o);\n          //               const orderCount = accountOrder.all.length;\n          //\n          //               return (\n          //                 <div key={o.spec.quote} className={\"orderColItem\"}>\n          //                   <div className=\"btn\">\n          //                     <Button\n          //                       type={\"primary\"}\n          //                       shape=\"circle\"\n          //                       icon=\"sync\"\n          //                       onClick={async () => {\n          //                         await accountOrder.updateRes();\n          //                         await o.updateRes();\n          //                       }}\n          //                       loading={o.loading && accountOrder.loading}\n          //                     />\n          //                   </div>\n          //                   <div className=\"quote\">{o.spec.quote}:</div>\n          //                   <div className=\"viewOrder\">\n          //                     <Badge count={orderCount}>\n          //                       <Button\n          //                         style={{ marginLeft: 8 }}\n          //                         onClick={() => {\n          //                           uiStates.market = o;\n          //                         }}\n          //                       >\n          //                         切换市场\n          //                       </Button>\n          //                     </Badge>\n          //                   </div>\n          //                   <div className=\"profit\">\n          //                     <FormatValue val={profit} market={o.spec} /> (\n          //                     <FormatPercentage val={rate} />)\n          //                   </div>\n          //                 </div>\n          //               );\n          //             })}\n          //           </div>\n          //         );\n          //       }}\n          //     />\n          //   );\n          // }}\n        />\n      </UpdatableCard>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Col, Row } from \"antd\";\nimport \"./index.scss\";\nimport { RecentTrades } from \"../RecentTrades\";\nimport { OrderBook } from \"../OrderBook\";\nimport { MarketsView } from \"../MarketsView\";\nimport { useStore } from \"../../state\";\nimport { Exchange } from \"../../state/res/Exchange\";\nimport { AccountOrders } from \"../AccountOrders\";\nimport { AccountsBalanceView } from \"../AccountsBalanceView\";\n\nexport const TradeMainView = observer(function TradeMainView(props: {\n  exchange: Exchange;\n}) {\n  const { exchange } = props;\n\n  const { uiStates } = useStore();\n\n  return (\n    <div className={\"TradeMainView\"}>\n      <Row>\n        <Col md={6} sm={12} xs={24}>\n          <MarketsView exchange={exchange} />\n        </Col>\n\n        {uiStates.market && (\n          <>\n            <Col md={6} sm={12} xs={24}>\n              <OrderBook\n                key={uiStates.market.spec.symbol}\n                market={uiStates.market}\n              />\n            </Col>\n            <Col md={6} sm={12} xs={24}>\n              <RecentTrades\n                key={uiStates.market.spec.symbol}\n                market={uiStates.market}\n              />\n            </Col>\n          </>\n        )}\n\n        <Col md={6} sm={12} xs={24}>\n          <AccountsBalanceView exchange={exchange} />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col span={24}>\n          <div style={{ maxWidth: \"100%\", overflowX: \"scroll\" }}>\n            <div style={{ minWidth: 900 }}>\n              {uiStates.market && uiStates.account && (\n                <AccountOrders\n                  key={uiStates.market.spec.symbol + uiStates.account.name}\n                  account={uiStates.account}\n                  market={uiStates.market}\n                />\n              )}\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport \"./index.scss\";\nimport { UpdatableCard } from \"../UpdatableCard\";\nimport { useStore } from \"../../state\";\nimport { Exchange } from \"../../state/res/Exchange\";\nimport { TradeMainView } from \"../TradeMainView\";\n\nexport const ExchangeView = observer(function ExchangeView(props: {\n  exchange: Exchange;\n}) {\n  const { exchange } = props;\n  const { uiStates } = useStore();\n\n  const list = exchange.allMarkets;\n\n  return (\n    <UpdatableCard\n      title={<div>Exchange - {exchange.exchange}</div>}\n      updatableRes={exchange}\n    >\n      <TradeMainView exchange={exchange} />\n    </UpdatableCard>\n  );\n});\n","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { PageStruct } from \"../Util\";\nimport { ExchangeView } from \"../../components/ExchangeView\";\nimport { useStore } from \"../../state\";\nimport { useParams } from \"react-router-dom\";\nimport { Empty } from \"antd\";\n\nexport const ExchangePage = observer(function ExchangePage() {\n  const { exchanges, uiStates } = useStore();\n\n  const { exchangeKey } = useParams<{ exchangeKey: string }>();\n\n  const exchange = exchanges.exchangesMap.get(exchangeKey);\n\n  useEffect(() => {\n    uiStates.changeExchange(exchange);\n  }, [exchange]);\n\n  return (\n    <PageStruct>\n      {exchange ? (\n        <ExchangeView key={exchange.exchange} exchange={exchange} />\n      ) : (\n        <Empty />\n      )}\n    </PageStruct>\n  );\n});\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport \"./index.scss\";\nimport { Home } from \"./Home\";\nimport { ExchangePage } from \"./Exchange\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n\n          <Route path={\"/exchange/:exchangeKey\"}>\n            <ExchangePage />\n          </Route>\n          <Redirect from=\"/exchange\" to=\"/exchange/none\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./styles/App.scss\";\nimport { AppRootStore } from \"./state/AppRootStore\";\nimport { StoreContext } from \"./state\";\n\nimport RouterApp from \"./pages/index\";\n\nconst store = (window[\"store\"] = window[\"ss\"] = new AppRootStore());\n\nconst App: React.FC = () => {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const init = async () => {\n      await store.exchanges.initExchanges();\n      setReady(true);\n    };\n\n    init();\n  }, []);\n  return (\n    <div className=\"App\">\n      <StoreContext.Provider value={store}>\n        {ready && <RouterApp />}\n      </StoreContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}